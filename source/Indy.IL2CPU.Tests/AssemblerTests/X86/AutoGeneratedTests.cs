using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Indy.IL2CPU.Assembler.X86;
using NUnit.Framework;

namespace Indy.IL2CPU.Tests.AssemblerTests.X86 {
	[TestFixture]
	public partial class XchgTests: BaseTest {
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.AX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.CX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.DI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.SP, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.BP, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Xchg{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class MoveSSTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class NotTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Not{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class DecTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Dec{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class AddWithCarryTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class PushadTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Pushad();
			Verify();
		}
	}
	[TestFixture]
	public partial class StiTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Sti();
			Verify();
		}
	}
	[TestFixture]
	public partial class AddTests: BaseTest {
		[Test]
		public void TestMemorySourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.AX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.CX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.DI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.SP, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.BP, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Add{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class SubTests: BaseTest {
		[Test]
		public void TestImmediateSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 30, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.AX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.CX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.DI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.SP, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.BP, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestImmediateSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 300000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Sub{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class RepeatStosTests: BaseTest {
		[Test]
		public void TestInstructionSize32() {
			new global::Indy.IL2CPU.Assembler.X86.RepeatStos{Size = 32};
			Verify();
		}
		[Test]
		public void TestInstructionSize16() {
			new global::Indy.IL2CPU.Assembler.X86.RepeatStos{Size = 16};
			Verify();
		}
		[Test]
		public void TestInstructionSize8() {
			new global::Indy.IL2CPU.Assembler.X86.RepeatStos{Size = 8};
			Verify();
		}
	}
	[TestFixture]
	public partial class PopTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Pop{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class ShiftRightTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class PushTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Push{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class NegTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Neg{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class DivideTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Divide{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class PopadTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Popad();
			Verify();
		}
	}
	[TestFixture]
	public partial class MoveAndZeroExtendTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class MoveTests: BaseTest {
		[Test]
		public void TestMemorySourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DH, DestinationReg = Registers.DL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize16() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.AX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.CX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DX, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.DI, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.SP, DestinationReg = Registers.BP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.BP, DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemorySourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemorySourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 65, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceValue = 650000, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDISourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 2030, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, SourceIsIndirect = true, SourceDisplacement = 203000, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize32() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EAX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ECX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDX, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EBP, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.ESI, DestinationReg = Registers.EDI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Move{SourceReg = Registers.EDI, DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class MoveIfBelowTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class ConditionalJumpTests: BaseTest {
		[Test]
		public void TestImmediateDestination() {
			new global::Indy.IL2CPU.Assembler.X86.ConditionalJump{DestinationValue = 30};
			new global::Indy.IL2CPU.Assembler.X86.ConditionalJump{DestinationValue = 300};
			new global::Indy.IL2CPU.Assembler.X86.ConditionalJump{DestinationValue = 300000};
			Verify();
		}
	}
	[TestFixture]
	public partial class JumpTests: BaseTest {
		[Test]
		public void TestImmediateDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 30};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 300};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 300000};
			Verify();
		}
		[Test]
		public void Test8BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 65, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test16BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 650, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test32BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationValue = 650000, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EAX, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EAX, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EAX, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EAX, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBX, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBX, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBX, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBX, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ECX, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ECX, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ECX, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ECX, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDX, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDX, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDX, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDX, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESP, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESP, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESP, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESP, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBP, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBP, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBP, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EBP, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESI, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESI, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESI, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.ESI, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDI, DestinationIsIndirect=true};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDI, DestinationIsIndirect=true, DestinationDisplacement = 203};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDI, DestinationIsIndirect=true, DestinationDisplacement = 2030};
			new global::Indy.IL2CPU.Assembler.X86.Jump{DestinationReg = Registers.EDI, DestinationIsIndirect=true, DestinationDisplacement = 203000};
			Verify();
		}
	}
	[TestFixture]
	public partial class IncTests: BaseTest {
		[Test]
		public void TestMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 65, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650000, DestinationIsIndirect = true, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 16};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize16() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.AX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.BX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.CX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.DX, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.SI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.DI, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.SP, Size = 16};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.BP, Size = 16};
			Verify();
		}
		[Test]
		public void TestMemoryDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 65, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationValue = 650000, DestinationIsIndirect = true, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEAXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterECXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDXDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEBPDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterESIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestMemoryAtRegisterEDIDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 32};
			Verify();
		}
		[Test]
		public void TestRegisterDestinationSize32() {
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EAX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ECX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDX, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EBP, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.ESI, Size = 32};
			new global::Indy.IL2CPU.Assembler.X86.Inc{DestinationReg = Registers.EDI, Size = 32};
			Verify();
		}
	}
	[TestFixture]
	public partial class CallTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class OutTests: BaseTest {
	}
	[TestFixture]
	public partial class CompareTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class PushfdTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Pushfd();
			Verify();
		}
	}
	[TestFixture]
	public partial class MoveAndSignExtendTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class ReturnTests: BaseTest {
	}
	[TestFixture]
	public partial class CpuIdTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.CpuId();
			Verify();
		}
	}
	[TestFixture]
	public partial class SignExtendAXTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class PopfdTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Popfd();
			Verify();
		}
	}
	[TestFixture]
	public partial class XorTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class StoreWordInStringTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.StoreWordInString();
			Verify();
		}
	}
	[TestFixture]
	public partial class InterruptTests: BaseTest {
		[Test]
		public void TestImmediateDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Interrupt{DestinationValue = 30};
			new global::Indy.IL2CPU.Assembler.X86.Interrupt{DestinationValue = 300};
			new global::Indy.IL2CPU.Assembler.X86.Interrupt{DestinationValue = 300000};
			Verify();
		}
	}
	[TestFixture]
	public partial class MoveIfLessTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class TestTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class StoreByteInStringTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.StoreByteInString();
			Verify();
		}
	}
	[TestFixture]
	public partial class AddSSTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class LidtTests: BaseTest {
		[Test]
		public void Test8BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lidt{DestinationValue = 65, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test16BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lidt{DestinationValue = 650, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test32BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lidt{DestinationValue = 650000, DestinationIsIndirect = true};
			Verify();
		}
	}
	[TestFixture]
	public partial class StoreSDTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.StoreSD();
			Verify();
		}
	}
	[TestFixture]
	public partial class RotateThroughCarryRightTests: BaseTest {
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.RotateThroughCarryRight{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
	}
	[TestFixture]
	public partial class ClrInterruptFlagTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.ClrInterruptFlag();
			Verify();
		}
	}
	[TestFixture]
	public partial class ClrDirFlagTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.ClrDirFlag();
			Verify();
		}
	}
	[TestFixture]
	public partial class AndTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class InTests: BaseTest {
	}
	[TestFixture]
	public partial class FXStoreTests: BaseTest {
		[Test]
		public void Test8BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXStore{DestinationValue = 65, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test16BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXStore{DestinationValue = 650, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test32BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXStore{DestinationValue = 650000, DestinationIsIndirect = true};
			Verify();
		}
	}
	[TestFixture]
	public partial class ShiftLeftTests: BaseTest {
		[Test]
		public void TestImmediateSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestImmediateSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceValue = 30, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceImmediateDestinationSize8() {
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationValue = 65, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationValue = 650, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationValue = 650000, DestinationIsIndirect = true, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEAXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EAX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterECXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ECX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDXDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDX, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEBPDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EBP, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterESIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.ESI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceMemoryAtRegisterEDIDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 2030, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.EDI, DestinationIsIndirect = true, DestinationDisplacement = 203000, Size = 8};
			Verify();
		}
		[Test]
		public void TestRegisterSourceRegisterDestinationSize8() {
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.AH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.AL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.BH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.BL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.CH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.CL, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.DH, Size = 8};
			new global::Indy.IL2CPU.Assembler.X86.ShiftLeft{SourceReg = Registers.CL, DestinationReg = Registers.DL, Size = 8};
			Verify();
		}
	}
	[TestFixture]
	public partial class LgdtTests: BaseTest {
		[Test]
		public void Test8BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lgdt{DestinationValue = 65, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test16BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lgdt{DestinationValue = 650, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test32BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.Lgdt{DestinationValue = 650000, DestinationIsIndirect = true};
			Verify();
		}
	}
	[TestFixture]
	public partial class JumpToSegmentTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class FXSaveTests: BaseTest {
		[Test]
		public void Test8BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXSave{DestinationValue = 65, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test16BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXSave{DestinationValue = 650, DestinationIsIndirect = true};
			Verify();
		}
		[Test]
		public void Test32BitMemoryAddressDestination() {
			new global::Indy.IL2CPU.Assembler.X86.FXSave{DestinationValue = 650000, DestinationIsIndirect = true};
			Verify();
		}
	}
	[TestFixture]
	public partial class OrTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class NoopTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Noop();
			Verify();
		}
	}
	[TestFixture]
	public partial class CmpXchgTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class IDivideTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class ClrCarryFlagTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.ClrCarryFlag();
			Verify();
		}
	}
	[TestFixture]
	public partial class MultiplyTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class InterruptReturnTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class ConvByteToWordTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class SubWithCarryTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class JumpIfECXZeroTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
	[TestFixture]
	public partial class HaltTests: BaseTest {
		[Test]
		public void TestInstruction() {
			new global::Indy.IL2CPU.Assembler.X86.Halt();
			Verify();
		}
	}
	[TestFixture]
	public partial class MovsTests: BaseTest {
[Test]
[Category("MissingEncodingOptions")]
public void DoTest(){
Assert.Fail("No Encoding Options specified");
}
	}
}
