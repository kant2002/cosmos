


GCC(1)                         GNU                         GCC(1)


NNNNAAAAMMMMEEEE
       gcc - GNU project C and C++ compiler

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
       gcc [----cccc|----SSSS|----EEEE] [----ssssttttdddd====_s_t_a_n_d_a_r_d]
           [----gggg] [----ppppgggg] [----OOOO_l_e_v_e_l]
           [----WWWW_w_a_r_n...] [----ppppeeeeddddaaaannnnttttiiiicccc]
           [----IIII_d_i_r...] [----LLLL_d_i_r...]
           [----DDDD_m_a_c_r_o[=_d_e_f_n]...] [----UUUU_m_a_c_r_o]
           [----ffff_o_p_t_i_o_n...] [----mmmm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [----oooo _o_u_t_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below
       for the remainder.  gggg++++++++ accepts mostly the same options as
       ggggcccccccc.

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
       When you invoke GCC, it normally does preprocessing,
       compilation, assembly and linking.  The ``overall
       options'' allow you to stop this process at an
       intermediate stage.  For example, the ----cccc option says not
       to run the linker.  Then the output consists of object
       files output by the assembler.

       Other options are passed on to one stage of processing.
       Some options control the preprocessor and others the
       compiler itself.  Yet other options control the assembler
       and linker; most of these are not documented here, since
       you rarely need to use any of them.

       Most of the command line options that you can use with GCC
       are useful for C programs; when an option is only useful
       with another language (usually C++), the explanation says
       so explicitly.  If the description for a particular option
       does not mention a source language, you can use that
       option with all supported languages.

       The ggggcccccccc program accepts options and file names as
       operands.  Many options have multi-letter names; therefore
       multiple single-letter options may _n_o_t be grouped: ----ddddrrrr is
       very different from ----dddd ----rrrr.

       You can mix options and other arguments.  For the most
       part, the order you use doesn't matter.  Order does matter
       when you use several options of the same kind; for
       example, if you specify ----LLLL more than once, the directories
       are searched in the order specified.

       Many options have long names starting with ----ffff or with
       ----WWWW---for example, ----ffffffffoooorrrrcccceeee----mmmmeeeemmmm, ----ffffssssttttrrrreeeennnnggggtttthhhh----rrrreeeedddduuuucccceeee, ----WWWWffffoooorrrrmmmmaaaatttt
       and so on.  Most of these have both positive and negative
       forms; the negative form of ----ffffffffoooooooo would be ----ffffnnnnoooo----ffffoooooooo.  This
       manual documents only one of these two forms, whichever
       one is not the default.



2004-02-14                  gcc-3.3.3                           1





GCC(1)                         GNU                         GCC(1)


OOOOPPPPTTTTIIIIOOOONNNNSSSS
       OOOOppppttttiiiioooonnnn SSSSuuuummmmmmmmaaaarrrryyyy

       Here is a summary of all the options, grouped by type.
       Explanations are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           ----cccc  ----SSSS  ----EEEE  ----oooo _f_i_l_e  ----ppppiiiippppeeee  ----ppppaaaassssssss----eeeexxxxiiiitttt----ccccooooddddeeeessss ----xxxx
           _l_a_n_g_u_a_g_e  ----vvvv  ----############  --------hhhheeeellllpppp  --------ttttaaaarrrrggggeeeetttt----hhhheeeellllpppp  --------vvvveeeerrrrssssiiiioooonnnn

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           ----aaaannnnssssiiii  ----ssssttttdddd====_s_t_a_n_d_a_r_d  ----aaaauuuuxxxx----iiiinnnnffffoooo _f_i_l_e_n_a_m_e ----ffffnnnnoooo----aaaassssmmmm
           ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn  ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn----_f_u_n_c_t_i_o_n ----ffffhhhhoooosssstttteeeedddd
           ----ffffffffrrrreeeeeeeessssttttaaaannnnddddiiiinnnngggg  ----ffffmmmmssss----eeeexxxxtttteeeennnnssssiiiioooonnnnssss ----ttttrrrriiiiggggrrrraaaapppphhhhssss  ----nnnnoooo----
           iiiinnnntttteeeeggggrrrraaaatttteeeedddd----ccccpppppppp  ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll  ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll----ccccpppppppp
           ----ffffaaaalllllllloooowwww----ssssiiiinnnngggglllleeee----pppprrrreeeecccciiiissssiiiioooonnnn  ----ffffccccoooonnnndddd----mmmmiiiissssmmmmaaaattttcccchhhh ----ffffssssiiiiggggnnnneeeedddd----
           bbbbiiiittttffffiiiieeeellllddddssss  ----ffffssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----bbbbiiiittttffffiiiieeeellllddddssss
           ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr ----ffffwwwwrrrriiiittttaaaabbbblllleeee----ssssttttrrrriiiinnnnggggssss

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           ----ffffaaaabbbbiiii----vvvveeeerrrrssssiiiioooonnnn====_n  ----ffffnnnnoooo----aaaacccccccceeeessssssss----ccccoooonnnnttttrrrroooollll  ----ffffcccchhhheeeecccckkkk----nnnneeeewwww
           ----ffffccccoooonnnnsssseeeerrrrvvvveeee----ssssppppaaaacccceeee  ----ffffnnnnoooo----ccccoooonnnnsssstttt----ssssttttrrrriiiinnnnggggssss  ----ffffddddoooollllllllaaaarrrrssss----iiiinnnn----
           iiiiddddeeeennnnttttiiiiffffiiiieeeerrrrssss ----ffffnnnnoooo----eeeelllliiiiddddeeee----ccccoooonnnnssssttttrrrruuuuccccttttoooorrrrssss ----ffffnnnnoooo----eeeennnnffffoooorrrrcccceeee----eeeehhhh----
           ssssppppeeeeccccssss  ----ffffeeeexxxxtttteeeerrrrnnnnaaaallll----tttteeeemmmmppppllllaaaatttteeeessss ----ffffaaaalllltttt----eeeexxxxtttteeeerrrrnnnnaaaallll----tttteeeemmmmppppllllaaaatttteeeessss
           ----ffffffffoooorrrr----ssssccccooooppppeeee  ----ffffnnnnoooo----ffffoooorrrr----ssssccccooooppppeeee  ----ffffnnnnoooo----ggggnnnnuuuu----kkkkeeeeyyyywwwwoooorrrrddddssss ----ffffnnnnoooo----
           iiiimmmmpppplllliiiicccciiiitttt----tttteeeemmmmppppllllaaaatttteeeessss ----ffffnnnnoooo----iiiimmmmpppplllliiiicccciiiitttt----iiiinnnnlllliiiinnnneeee----tttteeeemmmmppppllllaaaatttteeeessss
           ----ffffnnnnoooo----iiiimmmmpppplllleeeemmmmeeeennnntttt----iiiinnnnlllliiiinnnneeeessss  ----ffffmmmmssss----eeeexxxxtttteeeennnnssssiiiioooonnnnssss ----ffffnnnnoooo----nnnnoooonnnnaaaannnnssssiiii----
           bbbbuuuuiiiillllttttiiiinnnnssss  ----ffffnnnnoooo----ooooppppeeeerrrraaaattttoooorrrr----nnnnaaaammmmeeeessss ----ffffnnnnoooo----ooooppppttttiiiioooonnnnaaaallll----ddddiiiiaaaaggggssss
           ----ffffppppeeeerrrrmmmmiiiissssssssiiiivvvveeee ----ffffrrrreeeeppppoooo  ----ffffnnnnoooo----rrrrttttttttiiii  ----ffffssssttttaaaattttssss  ----fffftttteeeemmmmppppllllaaaatttteeee----
           ddddeeeepppptttthhhh----_n ----ffffuuuusssseeee----ccccxxxxaaaa----aaaatttteeeexxxxiiiitttt  ----ffffvvvvttttaaaabbbblllleeee----ggggcccc  ----ffffnnnnoooo----wwwweeeeaaaakkkk
           ----nnnnoooossssttttddddiiiinnnncccc++++++++ ----ffffnnnnoooo----ddddeeeeffffaaaauuuulllltttt----iiiinnnnlllliiiinnnneeee  ----WWWWaaaabbbbiiii  ----WWWWccccttttoooorrrr----ddddttttoooorrrr----
           pppprrrriiiivvvvaaaaccccyyyy ----WWWWnnnnoooonnnn----vvvviiiirrrrttttuuuuaaaallll----ddddttttoooorrrr  ----WWWWrrrreeeeoooorrrrddddeeeerrrr ----WWWWeeeeffffffffcccc++++++++  ----WWWWnnnnoooo----
           ddddeeeepppprrrreeeeccccaaaatttteeeedddd ----WWWWnnnnoooo----nnnnoooonnnn----tttteeeemmmmppppllllaaaatttteeee----ffffrrrriiiieeeennnndddd  ----WWWWoooolllldddd----ssssttttyyyylllleeee----ccccaaaasssstttt
           ----WWWWoooovvvveeeerrrrllllooooaaaaddddeeeedddd----vvvviiiirrrrttttuuuuaaaallll  ----WWWWnnnnoooo----ppppmmmmffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnnssss ----WWWWssssiiiiggggnnnn----
           pppprrrroooommmmoooo  ----WWWWssssyyyynnnntttthhhh

       _O_b_j_e_c_t_i_v_e_-_C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           ----ffffccccoooonnnnssssttttaaaannnntttt----ssssttttrrrriiiinnnngggg----ccccllllaaaassssssss====_c_l_a_s_s_-_n_a_m_e ----ffffggggnnnnuuuu----rrrruuuunnnnttttiiiimmmmeeee
           ----ffffnnnneeeexxxxtttt----rrrruuuunnnnttttiiiimmmmeeee  ----ggggeeeennnn----ddddeeeeccccllllssss ----WWWWnnnnoooo----pppprrrroooottttooooccccoooollll  ----WWWWsssseeeelllleeeeccccttttoooorrrr
           ----WWWWuuuunnnnddddeeeeccccllllaaaarrrreeeedddd----sssseeeelllleeeeccccttttoooorrrr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           ----ffffmmmmeeeessssssssaaaaggggeeee----lllleeeennnnggggtttthhhh====_n ----ffffddddiiiiaaaaggggnnnnoooossssttttiiiiccccssss----sssshhhhoooowwww----
           llllooooccccaaaattttiiiioooonnnn====[oooonnnncccceeee|eeeevvvveeeerrrryyyy----lllliiiinnnneeee]

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           ----ffffssssyyyynnnnttttaaaaxxxx----oooonnnnllllyyyy  ----ppppeeeeddddaaaannnnttttiiiicccc  ----ppppeeeeddddaaaannnnttttiiiicccc----eeeerrrrrrrroooorrrrssss ----wwww  ----WWWW
           ----WWWWaaaallllllll  ----WWWWaaaaggggggggrrrreeeeggggaaaatttteeee----rrrreeeettttuuuurrrrnnnn ----WWWWccccaaaasssstttt----aaaalllliiiiggggnnnn  ----WWWWccccaaaasssstttt----qqqquuuuaaaallll
           ----WWWWcccchhhhaaaarrrr----ssssuuuubbbbssssccccrrrriiiippppttttssss  ----WWWWccccoooommmmmmmmeeeennnntttt ----WWWWccccoooonnnnvvvveeeerrrrssssiiiioooonnnn  ----WWWWnnnnoooo----
           ddddeeeepppprrrreeeeccccaaaatttteeeedddd----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnnssss ----WWWWddddiiiissssaaaabbbblllleeeedddd----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnn  ----WWWWnnnnoooo----
           ddddiiiivvvv----bbbbyyyy----zzzzeeeerrrroooo  ----WWWWeeeerrrrrrrroooorrrr ----WWWWffffllllooooaaaatttt----eeeeqqqquuuuaaaallll  ----WWWWffffoooorrrrmmmmaaaatttt
           ----WWWWffffoooorrrrmmmmaaaatttt====2222 ----WWWWffffoooorrrrmmmmaaaatttt----nnnnoooonnnnlllliiiitttteeeerrrraaaallll  ----WWWWffffoooorrrrmmmmaaaatttt----sssseeeeccccuuuurrrriiiittttyyyy
           ----WWWWiiiimmmmpppplllliiiicccciiiitttt  ----WWWWiiiimmmmpppplllliiiicccciiiitttt----iiiinnnntttt ----WWWWiiiimmmmpppplllliiiicccciiiitttt----ffffuuuunnnnccccttttiiiioooonnnn----
           ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnn ----WWWWeeeerrrrrrrroooorrrr----iiiimmmmpppplllliiiicccciiiitttt----ffffuuuunnnnccccttttiiiioooonnnn----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnn



2004-02-14                  gcc-3.3.3                           2





GCC(1)                         GNU                         GCC(1)


           ----WWWWiiiimmmmppppoooorrrrtttt  ----WWWWiiiinnnnlllliiiinnnneeee  ----WWWWnnnnoooo----eeeennnnddddiiiiffff----llllaaaabbbbeeeellllssss ----WWWWllllaaaarrrrggggeeeerrrr----tttthhhhaaaannnn----
           _l_e_n  ----WWWWlllloooonnnngggg----lllloooonnnngggg ----WWWWmmmmaaaaiiiinnnn  ----WWWWmmmmiiiissssssssiiiinnnngggg----bbbbrrrraaaacccceeeessss ----WWWWmmmmiiiissssssssiiiinnnngggg----
           ffffoooorrrrmmmmaaaatttt----aaaattttttttrrrriiiibbbbuuuutttteeee  ----WWWWmmmmiiiissssssssiiiinnnngggg----nnnnoooorrrreeeettttuuuurrrrnnnn ----WWWWnnnnoooo----mmmmuuuullllttttiiiicccchhhhaaaarrrr
           ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----eeeexxxxttttrrrraaaa----aaaarrrrggggssss  ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----yyyy2222kkkk ----WWWWnnnnoooo----iiiimmmmppppoooorrrrtttt
           ----WWWWnnnnoooonnnnnnnnuuuullllllll  ----WWWWppppaaaacccckkkkeeeedddd  ----WWWWppppaaaaddddddddeeeedddd ----WWWWppppaaaarrrreeeennnntttthhhheeeesssseeeessss
           ----WWWWppppooooiiiinnnntttteeeerrrr----aaaarrrriiiitttthhhh  ----WWWWrrrreeeedddduuuunnnnddddaaaannnntttt----ddddeeeeccccllllssss ----WWWWrrrreeeettttuuuurrrrnnnn----ttttyyyyppppeeee
           ----WWWWsssseeeeqqqquuuueeeennnncccceeee----ppppooooiiiinnnntttt  ----WWWWsssshhhhaaaaddddoooowwww ----WWWWssssiiiiggggnnnn----ccccoooommmmppppaaaarrrreeee  ----WWWWssssttttrrrriiiicccctttt----
           aaaalllliiiiaaaassssiiiinnnngggg ----WWWWsssswwwwiiiittttcccchhhh  ----WWWWsssswwwwiiiittttcccchhhh----ddddeeeeffffaaaauuuulllltttt  ----WWWWsssswwwwiiiittttcccchhhh----eeeennnnuuuummmm
           ----WWWWssssyyyysssstttteeeemmmm----hhhheeeeaaaaddddeeeerrrrssss  ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss  ----WWWWuuuunnnnddddeeeeffff
           ----WWWWuuuunnnniiiinnnniiiittttiiiiaaaalllliiiizzzzeeeedddd ----WWWWuuuunnnnkkkknnnnoooowwwwnnnn----pppprrrraaaaggggmmmmaaaassss  ----WWWWuuuunnnnrrrreeeeaaaacccchhhhaaaabbbblllleeee----ccccooooddddeeee
           ----WWWWuuuunnnnuuuusssseeeedddd  ----WWWWuuuunnnnuuuusssseeeedddd----ffffuuuunnnnccccttttiiiioooonnnn  ----WWWWuuuunnnnuuuusssseeeedddd----llllaaaabbbbeeeellll  ----WWWWuuuunnnnuuuusssseeeedddd----
           ppppaaaarrrraaaammmmeeeetttteeeerrrr ----WWWWuuuunnnnuuuusssseeeedddd----vvvvaaaalllluuuueeee  ----WWWWuuuunnnnuuuusssseeeedddd----vvvvaaaarrrriiiiaaaabbbblllleeee  ----WWWWwwwwrrrriiiitttteeee----
           ssssttttrrrriiiinnnnggggssss

       _C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           ----WWWWbbbbaaaadddd----ffffuuuunnnnccccttttiiiioooonnnn----ccccaaaasssstttt  ----WWWWmmmmiiiissssssssiiiinnnngggg----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnnssss ----WWWWmmmmiiiissssssssiiiinnnngggg----
           pppprrrroooottttoooottttyyyyppppeeeessss  ----WWWWnnnneeeesssstttteeeedddd----eeeexxxxtttteeeerrrrnnnnssss ----WWWWssssttttrrrriiiicccctttt----pppprrrroooottttoooottttyyyyppppeeeessss
           ----WWWWttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           ----dddd_l_e_t_t_e_r_s  ----dddduuuummmmppppssssppppeeeeccccssss  ----dddduuuummmmppppmmmmaaaacccchhhhiiiinnnneeee  ----dddduuuummmmppppvvvveeeerrrrssssiiiioooonnnn
           ----ffffdddduuuummmmpppp----uuuunnnnnnnnuuuummmmbbbbeeeerrrreeeedddd  ----ffffdddduuuummmmpppp----ttttrrrraaaannnnssssllllaaaattttiiiioooonnnn----uuuunnnniiiitttt[----_n] ----ffffdddduuuummmmpppp----
           ccccllllaaaassssssss----hhhhiiiieeeerrrraaaarrrrcccchhhhyyyy[----_n] ----ffffdddduuuummmmpppp----ttttrrrreeeeeeee----oooorrrriiiiggggiiiinnnnaaaallll[----_n] ----ffffdddduuuummmmpppp----
           ttttrrrreeeeeeee----ooooppppttttiiiimmmmiiiizzzzeeeedddd[----_n] ----ffffdddduuuummmmpppp----ttttrrrreeeeeeee----iiiinnnnlllliiiinnnneeeedddd[----_n]
           ----ffffeeeelllliiiimmmmiiiinnnnaaaatttteeee----ddddwwwwaaaarrrrffff2222----dddduuuuppppssss  ----ffffmmmmeeeemmmm----rrrreeeeppppoooorrrrtttt ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss
           ----ffffrrrraaaannnnddddoooommmm----sssseeeeeeeedddd====_n ----ffffsssscccchhhheeeedddd----vvvveeeerrrrbbbboooosssseeee====_n ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee
           ----ffffttttiiiimmmmeeee----rrrreeeeppppoooorrrrtttt ----gggg  ----gggg_l_e_v_e_l  ----ggggccccooooffffffff  ----ggggddddwwwwaaaarrrrffff  ----ggggddddwwwwaaaarrrrffff----1111
           ----ggggddddwwwwaaaarrrrffff----1111++++  ----ggggddddwwwwaaaarrrrffff----2222 ----ggggggggddddbbbb  ----ggggssssttttaaaabbbbssss  ----ggggssssttttaaaabbbbssss++++  ----ggggvvvvmmmmssss
           ----ggggxxxxccccooooffffffff  ----ggggxxxxccccooooffffffff++++ ----pppp  ----ppppgggg  ----pppprrrriiiinnnntttt----ffffiiiilllleeee----nnnnaaaammmmeeee====_l_i_b_r_a_r_y
           ----pppprrrriiiinnnntttt----lllliiiibbbbggggcccccccc----ffffiiiilllleeee----nnnnaaaammmmeeee ----pppprrrriiiinnnntttt----mmmmuuuullllttttiiii----ddddiiiirrrreeeeccccttttoooorrrryyyy
           ----pppprrrriiiinnnntttt----mmmmuuuullllttttiiii----lllliiiibbbb ----pppprrrriiiinnnntttt----pppprrrroooogggg----nnnnaaaammmmeeee====_p_r_o_g_r_a_m  ----pppprrrriiiinnnntttt----
           sssseeeeaaaarrrrcccchhhh----ddddiiiirrrrssss  ----QQQQ ----ssssaaaavvvveeee----tttteeeemmmmppppssss  ----ttttiiiimmmmeeee

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss====_n  ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss====_n ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss====_n
           ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss====_n ----ffffbbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss  ----ffffccccaaaalllllllleeeerrrr----ssssaaaavvvveeeessss
           ----ffffccccpppprrrroooopppp----rrrreeeeggggiiiisssstttteeeerrrrssss ----ffffccccsssseeee----ffffoooolllllllloooowwww----jjjjuuuummmmppppssss  ----ffffccccsssseeee----sssskkkkiiiipppp----
           bbbblllloooocccckkkkssss  ----ffffddddaaaattttaaaa----sssseeeeccccttttiiiioooonnnnssss ----ffffddddeeeellllaaaayyyyeeeedddd----bbbbrrrraaaannnncccchhhh  ----ffffddddeeeelllleeeetttteeee----
           nnnnuuuullllllll----ppppooooiiiinnnntttteeeerrrr----cccchhhheeeecccckkkkssss ----ffffeeeexxxxppppeeeennnnssssiiiivvvveeee----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss  ----ffffffffaaaasssstttt----
           mmmmaaaatttthhhh  ----ffffffffllllooooaaaatttt----ssssttttoooorrrreeee ----ffffffffoooorrrrcccceeee----aaaaddddddddrrrr  ----ffffffffoooorrrrcccceeee----mmmmeeeemmmm
           ----ffffffffuuuunnnnccccttttiiiioooonnnn----sssseeeeccccttttiiiioooonnnnssss ----ffffggggccccsssseeee  ----ffffggggccccsssseeee----llllmmmm  ----ffffggggccccsssseeee----ssssmmmm
           ----fffflllloooooooopppp----ooooppppttttiiiimmmmiiiizzzzeeee  ----ffffccccrrrroooossssssssjjjjuuuummmmppppiiiinnnngggg ----ffffiiiiffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn  ----ffffiiiiffff----
           ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn2222 ----ffffiiiinnnnlllliiiinnnneeee----ffffuuuunnnnccccttttiiiioooonnnnssss  ----ffffiiiinnnnlllliiiinnnneeee----lllliiiimmmmiiiitttt====_n
           ----ffffkkkkeeeeeeeepppp----iiiinnnnlllliiiinnnneeee----ffffuuuunnnnccccttttiiiioooonnnnssss ----ffffkkkkeeeeeeeepppp----ssssttttaaaattttiiiicccc----ccccoooonnnnssssttttssss  ----ffffmmmmeeeerrrrggggeeee----
           ccccoooonnnnssssttttaaaannnnttttssss  ----ffffmmmmeeeerrrrggggeeee----aaaallllllll----ccccoooonnnnssssttttaaaannnnttttssss ----ffffmmmmoooovvvveeee----aaaallllllll----mmmmoooovvvvaaaabbbblllleeeessss
           ----ffffnnnneeeewwww----rrrraaaa  ----ffffnnnnoooo----bbbbrrrraaaannnncccchhhh----ccccoooouuuunnnntttt----rrrreeeegggg ----ffffnnnnoooo----ddddeeeeffffaaaauuuulllltttt----iiiinnnnlllliiiinnnneeee
           ----ffffnnnnoooo----ddddeeeeffffeeeerrrr----ppppoooopppp ----ffffnnnnoooo----ffffuuuunnnnccccttttiiiioooonnnn----ccccsssseeee  ----ffffnnnnoooo----gggguuuueeeessssssss----bbbbrrrraaaannnncccchhhh----
           pppprrrroooobbbbaaaabbbbiiiilllliiiittttyyyy ----ffffnnnnoooo----iiiinnnnlllliiiinnnneeee  ----ffffnnnnoooo----mmmmaaaatttthhhh----eeeerrrrrrrrnnnnoooo  ----ffffnnnnoooo----
           ppppeeeeeeeepppphhhhoooolllleeee  ----ffffnnnnoooo----ppppeeeeeeeepppphhhhoooolllleeee2222 ----ffffuuuunnnnssssaaaaffffeeee----mmmmaaaatttthhhh----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss
           ----ffffffffiiiinnnniiiitttteeee----mmmmaaaatttthhhh----oooonnnnllllyyyy ----ffffnnnnoooo----ttttrrrraaaappppppppiiiinnnngggg----mmmmaaaatttthhhh  ----ffffnnnnoooo----zzzzeeeerrrroooo----
           iiiinnnniiiittttiiiiaaaalllliiiizzzzeeeedddd----iiiinnnn----bbbbssssssss ----ffffoooommmmiiiitttt----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr  ----ffffooooppppttttiiiimmmmiiiizzzzeeee----
           rrrreeeeggggiiiisssstttteeeerrrr----mmmmoooovvvveeee ----ffffooooppppttttiiiimmmmiiiizzzzeeee----ssssiiiibbbblllliiiinnnngggg----ccccaaaallllllllssss  ----ffffpppprrrreeeeffffeeeettttcccchhhh----
           lllloooooooopppp----aaaarrrrrrrraaaayyyyssss ----ffffrrrreeeedddduuuucccceeee----aaaallllllll----ggggiiiivvvvssss  ----ffffrrrreeeeggggmmmmoooovvvveeee  ----ffffrrrreeeennnnaaaammmmeeee----
           rrrreeeeggggiiiisssstttteeeerrrrssss ----ffffrrrreeeeoooorrrrddddeeeerrrr----bbbblllloooocccckkkkssss  ----ffffrrrreeeeoooorrrrddddeeeerrrr----ffffuuuunnnnccccttttiiiioooonnnnssss



2004-02-14                  gcc-3.3.3                           3





GCC(1)                         GNU                         GCC(1)


           ----ffffrrrreeeerrrruuuunnnn----ccccsssseeee----aaaafffftttteeeerrrr----lllloooooooopppp  ----ffffrrrreeeerrrruuuunnnn----lllloooooooopppp----oooopppptttt ----ffffsssscccchhhheeeedddduuuulllleeee----
           iiiinnnnssssnnnnssss  ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss2222 ----ffffnnnnoooo----sssscccchhhheeeedddd----iiiinnnntttteeeerrrrbbbblllloooocccckkkk  ----ffffnnnnoooo----
           sssscccchhhheeeedddd----ssssppppeeeecccc  ----ffffsssscccchhhheeeedddd----ssssppppeeeecccc----llllooooaaaadddd ----ffffsssscccchhhheeeedddd----ssssppppeeeecccc----llllooooaaaadddd----
           ddddaaaannnnggggeeeerrrroooouuuussss  ----ffffssssiiiiggggnnnnaaaalllliiiinnnngggg----nnnnaaaannnnssss ----ffffssssiiiinnnngggglllleeee----pppprrrreeeecccciiiissssiiiioooonnnn----
           ccccoooonnnnssssttttaaaannnntttt  ----ffffssssssssaaaa  ----ffffssssssssaaaa----ccccccccpppp  ----ffffssssssssaaaa----ddddcccceeee ----ffffssssttttrrrreeeennnnggggtttthhhh----
           rrrreeeedddduuuucccceeee  ----ffffssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg  ----ffffttttrrrraaaacccceeeerrrr  ----fffftttthhhhrrrreeeeaaaadddd----jjjjuuuummmmppppssss
           ----ffffuuuunnnnrrrroooollllllll----aaaallllllll----llllooooooooppppssss  ----ffffuuuunnnnrrrroooollllllll----llllooooooooppppssss --------ppppaaaarrrraaaammmm _n_a_m_e====_v_a_l_u_e
           ----OOOO  ----OOOO0000  ----OOOO1111  ----OOOO2222  ----OOOO3333  ----OOOOssss

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           ----$$$$  ----AAAA_q_u_e_s_t_i_o_n====_a_n_s_w_e_r ----AAAA----_q_u_e_s_t_i_o_n[====_a_n_s_w_e_r] ----CCCC  ----ddddDDDD
           ----ddddIIII  ----ddddMMMM  ----ddddNNNN ----DDDD_m_a_c_r_o[====_d_e_f_n]  ----EEEE  ----HHHH ----iiiiddddiiiirrrraaaafffftttteeeerrrr _d_i_r
           ----iiiinnnncccclllluuuuddddeeee _f_i_l_e  ----iiiimmmmaaaaccccrrrroooossss _f_i_l_e ----iiiipppprrrreeeeffffiiiixxxx _f_i_l_e
           ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx _d_i_r ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxxbbbbeeeeffffoooorrrreeee _d_i_r  ----iiiissssyyyysssstttteeeemmmm _d_i_r
           ----MMMM  ----MMMMMMMM  ----MMMMFFFF  ----MMMMGGGG  ----MMMMPPPP  ----MMMMQQQQ  ----MMMMTTTT  ----nnnnoooossssttttddddiiiinnnncccc  ----PPPP
           ----rrrreeeemmmmaaaapppp ----ttttrrrriiiiggggrrrraaaapppphhhhssss  ----uuuunnnnddddeeeeffff  ----UUUU_m_a_c_r_o  ----WWWWpppp,,,,_o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
           ----WWWWaaaa,,,,_o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  ----llll_l_i_b_r_a_r_y ----nnnnoooossssttttaaaarrrrttttffffiiiilllleeeessss
           ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss  ----nnnnoooossssttttddddlllliiiibbbb ----ssss  ----ssssttttaaaattttiiiicccc  ----ssssttttaaaattttiiiicccc----lllliiiibbbbggggcccccccc
           ----sssshhhhaaaarrrreeeedddd  ----sssshhhhaaaarrrreeeedddd----lllliiiibbbbggggcccccccc  ----ssssyyyymmmmbbbboooolllliiiicccc ----WWWWllll,,,,_o_p_t_i_o_n
           ----XXXXlllliiiinnnnkkkkeeeerrrr _o_p_t_i_o_n ----uuuu _s_y_m_b_o_l

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           ----BBBB_p_r_e_f_i_x  ----IIII_d_i_r  ----IIII----  ----LLLL_d_i_r  ----ssssppppeeeeccccssss====_f_i_l_e

       _T_a_r_g_e_t _O_p_t_i_o_n_s
           ----VVVV _v_e_r_s_i_o_n  ----bbbb _m_a_c_h_i_n_e

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _M_6_8_0_x_0 _O_p_t_i_o_n_s ----mmmm66668888000000000000  ----mmmm66668888000022220000  ----mmmm66668888000022220000----44440000
           ----mmmm66668888000022220000----66660000  ----mmmm66668888000033330000  ----mmmm66668888000044440000 ----mmmm66668888000066660000  ----mmmmccccppppuuuu33332222  ----mmmm5555222200000000
           ----mmmm66668888888888881111  ----mmmmbbbbiiiittttffffiiiieeeelllldddd  ----mmmmcccc66668888000000000000  ----mmmmcccc66668888000022220000 ----mmmmffffppppaaaa
           ----mmmmnnnnoooobbbbiiiittttffffiiiieeeelllldddd  ----mmmmrrrrttttdddd  ----mmmmsssshhhhoooorrrrtttt  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmppppccccrrrreeeellll
           ----mmmmaaaalllliiiiggggnnnn----iiiinnnntttt  ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn

           _M_6_8_h_c_1_x _O_p_t_i_o_n_s ----mmmm6666888811111111  ----mmmm6666888811112222  ----mmmm66668888hhhhcccc11111111  ----mmmm66668888hhhhcccc11112222
           ----mmmm66668888hhhhccccssss11112222 ----mmmmaaaauuuuttttoooo----iiiinnnnccccddddeeeecccc  ----mmmmiiiinnnnmmmmaaaaxxxx  ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
           ----mmmmsssshhhhoooorrrrtttt ----mmmmssssoooofffftttt----rrrreeeegggg----ccccoooouuuunnnntttt====_c_o_u_n_t

           _V_A_X _O_p_t_i_o_n_s ----mmmmgggg  ----mmmmggggnnnnuuuu  ----mmmmuuuunnnniiiixxxx

           _S_P_A_R_C _O_p_t_i_o_n_s ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e ----mmmmttttuuuunnnneeee====_c_p_u_-_t_y_p_e
           ----mmmmccccmmmmooooddddeeeellll====_c_o_d_e_-_m_o_d_e_l ----mmmm33332222  ----mmmm66664444 ----mmmmaaaapppppppp----rrrreeeeggggssss  ----mmmmbbbbrrrrooookkkkeeeennnn----
           ssssaaaavvvveeeerrrreeeessssttttoooorrrreeee  ----mmmmccccyyyypppprrrreeeessssssss ----mmmmffffaaaasssstttteeeerrrr----ssssttttrrrruuuuccccttttssss  ----mmmmffffllllaaaatttt ----mmmmffffppppuuuu
           ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmhhhhaaaarrrrdddd----qqqquuuuaaaadddd----ffffllllooooaaaatttt ----mmmmiiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt
           ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn  ----mmmmlllliiiivvvveeee----gggg0000  ----mmmmnnnnoooo----aaaapppppppp----rrrreeeeggggssss ----mmmmnnnnoooo----ffffaaaasssstttteeeerrrr----
           ssssttttrrrruuuuccccttttssss  ----mmmmnnnnoooo----ffffllllaaaatttt  ----mmmmnnnnoooo----ffffppppuuuu ----mmmmnnnnoooo----iiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt  ----mmmmnnnnoooo----
           ssssttttaaaacccckkkk----bbbbiiiiaaaassss  ----mmmmnnnnoooo----uuuunnnnaaaalllliiiiggggnnnneeeedddd----ddddoooouuuubbbblllleeeessss ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           ----mmmmssssoooofffftttt----qqqquuuuaaaadddd----ffffllllooooaaaatttt  ----mmmmssssppppaaaarrrrcccclllliiiitttteeee  ----mmmmssssttttaaaacccckkkk----bbbbiiiiaaaassss
           ----mmmmssssuuuuppppeeeerrrrssssppppaaaarrrrcccc  ----mmmmuuuunnnnaaaalllliiiiggggnnnneeeedddd----ddddoooouuuubbbblllleeeessss  ----mmmmvvvv8888



2004-02-14                  gcc-3.3.3                           4





GCC(1)                         GNU                         GCC(1)


           _A_R_M _O_p_t_i_o_n_s ----mmmmaaaappppccccssss----ffffrrrraaaammmmeeee  ----mmmmnnnnoooo----aaaappppccccssss----ffffrrrraaaammmmeeee ----mmmmaaaappppccccssss----22226666
           ----mmmmaaaappppccccssss----33332222 ----mmmmaaaappppccccssss----ssssttttaaaacccckkkk----cccchhhheeeecccckkkk  ----mmmmnnnnoooo----aaaappppccccssss----ssssttttaaaacccckkkk----cccchhhheeeecccckkkk
           ----mmmmaaaappppccccssss----ffffllllooooaaaatttt  ----mmmmnnnnoooo----aaaappppccccssss----ffffllllooooaaaatttt ----mmmmaaaappppccccssss----rrrreeeeeeeennnnttttrrrraaaannnntttt  ----mmmmnnnnoooo----
           aaaappppccccssss----rrrreeeeeeeennnnttttrrrraaaannnntttt ----mmmmsssscccchhhheeeedddd----pppprrrroooolllloooogggg  ----mmmmnnnnoooo----sssscccchhhheeeedddd----pppprrrroooolllloooogggg
           ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn  ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn  ----mmmmwwwwoooorrrrddddssss----lllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           ----mmmmaaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss  ----mmmmnnnnoooo----aaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmffffppppeeee ----mmmmtttthhhhuuuummmmbbbb----iiiinnnntttteeeerrrrwwwwoooorrrrkkkk  ----mmmmnnnnoooo----tttthhhhuuuummmmbbbb----
           iiiinnnntttteeeerrrrwwwwoooorrrrkkkk ----mmmmccccppppuuuu====_n_a_m_e  ----mmmmaaaarrrrcccchhhh====_n_a_m_e  ----mmmmffffppppeeee====_n_a_m_e
           ----mmmmssssttttrrrruuuuccccttttuuuurrrreeee----ssssiiiizzzzeeee----bbbboooouuuunnnnddddaaaarrrryyyy====_n ----mmmmaaaabbbboooorrrrtttt----oooonnnn----nnnnoooorrrreeeettttuuuurrrrnnnn
           ----mmmmlllloooonnnngggg----ccccaaaallllllllssss  ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss ----mmmmssssiiiinnnngggglllleeee----ppppiiiicccc----bbbbaaaasssseeee  ----mmmmnnnnoooo----
           ssssiiiinnnngggglllleeee----ppppiiiicccc----bbbbaaaasssseeee ----mmmmppppiiiicccc----rrrreeeeggggiiiisssstttteeeerrrr====_r_e_g ----mmmmnnnnoooopppp----ffffuuuunnnn----ddddlllllllliiiimmmmppppoooorrrrtttt
           ----mmmmppppooookkkkeeee----ffffuuuunnnnccccttttiiiioooonnnn----nnnnaaaammmmeeee ----mmmmtttthhhhuuuummmmbbbb  ----mmmmaaaarrrrmmmm ----mmmmttttppppccccssss----ffffrrrraaaammmmeeee
           ----mmmmttttppppccccssss----lllleeeeaaaaffff----ffffrrrraaaammmmeeee ----mmmmccccaaaalllllllleeeerrrr----ssssuuuuppppeeeerrrr----iiiinnnntttteeeerrrrwwwwoooorrrrkkkkiiiinnnngggg
           ----mmmmccccaaaalllllllleeeeeeee----ssssuuuuppppeeeerrrr----iiiinnnntttteeeerrrrwwwwoooorrrrkkkkiiiinnnngggg

           _M_N_1_0_2_0_0 _O_p_t_i_o_n_s ----mmmmrrrreeeellllaaaaxxxx

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s ----mmmmmmmmuuuulllltttt----bbbbuuuugggg  ----mmmmnnnnoooo----mmmmuuuulllltttt----bbbbuuuugggg ----mmmmaaaammmm33333333
           ----mmmmnnnnoooo----aaaammmm33333333 ----mmmmnnnnoooo----ccccrrrrtttt0000  ----mmmmrrrreeeellllaaaaxxxx

           _M_3_2_R_/_D _O_p_t_i_o_n_s ----mmmm33332222rrrrxxxx  ----mmmm33332222rrrr  ----mmmmccccooooddddeeee----mmmmooooddddeeeellll====_m_o_d_e_l_-_t_y_p_e
           ----mmmmssssddddaaaattttaaaa====_s_d_a_t_a_-_t_y_p_e  ----GGGG _n_u_m

           _M_8_8_K _O_p_t_i_o_n_s ----mmmm88888888000000000000  ----mmmm88888888111100000000  ----mmmm88888888111111110000  ----mmmmbbbbiiiigggg----ppppiiiicccc
           ----mmmmcccchhhheeeecccckkkk----zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn  ----mmmmhhhhaaaannnnddddlllleeee----llllaaaarrrrggggeeee----sssshhhhiiiifffftttt
           ----mmmmiiiiddddeeeennnnttttiiiiffffyyyy----rrrreeeevvvviiiissssiiiioooonnnn  ----mmmmnnnnoooo----cccchhhheeeecccckkkk----zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn ----mmmmnnnnoooo----
           ooooccccssss----ddddeeeebbbbuuuugggg----iiiinnnnffffoooo  ----mmmmnnnnoooo----ooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn ----mmmmnnnnoooo----ooooppppttttiiiimmmmiiiizzzzeeee----
           aaaarrrrgggg----aaaarrrreeeeaaaa  ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee ----mmmmnnnnoooo----uuuunnnnddddeeeerrrrssssccccoooorrrreeeessss
           ----mmmmooooccccssss----ddddeeeebbbbuuuugggg----iiiinnnnffffoooo ----mmmmooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn  ----mmmmooooppppttttiiiimmmmiiiizzzzeeee----aaaarrrrgggg----
           aaaarrrreeeeaaaa ----mmmmsssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee  ----mmmmsssshhhhoooorrrrtttt----ddddaaaattttaaaa----_n_u_m  ----mmmmssssvvvvrrrr3333
           ----mmmmssssvvvvrrrr4444  ----mmmmttttrrrraaaapppp----llllaaaarrrrggggeeee----sssshhhhiiiifffftttt  ----mmmmuuuusssseeee----ddddiiiivvvv----iiiinnnnssssttttrrrruuuuccccttttiiiioooonnnn
           ----mmmmvvvveeeerrrrssssiiiioooonnnn----00003333....00000000  ----mmmmwwwwaaaarrrrnnnn----ppppaaaasssssssseeeedddd----ssssttttrrrruuuuccccttttssss

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e ----mmmmttttuuuunnnneeee====_c_p_u_-
           _t_y_p_e ----mmmmppppoooowwwweeeerrrr  ----mmmmnnnnoooo----ppppoooowwwweeeerrrr  ----mmmmppppoooowwwweeeerrrr2222  ----mmmmnnnnoooo----ppppoooowwwweeeerrrr2222
           ----mmmmppppoooowwwweeeerrrrppppcccc  ----mmmmppppoooowwwweeeerrrrppppcccc66664444  ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc ----mmmmaaaallllttttiiiivvvveeeecccc  ----mmmmnnnnoooo----
           aaaallllttttiiiivvvveeeecccc ----mmmmppppoooowwwweeeerrrrppppcccc----ggggppppoooopppptttt  ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc----ggggppppoooopppptttt ----mmmmppppoooowwwweeeerrrrppppcccc----
           ggggffffxxxxoooopppptttt  ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc----ggggffffxxxxoooopppptttt ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss  ----mmmmoooolllldddd----
           mmmmnnnneeeemmmmoooonnnniiiiccccssss ----mmmmffffuuuullllllll----ttttoooocccc   ----mmmmmmmmiiiinnnniiiimmmmaaaallll----ttttoooocccc  ----mmmmnnnnoooo----ffffpppp----iiiinnnn----ttttoooocccc
           ----mmmmnnnnoooo----ssssuuuummmm----iiiinnnn----ttttoooocccc ----mmmm66664444  ----mmmm33332222  ----mmmmxxxxllll----ccccaaaallllllll  ----mmmmnnnnoooo----xxxxllll----ccccaaaallllllll
           ----mmmmppppeeee ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmmmmmuuuullllttttiiiipppplllleeee  ----mmmmnnnnoooo----
           mmmmuuuullllttttiiiipppplllleeee ----mmmmssssttttrrrriiiinnnngggg  ----mmmmnnnnoooo----ssssttttrrrriiiinnnngggg  ----mmmmuuuuppppddddaaaatttteeee  ----mmmmnnnnoooo----uuuuppppddddaaaatttteeee
           ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd  ----mmmmnnnnoooo----ffffuuuusssseeeedddd----mmmmaaaadddddddd  ----mmmmbbbbiiiitttt----aaaalllliiiiggggnnnn  ----mmmmnnnnoooo----bbbbiiiitttt----
           aaaalllliiiiggggnnnn ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn  ----mmmmnnnnoooo----ssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn  ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee
           ----mmmmnnnnoooo----rrrreeeellllooooccccaaaattttaaaabbbblllleeee  ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb  ----mmmmnnnnoooo----rrrreeeellllooooccccaaaattttaaaabbbblllleeee----
           lllliiiibbbb ----mmmmttttoooocccc  ----mmmmnnnnoooo----ttttoooocccc  ----mmmmlllliiiittttttttlllleeee  ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn  ----mmmmbbbbiiiigggg
           ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn ----mmmmccccaaaallllllll----aaaaiiiixxxx  ----mmmmccccaaaallllllll----ssssyyyyssssvvvv  ----mmmmccccaaaallllllll----nnnneeeettttbbbbssssdddd
           ----mmmmaaaaiiiixxxx----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn  ----mmmmssssvvvvrrrr4444----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           ----mmmmaaaabbbbiiii====aaaallllttttiiiivvvveeeecccc  ----mmmmaaaabbbbiiii====nnnnoooo----aaaallllttttiiiivvvveeeecccc ----mmmmaaaabbbbiiii====ssssppppeeee  ----mmmmaaaabbbbiiii====nnnnoooo----
           ssssppppeeee ----mmmmiiiisssseeeellll====yyyyeeeessss  ----mmmmiiiisssseeeellll====nnnnoooo ----mmmmpppprrrroooottttoooottttyyyyppppeeee  ----mmmmnnnnoooo----pppprrrroooottttoooottttyyyyppppeeee
           ----mmmmssssiiiimmmm  ----mmmmmmmmvvvvmmmmeeee  ----mmmmaaaaddddssss  ----mmmmyyyyeeeelllllllloooowwwwkkkknnnniiiiffffeeee  ----mmmmeeeemmmmbbbb  ----mmmmssssddddaaaattttaaaa
           ----mmmmssssddddaaaattttaaaa====_o_p_t  ----mmmmvvvvxxxxwwwwoooorrrrkkkkssss  ----mmmmwwwwiiiinnnnddddiiiissssssss  ----GGGG _n_u_m  ----pppptttthhhhrrrreeeeaaaadddd

           _D_a_r_w_i_n _O_p_t_i_o_n_s



2004-02-14                  gcc-3.3.3                           5





GCC(1)                         GNU                         GCC(1)


           ----aaaallllllll____llllooooaaaadddd ----aaaalllllllloooowwwwaaaabbbblllleeee____cccclllliiiieeeennnntttt ----aaaarrrrcccchhhh ----aaaarrrrcccchhhh____eeeerrrrrrrroooorrrrssss____ffffaaaattttaaaallll
           ----aaaarrrrcccchhhh____oooonnnnllllyyyy ----bbbbiiiinnnndddd____aaaatttt____llllooooaaaadddd ----bbbbuuuunnnnddddlllleeee ----bbbbuuuunnnnddddlllleeee____llllooooaaaaddddeeeerrrr
           ----cccclllliiiieeeennnntttt____nnnnaaaammmmeeee ----ccccoooommmmppppaaaattttiiiibbbbiiiilllliiiittttyyyy____vvvveeeerrrrssssiiiioooonnnn ----ccccuuuurrrrrrrreeeennnntttt____vvvveeeerrrrssssiiiioooonnnn
           ----ddddeeeeppppeeeennnnddddeeeennnnccccyyyy----ffffiiiilllleeee ----ddddyyyylllliiiibbbb____ffffiiiilllleeee ----ddddyyyylllliiiinnnnkkkkeeeerrrr____iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeee
           ----ddddyyyynnnnaaaammmmiiiicccc ----ddddyyyynnnnaaaammmmiiiicccclllliiiibbbb ----eeeexxxxppppoooorrrrtttteeeedddd____ssssyyyymmmmbbbboooollllssss____lllliiiisssstttt ----ffffiiiilllleeeelllliiiisssstttt
           ----ffffllllaaaatttt____nnnnaaaammmmeeeessssppppaaaacccceeee ----ffffoooorrrrcccceeee____ccccppppuuuussssuuuubbbbttttyyyyppppeeee____AAAALLLLLLLL
           ----ffffoooorrrrcccceeee____ffffllllaaaatttt____nnnnaaaammmmeeeessssppppaaaacccceeee ----hhhheeeeaaaaddddeeeerrrrppppaaaadddd____mmmmaaaaxxxx____iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeeessss
           ----iiiimmmmaaaaggggeeee____bbbbaaaasssseeee ----iiiinnnniiiitttt ----iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeee ----kkkkeeeeeeeepppp____pppprrrriiiivvvvaaaatttteeee____eeeexxxxtttteeeerrrrnnnnssss
           ----mmmmuuuullllttttiiii____mmmmoooodddduuuulllleeee ----mmmmuuuullllttttiiiippppllllyyyy____ddddeeeeffffiiiinnnneeeedddd
           ----mmmmuuuullllttttiiiippppllllyyyy____ddddeeeeffffiiiinnnneeeedddd____uuuunnnnuuuusssseeeedddd ----nnnnooooaaaallllllll____llllooooaaaadddd ----nnnnoooommmmuuuullllttttiiiiddddeeeeffffssss
           ----nnnnoooopppprrrreeeebbbbiiiinnnndddd ----nnnnoooosssseeeegggglllliiiinnnnkkkkeeeeddddiiiitttt ----ppppaaaaggggeeeezzzzeeeerrrroooo____ssssiiiizzzzeeee ----pppprrrreeeebbbbiiiinnnndddd
           ----pppprrrreeeebbbbiiiinnnndddd____aaaallllllll____ttttwwwwoooolllleeeevvvveeeellll____mmmmoooodddduuuulllleeeessss ----pppprrrriiiivvvvaaaatttteeee____bbbbuuuunnnnddddlllleeee
           ----rrrreeeeaaaadddd____oooonnnnllllyyyy____rrrreeeellllooooccccssss ----sssseeeeccccttttaaaalllliiiiggggnnnn ----sssseeeeccccttttoooobbbbjjjjeeeeccccttttssssyyyymmmmbbbboooollllssss
           ----wwwwhhhhyyyyllllooooaaaadddd ----sssseeeegggg1111aaaaddddddddrrrr ----sssseeeeccccttttccccrrrreeeeaaaatttteeee ----sssseeeeccccttttoooobbbbjjjjeeeeccccttttssssyyyymmmmbbbboooollllssss
           ----sssseeeeccccttttoooorrrrddddeeeerrrr ----sssseeeegggg____aaaaddddddddrrrr____ttttaaaabbbblllleeee ----sssseeeegggg____aaaaddddddddrrrr____ttttaaaabbbblllleeee____ffffiiiilllleeeennnnaaaammmmeeee
           ----sssseeeegggglllliiiinnnnkkkkeeeeddddiiiitttt ----sssseeeeggggpppprrrrooootttt ----sssseeeeggggssss____rrrreeeeaaaadddd____oooonnnnllllyyyy____aaaaddddddddrrrr
           ----sssseeeeggggssss____rrrreeeeaaaadddd____wwwwrrrriiiitttteeee____aaaaddddddddrrrr ----ssssiiiinnnngggglllleeee____mmmmoooodddduuuulllleeee ----ssssttttaaaattttiiiicccc
           ----ssssuuuubbbb____lllliiiibbbbrrrraaaarrrryyyy ----ssssuuuubbbb____uuuummmmbbbbrrrreeeellllllllaaaa ----ttttwwwwoooolllleeeevvvveeeellll____nnnnaaaammmmeeeessssppppaaaacccceeee
           ----uuuummmmbbbbrrrreeeellllllllaaaa ----uuuunnnnddddeeeeffffiiiinnnneeeedddd ----uuuunnnneeeexxxxppppoooorrrrtttteeeedddd____ssssyyyymmmmbbbboooollllssss____lllliiiisssstttt
           ----wwwweeeeaaaakkkk____rrrreeeeffffeeeerrrreeeennnncccceeee____mmmmiiiissssmmmmaaaattttcccchhhheeeessss ----wwwwhhhhaaaattttssssllllooooaaaaddddeeeedddd

           _R_T _O_p_t_i_o_n_s ----mmmmccccaaaallllllll----lllliiiibbbb----mmmmuuuullll  ----mmmmffffpppp----aaaarrrrgggg----iiiinnnn----ffffpppprrrreeeeggggssss  ----mmmmffffpppp----
           aaaarrrrgggg----iiiinnnn----ggggrrrreeeeggggssss ----mmmmffffuuuullllllll----ffffpppp----bbbblllloooocccckkkkssss  ----mmmmhhhhcccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           ----mmmmiiiinnnn----lllliiiinnnneeee----mmmmuuuullll ----mmmmmmmmiiiinnnniiiimmmmuuuummmm----ffffpppp----bbbblllloooocccckkkkssss  ----mmmmnnnnoooohhhhcccc----ssssttttrrrruuuucccctttt----
           rrrreeeettttuuuurrrrnnnn

           _M_I_P_S _O_p_t_i_o_n_s ----mmmmaaaabbbbiiiiccccaaaallllllllssss  ----mmmmaaaarrrrcccchhhh====_c_p_u_-_t_y_p_e
           ----mmmmttttuuuunnnneeee====_c_p_u_=_t_y_p_e ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e  ----mmmmeeeemmmmbbbbeeeeddddddddeeeedddd----ddddaaaattttaaaa
           ----mmmmuuuunnnniiiinnnniiiitttt----ccccoooonnnnsssstttt----iiiinnnn----rrrrooooddddaaaattttaaaa ----mmmmeeeemmmmbbbbeeeeddddddddeeeedddd----ppppiiiicccc  ----mmmmffffpppp33332222
           ----mmmmffffpppp66664444  ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd  ----mmmmnnnnoooo----ffffuuuusssseeeedddd----mmmmaaaadddddddd ----mmmmggggaaaassss  ----mmmmggggpppp33332222
           ----mmmmggggpppp66664444 ----mmmmggggppppoooopppptttt  ----mmmmhhhhaaaallllffff----ppppiiiicccc  ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmiiiinnnntttt66664444
           ----mmmmiiiippppssss1111 ----mmmmiiiippppssss2222  ----mmmmiiiippppssss3333  ----mmmmiiiippppssss4444  ----mmmmlllloooonnnngggg66664444  ----mmmmlllloooonnnngggg33332222
           ----mmmmlllloooonnnngggg----ccccaaaallllllllssss  ----mmmmmmmmeeeemmmmccccppppyyyy ----mmmmmmmmiiiippppssss----aaaassss  ----mmmmmmmmiiiippppssss----ttttffffiiiilllleeee  ----mmmmnnnnoooo----
           aaaabbbbiiiiccccaaaallllllllssss ----mmmmnnnnoooo----eeeemmmmbbbbeeeeddddddddeeeedddd----ddddaaaattttaaaa  ----mmmmnnnnoooo----uuuunnnniiiinnnniiiitttt----ccccoooonnnnsssstttt----iiiinnnn----
           rrrrooooddddaaaattttaaaa ----mmmmnnnnoooo----eeeemmmmbbbbeeeeddddddddeeeedddd----ppppiiiicccc  ----mmmmnnnnoooo----ggggppppoooopppptttt  ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss
           ----mmmmnnnnoooo----mmmmeeeemmmmccccppppyyyy  ----mmmmnnnnoooo----mmmmiiiippppssss----ttttffffiiiilllleeee  ----mmmmnnnnoooo----rrrrnnnnaaaammmmeeeessss  ----mmmmnnnnoooo----ssssttttaaaattttssss
           ----mmmmrrrrnnnnaaaammmmeeeessss  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt ----mmmm4444666655550000  ----mmmmssssiiiinnnngggglllleeee----ffffllllooooaaaatttt  ----mmmmmmmmaaaadddd
           ----mmmmssssttttaaaattttssss  ----EEEELLLL  ----EEEEBBBB  ----GGGG _n_u_m  ----nnnnooooccccpppppppp ----mmmmaaaabbbbiiii====33332222  ----mmmmaaaabbbbiiii====nnnn33332222
           ----mmmmaaaabbbbiiii====66664444  ----mmmmaaaabbbbiiii====eeeeaaaabbbbiiii ----mmmmffffiiiixxxx7777000000000000  ----mmmmnnnnoooo----ccccrrrrtttt0000  ----mmmmfffflllluuuusssshhhh----
           ffffuuuunnnncccc====_f_u_n_c  ----mmmmnnnnoooo----fffflllluuuusssshhhh----ffffuuuunnnncccc ----mmmmbbbbrrrraaaannnncccchhhh----lllliiiikkkkeeeellllyyyy  ----mmmmnnnnoooo----
           bbbbrrrraaaannnncccchhhh----lllliiiikkkkeeeellllyyyy

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e  ----mmmmaaaarrrrcccchhhh====_c_p_u_-
           _t_y_p_e ----mmmmffffppppmmmmaaaatttthhhh====_u_n_i_t  ----mmmmaaaassssmmmm====_d_i_a_l_e_c_t  ----mmmmnnnnoooo----ffffaaaannnnccccyyyy----mmmmaaaatttthhhh----333388887777
           ----mmmmnnnnoooo----ffffpppp----rrrreeeetttt----iiiinnnn----333388887777  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmssssvvvvrrrr3333----sssshhhhlllliiiibbbb ----mmmmnnnnoooo----
           wwwwiiiiddddeeee----mmmmuuuullllttttiiiippppllllyyyy  ----mmmmrrrrttttdddd  ----mmmmaaaalllliiiiggggnnnn----ddddoooouuuubbbblllleeee ----mmmmpppprrrreeeeffffeeeerrrrrrrreeeedddd----
           ssssttttaaaacccckkkk----bbbboooouuuunnnnddddaaaarrrryyyy====_n_u_m ----mmmmmmmmmmmmxxxx  ----mmmmsssssssseeee  ----mmmmsssssssseeee2222 ----mmmmsssssssseeee3333 ----mmmm3333ddddnnnnoooowwww
           ----mmmmtttthhhhrrrreeeeaaaaddddssss  ----mmmmnnnnoooo----aaaalllliiiiggggnnnn----ssssttttrrrriiiinnnnggggooooppppssss  ----mmmmiiiinnnnlllliiiinnnneeee----aaaallllllll----
           ssssttttrrrriiiinnnnggggooooppppssss ----mmmmppppuuuusssshhhh----aaaarrrrggggssss  ----mmmmaaaaccccccccuuuummmmuuuullllaaaatttteeee----oooouuuuttttggggooooiiiinnnngggg----aaaarrrrggggssss
           ----mmmm111122228888bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee ----mmmm99996666bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee
           ----mmmmrrrreeeeggggppppaaaarrrrmmmm====_n_u_m  ----mmmmoooommmmiiiitttt----lllleeeeaaaaffff----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr ----mmmmnnnnoooo----rrrreeeedddd----zzzzoooonnnneeee
           ----mmmmccccmmmmooooddddeeeellll====_c_o_d_e_-_m_o_d_e_l ----mmmm33332222  ----mmmm66664444

           _H_P_P_A _O_p_t_i_o_n_s ----mmmmaaaarrrrcccchhhh====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e ----mmmmbbbbiiiigggg----sssswwwwiiiittttcccchhhh



2004-02-14                  gcc-3.3.3                           6





GCC(1)                         GNU                         GCC(1)


           ----mmmmddddiiiissssaaaabbbblllleeee----ffffpppprrrreeeeggggssss  ----mmmmddddiiiissssaaaabbbblllleeee----iiiinnnnddddeeeexxxxiiiinnnngggg ----mmmmffffaaaasssstttt----iiiinnnnddddiiiirrrreeeecccctttt----
           ccccaaaallllllllssss  ----mmmmggggaaaassss  ----mmmmggggnnnnuuuu----lllldddd  ----mmmmhhhhpppp----lllldddd ----mmmmjjjjuuuummmmpppp----iiiinnnn----ddddeeeellllaaaayyyy
           ----mmmmlllliiiinnnnkkkkeeeerrrr----oooopppptttt  ----mmmmlllloooonnnngggg----ccccaaaallllllllssss ----mmmmlllloooonnnngggg----llllooooaaaadddd----ssssttttoooorrrreeee  ----mmmmnnnnoooo----
           bbbbiiiigggg----sssswwwwiiiittttcccchhhh  ----mmmmnnnnoooo----ddddiiiissssaaaabbbblllleeee----ffffpppprrrreeeeggggssss ----mmmmnnnnoooo----ddddiiiissssaaaabbbblllleeee----iiiinnnnddddeeeexxxxiiiinnnngggg
           ----mmmmnnnnoooo----ffffaaaasssstttt----iiiinnnnddddiiiirrrreeeecccctttt----ccccaaaallllllllssss  ----mmmmnnnnoooo----ggggaaaassss ----mmmmnnnnoooo----jjjjuuuummmmpppp----iiiinnnn----ddddeeeellllaaaayyyy
           ----mmmmnnnnoooo----lllloooonnnngggg----llllooooaaaadddd----ssssttttoooorrrreeee ----mmmmnnnnoooo----ppppoooorrrrttttaaaabbbblllleeee----rrrruuuunnnnttttiiiimmmmeeee  ----mmmmnnnnoooo----ssssoooofffftttt----
           ffffllllooooaaaatttt ----mmmmnnnnoooo----ssssppppaaaacccceeee----rrrreeeeggggssss  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmppppaaaa----rrrriiiisssscccc----1111----0000
           ----mmmmppppaaaa----rrrriiiisssscccc----1111----1111  ----mmmmppppaaaa----rrrriiiisssscccc----2222----0000  ----mmmmppppoooorrrrttttaaaabbbblllleeee----rrrruuuunnnnttttiiiimmmmeeee
           ----mmmmsssscccchhhheeeedddduuuulllleeee====_c_p_u_-_t_y_p_e  ----mmmmssssppppaaaacccceeee----rrrreeeeggggssss  ----mmmmssssiiiioooo  ----mmmmwwwwssssiiiioooo
           ----nnnnoooolllliiiibbbbddddlllldddd  ----ssssttttaaaattttiiiicccc  ----tttthhhhrrrreeeeaaaaddddssss

           _I_n_t_e_l _9_6_0 _O_p_t_i_o_n_s ----mmmm_c_p_u_-_t_y_p_e  ----mmmmaaaassssmmmm----ccccoooommmmppppaaaatttt  ----mmmmcccclllleeeeaaaannnn----
           lllliiiinnnnkkkkaaaaggggeeee ----mmmmccccooooddddeeee----aaaalllliiiiggggnnnn  ----mmmmccccoooommmmpppplllleeeexxxx----aaaaddddddddrrrr  ----mmmmlllleeeeaaaaffff----
           pppprrrroooocccceeeedddduuuurrrreeeessss ----mmmmiiiicccc----ccccoooommmmppppaaaatttt  ----mmmmiiiicccc2222....0000----ccccoooommmmppppaaaatttt  ----mmmmiiiicccc3333....0000----ccccoooommmmppppaaaatttt
           ----mmmmiiiinnnntttteeeellll----aaaassssmmmm  ----mmmmnnnnoooo----cccclllleeeeaaaannnn----lllliiiinnnnkkkkaaaaggggeeee  ----mmmmnnnnoooo----ccccooooddddeeee----aaaalllliiiiggggnnnn ----mmmmnnnnoooo----
           ccccoooommmmpppplllleeeexxxx----aaaaddddddddrrrr  ----mmmmnnnnoooo----lllleeeeaaaaffff----pppprrrroooocccceeeedddduuuurrrreeeessss ----mmmmnnnnoooo----oooolllldddd----aaaalllliiiiggggnnnn
           ----mmmmnnnnoooo----ssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn  ----mmmmnnnnoooo----ttttaaaaiiiillll----ccccaaaallllllll ----mmmmnnnnuuuummmmeeeerrrriiiiccccssss  ----mmmmoooolllldddd----
           aaaalllliiiiggggnnnn  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn ----mmmmttttaaaaiiiillll----ccccaaaallllllll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s ----mmmmnnnnoooo----ffffpppp----rrrreeeeggggssss  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmaaaallllpppphhhhaaaa----
           aaaassss  ----mmmmggggaaaassss ----mmmmiiiieeeeeeeeeeee  ----mmmmiiiieeeeeeeeeeee----wwwwiiiitttthhhh----iiiinnnneeeexxxxaaaacccctttt  ----mmmmiiiieeeeeeeeeeee----
           ccccoooonnnnffffoooorrrrmmmmaaaannnntttt ----mmmmffffpppp----ttttrrrraaaapppp----mmmmooooddddeeee====_m_o_d_e  ----mmmmffffpppp----rrrroooouuuunnnnddddiiiinnnngggg----
           mmmmooooddddeeee====_m_o_d_e ----mmmmttttrrrraaaapppp----pppprrrreeeecccciiiissssiiiioooonnnn====_m_o_d_e  ----mmmmbbbbuuuuiiiilllldddd----ccccoooonnnnssssttttaaaannnnttttssss
           ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e  ----mmmmttttuuuunnnneeee====_c_p_u_-_t_y_p_e ----mmmmbbbbwwwwxxxx  ----mmmmmmmmaaaaxxxx  ----mmmmffffiiiixxxx
           ----mmmmcccciiiixxxx ----mmmmffffllllooooaaaatttt----vvvvaaaaxxxx  ----mmmmffffllllooooaaaatttt----iiiieeeeeeeeeeee ----mmmmeeeexxxxpppplllliiiicccciiiitttt----rrrreeeellllooooccccssss
           ----mmmmssssmmmmaaaallllllll----ddddaaaattttaaaa  ----mmmmllllaaaarrrrggggeeee----ddddaaaattttaaaa ----mmmmmmmmeeeemmmmoooorrrryyyy----llllaaaatttteeeennnnccccyyyy====_t_i_m_e

           _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s ----mmmmvvvvmmmmssss----rrrreeeettttuuuurrrrnnnn----ccccooooddddeeeessss

           _H_8_/_3_0_0 _O_p_t_i_o_n_s ----mmmmrrrreeeellllaaaaxxxx  ----mmmmhhhh  ----mmmmssss  ----mmmmnnnn  ----mmmmiiiinnnntttt33332222
           ----mmmmaaaalllliiiiggggnnnn----333300000000

           _S_H _O_p_t_i_o_n_s ----mmmm1111  ----mmmm2222  ----mmmm3333  ----mmmm3333eeee ----mmmm4444----nnnnooooffffppppuuuu  ----mmmm4444----ssssiiiinnnngggglllleeee----
           oooonnnnllllyyyy  ----mmmm4444----ssssiiiinnnngggglllleeee  ----mmmm4444 ----mmmm5555----66664444mmmmeeeeddddiiiiaaaa  ----mmmm5555----66664444mmmmeeeeddddiiiiaaaa----nnnnooooffffppppuuuu
           ----mmmm5555----33332222mmmmeeeeddddiiiiaaaa  ----mmmm5555----33332222mmmmeeeeddddiiiiaaaa----nnnnooooffffppppuuuu ----mmmm5555----ccccoooommmmppppaaaacccctttt
           ----mmmm5555----ccccoooommmmppppaaaacccctttt----nnnnooooffffppppuuuu ----mmmmbbbb  ----mmmmllll  ----mmmmddddaaaalllliiiiggggnnnn  ----mmmmrrrreeeellllaaaaxxxx
           ----mmmmbbbbiiiiggggttttaaaabbbblllleeee  ----mmmmffffmmmmoooovvvvdddd  ----mmmmhhhhiiiittttaaaacccchhhhiiii  ----mmmmnnnnoooommmmaaaaccccssssaaaavvvveeee ----mmmmiiiieeeeeeeeeeee
           ----mmmmiiiissssiiiizzzzeeee  ----mmmmppppaaaaddddssssttttrrrruuuucccctttt  ----mmmmssssppppaaaacccceeee ----mmmmpppprrrreeeeffffeeeerrrrggggooootttt  ----mmmmuuuusssseeeerrrrmmmmooooddddeeee

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s ----QQQQyyyy  ----QQQQnnnn  ----YYYYPPPP,,,,_p_a_t_h_s  ----YYYYmmmm,,,,_d_i_r

           _A_R_C _O_p_t_i_o_n_s ----EEEEBBBB  ----EEEELLLL ----mmmmmmmmaaaannnngggglllleeee----ccccppppuuuu  ----mmmmccccppppuuuu====_c_p_u
           ----mmmmtttteeeexxxxtttt====_t_e_x_t_-_s_e_c_t_i_o_n ----mmmmddddaaaattttaaaa====_d_a_t_a_-_s_e_c_t_i_o_n
           ----mmmmrrrrooooddddaaaattttaaaa====_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n

           _T_M_S_3_2_0_C_3_x_/_C_4_x _O_p_t_i_o_n_s ----mmmmccccppppuuuu====_c_p_u  ----mmmmbbbbiiiigggg  ----mmmmssssmmmmaaaallllllll
           ----mmmmrrrreeeeggggppppaaaarrrrmmmm  ----mmmmmmmmeeeemmmmppppaaaarrrrmmmm ----mmmmffffaaaasssstttt----ffffiiiixxxx  ----mmmmmmmmppppyyyyiiii  ----mmmmbbbbkkkk  ----mmmmttttiiii
           ----mmmmddddpppp----iiiissssrrrr----rrrreeeellllooooaaaadddd ----mmmmrrrrppppttttssss====_c_o_u_n_t  ----mmmmrrrrppppttttbbbb  ----mmmmddddbbbb  ----mmmmlllloooooooopppp----
           uuuunnnnssssiiiiggggnnnneeeedddd ----mmmmppppaaaarrrraaaalllllllleeeellll----iiiinnnnssssnnnnssss  ----mmmmppppaaaarrrraaaalllllllleeeellll----mmmmppppyyyy  ----mmmmpppprrrreeeesssseeeerrrrvvvveeee----
           ffffllllooooaaaatttt

           _V_8_5_0 _O_p_t_i_o_n_s ----mmmmlllloooonnnngggg----ccccaaaallllllllssss  ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss  ----mmmmeeeepppp
           ----mmmmnnnnoooo----eeeepppp ----mmmmpppprrrroooolllloooogggg----ffffuuuunnnnccccttttiiiioooonnnn  ----mmmmnnnnoooo----pppprrrroooolllloooogggg----ffffuuuunnnnccccttttiiiioooonnnn
           ----mmmmssssppppaaaacccceeee ----mmmmttttddddaaaa====_n  ----mmmmssssddddaaaa====_n  ----mmmmzzzzddddaaaa====_n ----mmmmaaaapppppppp----rrrreeeeggggssss  ----mmmmnnnnoooo----



2004-02-14                  gcc-3.3.3                           7





GCC(1)                         GNU                         GCC(1)


           aaaapppppppp----rrrreeeeggggssss ----mmmmddddiiiissssaaaabbbblllleeee----ccccaaaalllllllltttt  ----mmmmnnnnoooo----ddddiiiissssaaaabbbblllleeee----ccccaaaalllllllltttt ----mmmmvvvv888855550000eeee
           ----mmmmvvvv888855550000  ----mmmmbbbbiiiigggg----sssswwwwiiiittttcccchhhh

           _N_S_3_2_K _O_p_t_i_o_n_s ----mmmm33332222000033332222  ----mmmm33332222333333332222  ----mmmm33332222555533332222  ----mmmm33332222000088881111
           ----mmmm33332222333388881111 ----mmmmmmmmuuuulllltttt----aaaadddddddd  ----mmmmnnnnoooommmmuuuulllltttt----aaaadddddddd  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmrrrrttttdddd
           ----mmmmnnnnoooorrrrttttdddd ----mmmmrrrreeeeggggppppaaaarrrraaaammmm  ----mmmmnnnnoooorrrreeeeggggppppaaaarrrraaaammmm  ----mmmmssssbbbb  ----mmmmnnnnoooossssbbbb
           ----mmmmbbbbiiiittttffffiiiieeeelllldddd  ----mmmmnnnnoooobbbbiiiittttffffiiiieeeelllldddd  ----mmmmhhhhiiiimmmmeeeemmmm  ----mmmmnnnnoooohhhhiiiimmmmeeeemmmm

           _A_V_R _O_p_t_i_o_n_s ----mmmmmmmmccccuuuu====_m_c_u  ----mmmmssssiiiizzzzeeee  ----mmmmiiiinnnniiiitttt----ssssttttaaaacccckkkk====_n  ----mmmmnnnnoooo----
           iiiinnnntttteeeerrrrrrrruuuuppppttttssss ----mmmmccccaaaallllllll----pppprrrroooolllloooogggguuuueeeessss  ----mmmmnnnnoooo----ttttaaaabbbblllleeeejjjjuuuummmmpppp  ----mmmmttttiiiinnnnyyyy----
           ssssttttaaaacccckkkk

           _M_C_o_r_e _O_p_t_i_o_n_s ----mmmmhhhhaaaarrrrddddlllliiiitttt  ----mmmmnnnnoooo----hhhhaaaarrrrddddlllliiiitttt  ----mmmmddddiiiivvvv  ----mmmmnnnnoooo----ddddiiiivvvv
           ----mmmmrrrreeeellllaaaaxxxx----iiiimmmmmmmmeeeeddddiiiiaaaatttteeeessss ----mmmmnnnnoooo----rrrreeeellllaaaaxxxx----iiiimmmmmmmmeeeeddddiiiiaaaatttteeeessss  ----mmmmwwwwiiiiddddeeee----
           bbbbiiiittttffffiiiieeeellllddddssss  ----mmmmnnnnoooo----wwwwiiiiddddeeee----bbbbiiiittttffffiiiieeeellllddddssss ----mmmm4444bbbbyyyytttteeee----ffffuuuunnnnccccttttiiiioooonnnnssss
           ----mmmmnnnnoooo----4444bbbbyyyytttteeee----ffffuuuunnnnccccttttiiiioooonnnnssss  ----mmmmccccaaaallllllllggggrrrraaaapppphhhh----ddddaaaattttaaaa ----mmmmnnnnoooo----ccccaaaallllllllggggrrrraaaapppphhhh----
           ddddaaaattttaaaa  ----mmmmsssslllloooowwww----bbbbyyyytttteeeessss  ----mmmmnnnnoooo----sssslllloooowwww----bbbbyyyytttteeeessss  ----mmmmnnnnoooo----llllssssiiiimmmm
           ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn  ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn  ----mmmm222211110000  ----mmmm333344440000  ----mmmmssssttttaaaacccckkkk----
           iiiinnnnccccrrrreeeemmmmeeeennnntttt

           _M_M_I_X _O_p_t_i_o_n_s ----mmmmlllliiiibbbbffffuuuunnnnccccssss  ----mmmmnnnnoooo----lllliiiibbbbffffuuuunnnnccccssss  ----mmmmeeeeppppssssiiiilllloooonnnn
           ----mmmmnnnnoooo----eeeeppppssssiiiilllloooonnnn  ----mmmmaaaabbbbiiii====ggggnnnnuuuu ----mmmmaaaabbbbiiii====mmmmmmmmiiiixxxxwwwwaaaarrrreeee  ----mmmmzzzzeeeerrrroooo----eeeexxxxtttteeeennnndddd
           ----mmmmkkkknnnnuuuutttthhhhddddiiiivvvv  ----mmmmttttoooopppplllleeeevvvveeeellll----ssssyyyymmmmbbbboooollllssss ----mmmmeeeellllffff  ----mmmmbbbbrrrraaaannnncccchhhh----pppprrrreeeeddddiiiicccctttt
           ----mmmmnnnnoooo----bbbbrrrraaaannnncccchhhh----pppprrrreeeeddddiiiicccctttt  ----mmmmbbbbaaaasssseeee----aaaaddddddddrrrreeeesssssssseeeessss ----mmmmnnnnoooo----bbbbaaaasssseeee----
           aaaaddddddddrrrreeeesssssssseeeessss  ----mmmmssssiiiinnnngggglllleeee----eeeexxxxiiiitttt  ----mmmmnnnnoooo----ssssiiiinnnngggglllleeee----eeeexxxxiiiitttt

           _I_A_-_6_4 _O_p_t_i_o_n_s ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn  ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn  ----mmmmggggnnnnuuuu----aaaassss
           ----mmmmggggnnnnuuuu----lllldddd  ----mmmmnnnnoooo----ppppiiiicccc ----mmmmvvvvoooollllaaaattttiiiilllleeee----aaaassssmmmm----ssssttttoooopppp  ----mmmmbbbb----sssstttteeeepppp
           ----mmmmrrrreeeeggggiiiisssstttteeeerrrr----nnnnaaaammmmeeeessss  ----mmmmnnnnoooo----ssssddddaaaattttaaaa ----mmmmccccoooonnnnssssttttaaaannnntttt----ggggpppp  ----mmmmaaaauuuuttttoooo----ppppiiiicccc
           ----mmmmiiiinnnnlllliiiinnnneeee----ffffllllooooaaaatttt----ddddiiiivvvviiiiddddeeee----mmmmiiiinnnn----llllaaaatttteeeennnnccccyyyy ----mmmmiiiinnnnlllliiiinnnneeee----ffffllllooooaaaatttt----
           ddddiiiivvvviiiiddddeeee----mmmmaaaaxxxx----tttthhhhrrrroooouuuugggghhhhppppuuuutttt ----mmmmiiiinnnnlllliiiinnnneeee----iiiinnnntttt----ddddiiiivvvviiiiddddeeee----mmmmiiiinnnn----llllaaaatttteeeennnnccccyyyy
           ----mmmmiiiinnnnlllliiiinnnneeee----iiiinnnntttt----ddddiiiivvvviiiiddddeeee----mmmmaaaaxxxx----tttthhhhrrrroooouuuugggghhhhppppuuuutttt  ----mmmmnnnnoooo----ddddwwwwaaaarrrrffff2222----aaaassssmmmm
           ----mmmmffffiiiixxxxeeeedddd----rrrraaaannnnggggeeee====_r_e_g_i_s_t_e_r_-_r_a_n_g_e

           _D_3_0_V _O_p_t_i_o_n_s ----mmmmeeeexxxxttttmmmmeeeemmmm  ----mmmmeeeexxxxttttmmmmeeeemmmmoooorrrryyyy  ----mmmmoooonnnncccchhhhiiiipppp  ----mmmmnnnnoooo----
           aaaassssmmmm----ooooppppttttiiiimmmmiiiizzzzeeee ----mmmmaaaassssmmmm----ooooppppttttiiiimmmmiiiizzzzeeee  ----mmmmbbbbrrrraaaannnncccchhhh----ccccoooosssstttt====_n  ----mmmmccccoooonnnndddd----
           eeeexxxxeeeecccc====_n

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           ----mmmmbbbbaaaacccckkkkcccchhhhaaaaiiiinnnn  ----mmmmnnnnoooo----bbbbaaaacccckkkkcccchhhhaaaaiiiinnnn ----mmmmssssmmmmaaaallllllll----eeeexxxxeeeecccc  ----mmmmnnnnoooo----ssssmmmmaaaallllllll----
           eeeexxxxeeeecccc  ----mmmmmmmmvvvvcccclllleeee  ----mmmmnnnnoooo----mmmmvvvvcccclllleeee ----mmmm66664444  ----mmmm33331111  ----mmmmddddeeeebbbbuuuugggg  ----mmmmnnnnoooo----
           ddddeeeebbbbuuuugggg

           _C_R_I_S _O_p_t_i_o_n_s ----mmmmccccppppuuuu====_c_p_u  ----mmmmaaaarrrrcccchhhh====_c_p_u  ----mmmmttttuuuunnnneeee====_c_p_u ----mmmmmmmmaaaaxxxx----
           ssssttttaaaacccckkkk----ffffrrrraaaammmmeeee====_n  ----mmmmeeeelllliiiinnnnuuuuxxxx----ssssttttaaaacccckkkkssssiiiizzzzeeee====_n ----mmmmeeeettttrrrraaaaxxxx4444
           ----mmmmeeeettttrrrraaaaxxxx111100000000  ----mmmmppppddddeeeebbbbuuuugggg  ----mmmmcccccccc----iiiinnnniiiitttt  ----mmmmnnnnoooo----ssssiiiiddddeeee----eeeeffffffffeeeeccccttttssss
           ----mmmmssssttttaaaacccckkkk----aaaalllliiiiggggnnnn  ----mmmmddddaaaattttaaaa----aaaalllliiiiggggnnnn  ----mmmmccccoooonnnnsssstttt----aaaalllliiiiggggnnnn ----mmmm33332222----bbbbiiiitttt
           ----mmmm11116666----bbbbiiiitttt  ----mmmm8888----bbbbiiiitttt  ----mmmmnnnnoooo----pppprrrroooolllloooogggguuuueeee----eeeeppppiiiilllloooogggguuuueeee  ----mmmmnnnnoooo----ggggoooottttpppplllltttt
           ----mmmmeeeellllffff  ----mmmmaaaaoooouuuutttt  ----mmmmeeeelllliiiinnnnuuuuxxxx  ----mmmmlllliiiinnnnuuuuxxxx  ----ssssiiiimmmm  ----ssssiiiimmmm2222

           _P_D_P_-_1_1 _O_p_t_i_o_n_s ----mmmmffffppppuuuu  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmaaaacccc0000  ----mmmmnnnnoooo----aaaacccc0000
           ----mmmm44440000  ----mmmm44445555  ----mmmm11110000 ----mmmmbbbbccccooooppppyyyy  ----mmmmbbbbccccooooppppyyyy----bbbbuuuuiiiillllttttiiiinnnn  ----mmmmiiiinnnntttt33332222
           ----mmmmnnnnoooo----iiiinnnntttt11116666 ----mmmmiiiinnnntttt11116666  ----mmmmnnnnoooo----iiiinnnntttt33332222  ----mmmmffffllllooooaaaatttt33332222  ----mmmmnnnnoooo----
           ffffllllooooaaaatttt66664444 ----mmmmffffllllooooaaaatttt66664444  ----mmmmnnnnoooo----ffffllllooooaaaatttt33332222  ----mmmmaaaabbbbsssshhhhiiii  ----mmmmnnnnoooo----aaaabbbbsssshhhhiiii



2004-02-14                  gcc-3.3.3                           8





GCC(1)                         GNU                         GCC(1)


           ----mmmmbbbbrrrraaaannnncccchhhh----eeeexxxxppppeeeennnnssssiiiivvvveeee  ----mmmmbbbbrrrraaaannnncccchhhh----cccchhhheeeeaaaapppp ----mmmmsssspppplllliiiitttt  ----mmmmnnnnoooo----sssspppplllliiiitttt
           ----mmmmuuuunnnniiiixxxx----aaaassssmmmm  ----mmmmddddeeeecccc----aaaassssmmmm

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s ----mmmmssssiiiimmmm

           _X_t_e_n_s_a _O_p_t_i_o_n_s ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn  ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn ----mmmmddddeeeennnnssssiiiittttyyyy
           ----mmmmnnnnoooo----ddddeeeennnnssssiiiittttyyyy ----mmmmmmmmaaaacccc11116666  ----mmmmnnnnoooo----mmmmaaaacccc11116666 ----mmmmmmmmuuuullll11116666  ----mmmmnnnnoooo----mmmmuuuullll11116666
           ----mmmmmmmmuuuullll33332222  ----mmmmnnnnoooo----mmmmuuuullll33332222 ----mmmmnnnnssssaaaa  ----mmmmnnnnoooo----nnnnssssaaaa ----mmmmmmmmiiiinnnnmmmmaaaaxxxx  ----mmmmnnnnoooo----
           mmmmiiiinnnnmmmmaaaaxxxx ----mmmmsssseeeexxxxtttt  ----mmmmnnnnoooo----sssseeeexxxxtttt ----mmmmbbbboooooooolllleeeeaaaannnnssss  ----mmmmnnnnoooo----bbbboooooooolllleeeeaaaannnnssss
           ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd  ----mmmmnnnnoooo----ffffuuuusssseeeedddd----
           mmmmaaaadddddddd ----mmmmsssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee  ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee
           ----mmmmtttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----lllliiiitttteeeerrrraaaallllssss  ----mmmmnnnnoooo----tttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----lllliiiitttteeeerrrraaaallllssss
           ----mmmmttttaaaarrrrggggeeeetttt----aaaalllliiiiggggnnnn  ----mmmmnnnnoooo----ttttaaaarrrrggggeeeetttt----aaaalllliiiiggggnnnn ----mmmmlllloooonnnnggggccccaaaallllllllssss  ----mmmmnnnnoooo----
           lllloooonnnnggggccccaaaallllllllssss

           _F_R_V _O_p_t_i_o_n_s ----mmmmggggpppprrrr----33332222  ----mmmmggggpppprrrr----66664444  ----mmmmffffpppprrrr----33332222  ----mmmmffffpppprrrr----66664444
           ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt  ----mmmmssssoooofffftttt----ffffllllooooaaaatttt  ----mmmmaaaalllllllloooocccc----cccccccc  ----mmmmffffiiiixxxxeeeedddd----cccccccc
           ----mmmmddddwwwwoooorrrrdddd  ----mmmmnnnnoooo----ddddwwwwoooorrrrdddd  ----mmmmddddoooouuuubbbblllleeee  ----mmmmnnnnoooo----ddddoooouuuubbbblllleeee ----mmmmmmmmeeeeddddiiiiaaaa
           ----mmmmnnnnoooo----mmmmeeeeddddiiiiaaaa  ----mmmmmmmmuuuullllaaaadddddddd  ----mmmmnnnnoooo----mmmmuuuullllaaaadddddddd  ----mmmmlllliiiibbbbrrrraaaarrrryyyy----ppppiiiicccc
           ----mmmmaaaacccccccc----4444  ----mmmmaaaacccccccc----8888  ----mmmmppppaaaacccckkkk  ----mmmmnnnnoooo----ppppaaaacccckkkk  ----mmmmnnnnoooo----eeeeffffllllaaaaggggssss
           ----mmmmccccoooonnnndddd----mmmmoooovvvveeee  ----mmmmnnnnoooo----ccccoooonnnndddd----mmmmoooovvvveeee ----mmmmsssscccccccc  ----mmmmnnnnoooo----sssscccccccc ----mmmmccccoooonnnndddd----
           eeeexxxxeeeecccc  ----mmmmnnnnoooo----ccccoooonnnndddd----eeeexxxxeeeecccc  ----mmmmvvvvlllliiiiwwww----bbbbrrrraaaannnncccchhhh  ----mmmmnnnnoooo----vvvvlllliiiiwwww----bbbbrrrraaaannnncccchhhh
           ----mmmmmmmmuuuullllttttiiii----ccccoooonnnndddd----eeeexxxxeeeecccc  ----mmmmnnnnoooo----mmmmuuuullllttttiiii----ccccoooonnnndddd----eeeexxxxeeeecccc  ----mmmmnnnneeeesssstttteeeedddd----
           ccccoooonnnndddd----eeeexxxxeeeecccc ----mmmmnnnnoooo----nnnneeeesssstttteeeedddd----ccccoooonnnndddd----eeeexxxxeeeecccc  ----mmmmttttoooommmmccccaaaatttt----ssssttttaaaattttssss
           ----mmmmccccppppuuuu====_c_p_u

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           ----ffffccccaaaallllllll----ssssaaaavvvveeeedddd----_r_e_g  ----ffffccccaaaallllllll----uuuusssseeeedddd----_r_e_g ----ffffffffiiiixxxxeeeedddd----_r_e_g
           ----ffffeeeexxxxcccceeeeppppttttiiiioooonnnnssss ----ffffnnnnoooonnnn----ccccaaaallllllll----eeeexxxxcccceeeeppppttttiiiioooonnnnssss  ----ffffuuuunnnnwwwwiiiinnnndddd----ttttaaaabbbblllleeeessss
           ----ffffaaaassssyyyynnnncccchhhhrrrroooonnnnoooouuuussss----uuuunnnnwwwwiiiinnnndddd----ttttaaaabbbblllleeeessss ----ffffiiiinnnnhhhhiiiibbbbiiiitttt----ssssiiiizzzzeeee----ddddiiiirrrreeeeccccttttiiiivvvveeee
           ----ffffiiiinnnnssssttttrrrruuuummmmeeeennnntttt----ffffuuuunnnnccccttttiiiioooonnnnssss ----ffffnnnnoooo----ccccoooommmmmmmmoooonnnn  ----ffffnnnnoooo----iiiiddddeeeennnntttt  ----ffffnnnnoooo----
           ggggnnnnuuuu----lllliiiinnnnkkkkeeeerrrr ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn  ----ffffppppiiiicccc  ----ffffPPPPIIIICCCC ----ffffrrrreeeegggg----
           ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn  ----ffffsssshhhhaaaarrrreeeedddd----ddddaaaattttaaaa  ----ffffsssshhhhoooorrrrtttt----eeeennnnuuuummmmssss ----ffffsssshhhhoooorrrrtttt----
           ddddoooouuuubbbblllleeee  ----ffffsssshhhhoooorrrrtttt----wwwwcccchhhhaaaarrrr  ----ffffvvvvoooollllaaaattttiiiilllleeee ----ffffvvvvoooollllaaaattttiiiilllleeee----gggglllloooobbbbaaaallll
           ----ffffvvvvoooollllaaaattttiiiilllleeee----ssssttttaaaattttiiiicccc ----ffffvvvveeeerrrrbbbboooosssseeee----aaaassssmmmm  ----ffffppppaaaacccckkkk----ssssttttrrrruuuucccctttt
           ----ffffssssttttaaaacccckkkk----cccchhhheeeecccckkkk ----ffffssssttttaaaacccckkkk----lllliiiimmmmiiiitttt----rrrreeeeggggiiiisssstttteeeerrrr====_r_e_g  ----ffffssssttttaaaacccckkkk----
           lllliiiimmmmiiiitttt----ssssyyyymmmmbbbboooollll====_s_y_m ----ffffaaaarrrrgggguuuummmmeeeennnntttt----aaaalllliiiiaaaassss  ----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss
           ----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss----gggglllloooobbbbaaaallll  ----fffflllleeeeaaaaddddiiiinnnngggg----uuuunnnnddddeeeerrrrssssccccoooorrrreeee ----ffffttttllllssss----
           mmmmooooddddeeeellll====_m_o_d_e_l ----ffffttttrrrraaaappppvvvv  ----ffffbbbboooouuuunnnnddddssss----cccchhhheeeecccckkkk

       OOOOppppttttiiiioooonnnnssss CCCCoooonnnnttttrrrroooolllllllliiiinnnngggg tttthhhheeee KKKKiiiinnnndddd ooooffff OOOOuuuuttttppppuuuutttt

       Compilation can involve up to four stages: preprocessing,
       compilation proper, assembly and linking, always in that
       order.  The first three stages apply to an individual
       source file, and end by producing an object file; linking
       combines all the object files (those newly compiled, and
       those specified as input) into an executable file.

       For any given input file, the file name suffix determines
       what kind of compilation is done:

       _f_i_l_e....cccc
           C source code which must be preprocessed.



2004-02-14                  gcc-3.3.3                           9





GCC(1)                         GNU                         GCC(1)


       _f_i_l_e....iiii
           C source code which should not be preprocessed.

       _f_i_l_e....iiiiiiii
           C++ source code which should not be preprocessed.

       _f_i_l_e....mmmm
           Objective-C source code.  Note that you must link with
           the library _l_i_b_o_b_j_c_._a to make an Objective-C program
           work.

       _f_i_l_e....mmmmiiii
           Objective-C source code which should not be
           preprocessed.

       _f_i_l_e....hhhh
           C header file (not to be compiled or linked).

       _f_i_l_e....cccccccc
       _f_i_l_e....ccccpppp
       _f_i_l_e....ccccxxxxxxxx
       _f_i_l_e....ccccpppppppp
       _f_i_l_e....cccc++++++++
       _f_i_l_e....CCCC
           C++ source code which must be preprocessed.  Note that
           in ....ccccxxxxxxxx, the last two letters must both be literally
           xxxx.  Likewise, ....CCCC refers to a literal capital C.

       _f_i_l_e....ffff
       _f_i_l_e....ffffoooorrrr
       _f_i_l_e....FFFFOOOORRRR
           Fortran source code which should not be preprocessed.

       _f_i_l_e....FFFF
       _f_i_l_e....ffffpppppppp
       _f_i_l_e....FFFFPPPPPPPP
           Fortran source code which must be preprocessed (with
           the traditional preprocessor).

       _f_i_l_e....rrrr
           Fortran source code which must be preprocessed with a
           RATFOR preprocessor (not included with GCC).

       _f_i_l_e....aaaaddddssss
           Ada source code file which contains a library unit
           declaration (a declaration of a package, subprogram,
           or generic, or a generic instantiation), or a library
           unit renaming declaration (a package, generic, or
           subprogram renaming declaration).  Such files are also
           called _s_p_e_c_s.

       _f_i_l_e....aaaaddddbbbb
           Ada source code file containing a library unit body (a
           subprogram or package body).  Such files are also



2004-02-14                  gcc-3.3.3                          10





GCC(1)                         GNU                         GCC(1)


           called _b_o_d_i_e_s.

       _f_i_l_e....ssss
           Assembler code.

       _f_i_l_e....SSSS
           Assembler code which must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any
           file name with no recognized suffix is treated this
           way.

       You can specify the input language explicitly with the ----xxxx
       option:

       ----xxxx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following
           input files (rather than letting the compiler choose a
           default based on the file name suffix).  This option
           applies to all following input files until the next ----xxxx
           option.  Possible values for _l_a_n_g_u_a_g_e are:

                   c  c-header  cpp-output
                   c++  c++-cpp-output
                   objective-c  objc-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   f77  f77-cpp-input  ratfor
                   java
                   treelang


       ----xxxx nnnnoooonnnneeee
           Turn off any specification of a language, so that
           subsequent files are handled according to their file
           name suffixes (as they are if ----xxxx has not been used at
           all).

       ----ppppaaaassssssss----eeeexxxxiiiitttt----ccccooooddddeeeessss
           Normally the ggggcccccccc program will exit with the code of 1
           if any phase of the compiler returns a non-success
           return code.  If you specify ----ppppaaaassssssss----eeeexxxxiiiitttt----ccccooooddddeeeessss, the ggggcccccccc
           program will instead return with numerically highest
           error produced by any phase that returned an error
           indication.

       If you only want some of the stages of compilation, you
       can use ----xxxx (or filename suffixes) to tell ggggcccccccc where to
       start, and one of the options ----cccc, ----SSSS, or ----EEEE to say where
       ggggcccccccc is to stop.  Note that some combinations (for example,
       ----xxxx ccccpppppppp----oooouuuuttttppppuuuutttt ----EEEE) instruct ggggcccccccc to do nothing at all.





2004-02-14                  gcc-3.3.3                          11





GCC(1)                         GNU                         GCC(1)


       ----cccc  Compile or assemble the source files, but do not link.
           The linking stage simply is not done.  The ultimate
           output is in the form of an object file for each
           source file.

           By default, the object file name for a source file is
           made by replacing the suffix ....cccc, ....iiii, ....ssss, etc., with
           ....oooo.

           Unrecognized input files, not requiring compilation or
           assembly, are ignored.

       ----SSSS  Stop after the stage of compilation proper; do not
           assemble.  The output is in the form of an assembler
           code file for each non-assembler input file specified.

           By default, the assembler file name for a source file
           is made by replacing the suffix ....cccc, ....iiii, etc., with ....ssss.

           Input files that don't require compilation are
           ignored.

       ----EEEE  Stop after the preprocessing stage; do not run the
           compiler proper.  The output is in the form of
           preprocessed source code, which is sent to the
           standard output.

           Input files which don't require preprocessing are
           ignored.

       ----oooo _f_i_l_e
           Place output in file _f_i_l_e.  This applies regardless to
           whatever sort of output is being produced, whether it
           be an executable file, an object file, an assembler
           file or preprocessed C code.

           Since only one output file can be specified, it does
           not make sense to use ----oooo when compiling more than one
           input file, unless you are producing an executable
           file as output.

           If ----oooo is not specified, the default is to put an
           executable file in _a_._o_u_t, the object file for
           _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler file in
           _s_o_u_r_c_e_._s, and all preprocessed C source on standard
           output.

       ----vvvv  Print (on standard error output) the commands executed
           to run the stages of compilation.  Also print the
           version number of the compiler driver program and of
           the preprocessor and the compiler proper.

       ----############
           Like ----vvvv except the commands are not executed and all



2004-02-14                  gcc-3.3.3                          12





GCC(1)                         GNU                         GCC(1)


           command arguments are quoted.  This is useful for
           shell scripts to capture the driver-generated command
           lines.

       ----ppppiiiippppeeee
           Use pipes rather than temporary files for
           communication between the various stages of
           compilation.  This fails to work on some systems where
           the assembler is unable to read from a pipe; but the
           GNU assembler has no trouble.

       --------hhhheeeellllpppp
           Print (on the standard output) a description of the
           command line options understood by ggggcccccccc.  If the ----vvvv
           option is also specified then --------hhhheeeellllpppp will also be
           passed on to the various processes invoked by ggggcccccccc, so
           that they can display the command line options they
           accept.  If the ----WWWW option is also specified then
           command line options which have no documentation
           associated with them will also be displayed.

       --------ttttaaaarrrrggggeeeetttt----hhhheeeellllpppp
           Print (on the standard output) a description of target
           specific command line options for each tool.

       --------vvvveeeerrrrssssiiiioooonnnn
           Display the version number and copyrights of the
           invoked GCC.

       CCCCoooommmmppppiiiilllliiiinnnngggg CCCC++++++++ PPPPrrrrooooggggrrrraaaammmmssss

       C++ source files conventionally use one of the suffixes
       ....CCCC, ....cccccccc, ....ccccpppppppp, ....cccc++++++++, ....ccccpppp, or ....ccccxxxxxxxx; preprocessed C++ files
       use the suffix ....iiiiiiii.  GCC recognizes files with these names
       and compiles them as C++ programs even if you call the
       compiler the same way as for compiling C programs (usually
       with the name ggggcccccccc).

       However, C++ programs often require class libraries as
       well as a compiler that understands the C++ language---and
       under some circumstances, you might want to compile
       programs from standard input, or otherwise without a
       suffix that flags them as C++ programs.  gggg++++++++ is a program
       that calls GCC with the default language set to C++, and
       automatically specifies linking against the C++ library.
       On many systems, gggg++++++++ is also installed with the name cccc++++++++.

       When you compile C++ programs, you may specify many of the
       same command-line options that you use for compiling
       programs in any language; or command-line options
       meaningful for C and related languages; or options that
       are meaningful only for C++ programs.





2004-02-14                  gcc-3.3.3                          13





GCC(1)                         GNU                         GCC(1)


       OOOOppppttttiiiioooonnnnssss CCCCoooonnnnttttrrrroooolllllllliiiinnnngggg CCCC DDDDiiiiaaaalllleeeecccctttt

       The following options control the dialect of C (or
       languages derived from C, such as C++ and Objective-C)
       that the compiler accepts:

       ----aaaannnnssssiiii
           In C mode, support all ISO C90 programs.  In C++ mode,
           remove GNU extensions that conflict with ISO C++.

           This turns off certain features of GCC that are
           incompatible with ISO C90 (when compiling C code), or
           of standard C++ (when compiling C++ code), such as the
           "asm" and "typeof" keywords, and predefined macros
           such as "unix" and "vax" that identify the type of
           system you are using.  It also enables the undesirable
           and rarely used ISO trigraph feature.  For the C
           compiler, it disables recognition of C++ style ////////
           comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__",
           "__inline__" and "__typeof__" continue to work despite
           ----aaaannnnssssiiii.  You would not want to use them in an ISO C
           program, of course, but it is useful to put them in
           header files that might be included in compilations
           done with ----aaaannnnssssiiii.  Alternate predefined macros such as
           "__unix__" and "__vax__" are also available, with or
           without ----aaaannnnssssiiii.

           The ----aaaannnnssssiiii option does not cause non-ISO programs to be
           rejected gratuitously.  For that, ----ppppeeeeddddaaaannnnttttiiiicccc is
           required in addition to ----aaaannnnssssiiii.

           The macro "__STRICT_ANSI__" is predefined when the
           ----aaaannnnssssiiii option is used.  Some header files may notice
           this macro and refrain from declaring certain
           functions or defining certain macros that the ISO
           standard doesn't call for; this is to avoid
           interfering with any programs that might use these
           names for other things.

           Functions which would normally be built in but do not
           have semantics defined by ISO C (such as "alloca" and
           "ffs") are not built-in functions with ----aaaannnnssssiiii is used.

       ----ssssttttdddd====
           Determine the language standard.  This option is
           currently only supported when compiling C or C++.  A
           value for this option must be provided; possible
           values are

           cccc88889999





2004-02-14                  gcc-3.3.3                          14





GCC(1)                         GNU                         GCC(1)


           iiiissssoooo9999888899999999::::1111999999990000
               ISO C90 (same as ----aaaannnnssssiiii).

           iiiissssoooo9999888899999999::::111199999999444400009999
               ISO C90 as modified in amendment 1.

           cccc99999999
           cccc9999xxxx
           iiiissssoooo9999888899999999::::1111999999999999
           iiiissssoooo9999888899999999::::111199999999xxxx
               ISO C99.  Note that this standard is not yet fully
               supported; see
               <hhhhttttttttpppp::::////////ggggcccccccc....ggggnnnnuuuu....oooorrrrgggg////ggggcccccccc----3333....3333////cccc99999999ssssttttaaaattttuuuussss....hhhhttttmmmmllll> for
               more information.  The names cccc9999xxxx and iiiissssoooo9999888899999999::::111199999999xxxx
               are deprecated.

           ggggnnnnuuuu88889999
               Default, ISO C90 plus GNU extensions (including
               some C99 features).

           ggggnnnnuuuu99999999
           ggggnnnnuuuu9999xxxx
               ISO C99 plus GNU extensions.  When ISO C99 is
               fully implemented in GCC, this will become the
               default.  The name ggggnnnnuuuu9999xxxx is deprecated.

           cccc++++++++99998888
               The 1998 ISO C++ standard plus amendments.

           ggggnnnnuuuu++++++++99998888
               The same as ----ssssttttdddd====cccc++++++++99998888 plus GNU extensions.  This
               is the default for C++ code.

           Even when this option is not specified, you can still
           use some of the features of newer standards in so far
           as they do not conflict with previous C standards.
           For example, you may use "__restrict__" even when
           ----ssssttttdddd====cccc99999999 is not specified.

           The ----ssssttttdddd options specifying some version of ISO C have
           the same effects as ----aaaannnnssssiiii, except that features that
           were not in ISO C90 but are in the specified version
           (for example, //////// comments and the "inline" keyword in
           ISO C99) are not disabled.

       ----aaaauuuuxxxx----iiiinnnnffffoooo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations
           for all functions declared and/or defined in a
           translation unit, including those in header files.
           This option is silently ignored in any language other
           than C.

           Besides declarations, the file indicates, in comments,
           the origin of each declaration (source file and line),



2004-02-14                  gcc-3.3.3                          15





GCC(1)                         GNU                         GCC(1)


           whether the declaration was implicit, prototyped or
           unprototyped (IIII, NNNN for new or OOOO for old, respectively,
           in the first character after the line number and the
           colon), and whether it came from a declaration or a
           definition (CCCC or FFFF, respectively, in the following
           character).  In the case of function definitions, a
           K&R-style list of arguments followed by their
           declarations is also provided, inside comments, after
           the declaration.

       ----ffffnnnnoooo----aaaassssmmmm
           Do not recognize "asm", "inline" or "typeof" as a
           keyword, so that code can use these words as
           identifiers.  You can use the keywords "__asm__",
           "__inline__" and "__typeof__" instead.  ----aaaannnnssssiiii implies
           ----ffffnnnnoooo----aaaassssmmmm.

           In C++, this switch only affects the "typeof" keyword,
           since "asm" and "inline" are standard keywords.  You
           may want to use the ----ffffnnnnoooo----ggggnnnnuuuu----kkkkeeeeyyyywwwwoooorrrrddddssss flag instead,
           which has the same effect.  In C99 mode (----ssssttttdddd====cccc99999999 or
           ----ssssttttdddd====ggggnnnnuuuu99999999), this switch only affects the "asm" and
           "typeof" keywords, since "inline" is a standard
           keyword in ISO C99.

       ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn
       ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn----_f_u_n_c_t_i_o_n
           Don't recognize built-in functions that do not begin
           with ________bbbbuuuuiiiillllttttiiiinnnn____ as prefix.

           GCC normally generates special code to handle certain
           built-in functions more efficiently; for instance,
           calls to "alloca" may become single instructions that
           adjust the stack directly, and calls to "memcpy" may
           become inline copy loops.  The resulting code is often
           both smaller and faster, but since the function calls
           no longer appear as such, you cannot set a breakpoint
           on those calls, nor can you change the behavior of the
           functions by linking with a different library.

           With the ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn----_f_u_n_c_t_i_o_n option only the built-
           in function _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not
           begin with ________bbbbuuuuiiiillllttttiiiinnnn____.  If a function is named this is
           not built-in in this version of GCC, this option is
           ignored.  There is no corresponding ----ffffbbbbuuuuiiiillllttttiiiinnnn----_f_u_n_c_t_i_o_n
           option; if you wish to enable built-in functions
           selectively when using ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn or ----ffffffffrrrreeeeeeeessssttttaaaannnnddddiiiinnnngggg,
           you may define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))






2004-02-14                  gcc-3.3.3                          16





GCC(1)                         GNU                         GCC(1)


       ----ffffhhhhoooosssstttteeeedddd
           Assert that compilation takes place in a hosted
           environment.  This implies ----ffffbbbbuuuuiiiillllttttiiiinnnn.  A hosted
           environment is one in which the entire standard
           library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except
           a kernel.  This is equivalent to ----ffffnnnnoooo----ffffrrrreeeeeeeessssttttaaaannnnddddiiiinnnngggg.

       ----ffffffffrrrreeeeeeeessssttttaaaannnnddddiiiinnnngggg
           Assert that compilation takes place in a freestanding
           environment.  This implies ----ffffnnnnoooo----bbbbuuuuiiiillllttttiiiinnnn.  A
           freestanding environment is one in which the standard
           library may not exist, and program startup may not
           necessarily be at "main".  The most obvious example is
           an OS kernel.  This is equivalent to ----ffffnnnnoooo----hhhhoooosssstttteeeedddd.

       ----ffffmmmmssss----eeeexxxxtttteeeennnnssssiiiioooonnnnssss
           Accept some non-standard constructs used in Microsoft
           header files.

       ----ttttrrrriiiiggggrrrraaaapppphhhhssss
           Support ISO C trigraphs.  The ----aaaannnnssssiiii option (and ----ssssttttdddd
           options for strict ISO C conformance) implies
           ----ttttrrrriiiiggggrrrraaaapppphhhhssss.

       ----nnnnoooo----iiiinnnntttteeeeggggrrrraaaatttteeeedddd----ccccpppppppp
           Performs a compilation in two passes: preprocessing
           and compiling.  This option allows a user supplied
           "cc1", "cc1plus", or "cc1obj" via the ----BBBB option. The
           user supplied compilation step can then add in an
           additional preprocessing step after normal
           preprocessing but before compiling. The default is to
           use the integrated cpp (internal cpp)

           The semantics of this option will change if "cc1",
           "cc1plus", and "cc1obj" are merged.

       ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll
       ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll----ccccpppppppp
           Formerly, these options caused GCC to attempt to
           emulate a pre-standard C compiler.  They are now only
           supported with the ----EEEE switch.  The preprocessor
           continues to support a pre-standard mode.  See the GNU
           CPP manual for details.

       ----ffffccccoooonnnndddd----mmmmiiiissssmmmmaaaattttcccchhhh
           Allow conditional expressions with mismatched types in
           the second and third arguments.  The value of such an
           expression is void.  This option is not supported for
           C++.

       ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr
           Let the type "char" be unsigned, like "unsigned char".




2004-02-14                  gcc-3.3.3                          17





GCC(1)                         GNU                         GCC(1)


           Each kind of machine has a default for what "char"
           should be.  It is either like "unsigned char" by
           default or like "signed char" by default.

           Ideally, a portable program should always use "signed
           char" or "unsigned char" when it depends on the
           signedness of an object.  But many programs have been
           written to use plain "char" and expect it to be
           signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its
           inverse, let you make such a program work with the
           opposite default.

           The type "char" is always a distinct type from each of
           "signed char" or "unsigned char", even though its
           behavior is always just like one of those two.

       ----ffffssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to ----ffffnnnnoooo----uuuunnnnssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr,
           which is the negative form of ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr.
           Likewise, the option ----ffffnnnnoooo----ssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr is equivalent to
           ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----cccchhhhaaaarrrr.

       ----ffffssssiiiiggggnnnneeeedddd----bbbbiiiittttffffiiiieeeellllddddssss
       ----ffffuuuunnnnssssiiiiggggnnnneeeedddd----bbbbiiiittttffffiiiieeeellllddddssss
       ----ffffnnnnoooo----ssssiiiiggggnnnneeeedddd----bbbbiiiittttffffiiiieeeellllddddssss
       ----ffffnnnnoooo----uuuunnnnssssiiiiggggnnnneeeedddd----bbbbiiiittttffffiiiieeeellllddddssss
           These options control whether a bit-field is signed or
           unsigned, when the declaration does not use either
           "signed" or "unsigned".  By default, such a bit-field
           is signed, because this is consistent: the basic
           integer types such as "int" are signed types.

       ----ffffwwwwrrrriiiittttaaaabbbblllleeee----ssssttttrrrriiiinnnnggggssss
           Store string constants in the writable data segment
           and don't uniquize them.  This is for compatibility
           with old programs which assume they can write into
           string constants.

           Writing into string constants is a very bad idea;
           ``constants'' should be constant.

       OOOOppppttttiiiioooonnnnssss CCCCoooonnnnttttrrrroooolllllllliiiinnnngggg CCCC++++++++ DDDDiiiiaaaalllleeeecccctttt

       This section describes the command-line options that are
       only meaningful for C++ programs; but you can also use
       most of the GNU compiler options regardless of what
       language your program is in.  For example, you might
       compile a file "firstClass.C" like this:

               g++ -g -frepo -O -c firstClass.C




2004-02-14                  gcc-3.3.3                          18





GCC(1)                         GNU                         GCC(1)


       In this example, only ----ffffrrrreeeeppppoooo is an option meant only for
       C++ programs; you can use the other options with any
       language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++
       programs:

       ----ffffaaaabbbbiiii----vvvveeeerrrrssssiiiioooonnnn====_n
           Use version _n of the C++ ABI.  Version 1 is the
           version of the C++ ABI that first appeared in G++ 3.2.
           Version 0 will always be the version that conforms
           most closely to the C++ ABI specification.  Therefore,
           the ABI obtained using version 0 will change as ABI
           bugs are fixed.

           The default is version 1.

       ----ffffnnnnoooo----aaaacccccccceeeessssssss----ccccoooonnnnttttrrrroooollll
           Turn off all access checking.  This switch is mainly
           useful for working around bugs in the access control
           code.

       ----ffffcccchhhheeeecccckkkk----nnnneeeewwww
           Check that the pointer returned by "operator new" is
           non-null before attempting to modify the storage
           allocated.  This check is normally unnecessary because
           the C++ standard specifies that "operator new" will
           only return "0" if it is declared _tt_hh_rr_oo_ww_((_)), in which
           case the compiler will always check the return value
           even without this option.  In all other cases, when
           "operator new" has a non-empty exception
           specification, memory exhaustion is signalled by
           throwing "std::bad_alloc".  See also nnnneeeewwww ((((nnnnooootttthhhhrrrroooowwww)))).

       ----ffffccccoooonnnnsssseeeerrrrvvvveeee----ssssppppaaaacccceeee
           Put uninitialized or runtime-initialized global
           variables into the common segment, as C does.  This
           saves space in the executable at the cost of not
           diagnosing duplicate definitions.  If you compile with
           this flag and your program mysteriously crashes after
           "main()" has completed, you may have an object that is
           being destroyed twice because two definitions were
           merged.

           This option is no longer useful on most targets, now
           that support has been added for putting variables into
           BSS without making them common.

       ----ffffnnnnoooo----ccccoooonnnnsssstttt----ssssttttrrrriiiinnnnggggssss
           Give string constants type "char *" instead of type
           "const char *".  By default, G++ uses type "const char
           *" as required by the standard.  Even if you use ----ffffnnnnoooo----
           ccccoooonnnnsssstttt----ssssttttrrrriiiinnnnggggssss, you cannot actually modify the value of
           a string constant, unless you also use ----ffffwwwwrrrriiiittttaaaabbbblllleeee----



2004-02-14                  gcc-3.3.3                          19





GCC(1)                         GNU                         GCC(1)


           ssssttttrrrriiiinnnnggggssss.

           This option might be removed in a future release of
           G++.  For maximum portability, you should structure
           your code so that it works with string constants that
           have type "const char *".

       ----ffffddddoooollllllllaaaarrrrssss----iiiinnnn----iiiiddddeeeennnnttttiiiiffffiiiieeeerrrrssss
           Accept $$$$ in identifiers.  You can also explicitly
           prohibit use of $$$$ with the option ----ffffnnnnoooo----ddddoooollllllllaaaarrrrssss----iiiinnnn----
           iiiiddddeeeennnnttttiiiiffffiiiieeeerrrrssss.  (GNU C allows $$$$ by default on most
           target systems, but there are a few exceptions.)
           Traditional C allowed the character $$$$ to form part of
           identifiers.  However, ISO C and C++ forbid $$$$ in
           identifiers.

       ----ffffnnnnoooo----eeeelllliiiiddddeeee----ccccoooonnnnssssttttrrrruuuuccccttttoooorrrrssss
           The C++ standard allows an implementation to omit
           creating a temporary which is only used to initialize
           another object of the same type.  Specifying this
           option disables that optimization, and forces G++ to
           call the copy constructor in all cases.

       ----ffffnnnnoooo----eeeennnnffffoooorrrrcccceeee----eeeehhhh----ssssppppeeeeccccssss
           Don't check for violation of exception specifications
           at runtime.  This option violates the C++ standard,
           but may be useful for reducing code size in production
           builds, much like defining NNNNDDDDEEEEBBBBUUUUGGGG.  The compiler will
           still optimize based on the exception specifications.

       ----ffffeeeexxxxtttteeeerrrrnnnnaaaallll----tttteeeemmmmppppllllaaaatttteeeessss
           Cause ####pppprrrraaaaggggmmmmaaaa iiiinnnntttteeeerrrrffffaaaacccceeee and iiiimmmmpppplllleeeemmmmeeeennnnttttaaaattttiiiioooonnnn to apply to
           template instantiation; template instances are emitted
           or not according to the location of the template
           definition.

           This option is deprecated.

       ----ffffaaaalllltttt----eeeexxxxtttteeeerrrrnnnnaaaallll----tttteeeemmmmppppllllaaaatttteeeessss
           Similar to ----ffffeeeexxxxtttteeeerrrrnnnnaaaallll----tttteeeemmmmppppllllaaaatttteeeessss, but template
           instances are emitted or not according to the place
           where they are first instantiated.

           This option is deprecated.

       ----ffffffffoooorrrr----ssssccccooooppppeeee
       ----ffffnnnnoooo----ffffoooorrrr----ssssccccooooppppeeee
           If ----ffffffffoooorrrr----ssssccccooooppppeeee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffffoooorrrr
           loop itself, as specified by the C++ standard.  If
           ----ffffnnnnoooo----ffffoooorrrr----ssssccccooooppppeeee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
           the enclosing scope, as was the case in old versions
           of G++, and other (traditional) implementations of



2004-02-14                  gcc-3.3.3                          20





GCC(1)                         GNU                         GCC(1)


           C++.

           The default if neither flag is given to follow the
           standard, but to allow and give a warning for old-
           style code that would otherwise be invalid, or have
           different behavior.

       ----ffffnnnnoooo----ggggnnnnuuuu----kkkkeeeeyyyywwwwoooorrrrddddssss
           Do not recognize "typeof" as a keyword, so that code
           can use this word as an identifier.  You can use the
           keyword "__typeof__" instead.  ----aaaannnnssssiiii implies ----ffffnnnnoooo----ggggnnnnuuuu----
           kkkkeeeeyyyywwwwoooorrrrddddssss.

       ----ffffnnnnoooo----iiiimmmmpppplllliiiicccciiiitttt----tttteeeemmmmppppllllaaaatttteeeessss
           Never emit code for non-inline templates which are
           instantiated implicitly (i.e. by use); only emit code
           for explicit instantiations.

       ----ffffnnnnoooo----iiiimmmmpppplllliiiicccciiiitttt----iiiinnnnlllliiiinnnneeee----tttteeeemmmmppppllllaaaatttteeeessss
           Don't emit code for implicit instantiations of inline
           templates, either.  The default is to handle inlines
           differently so that compiles with and without
           optimization will need the same set of explicit
           instantiations.

       ----ffffnnnnoooo----iiiimmmmpppplllleeeemmmmeeeennnntttt----iiiinnnnlllliiiinnnneeeessss
           To save space, do not emit out-of-line copies of
           inline functions controlled by ####pppprrrraaaaggggmmmmaaaa iiiimmmmpppplllleeeemmmmeeeennnnttttaaaattttiiiioooonnnn.
           This will cause linker errors if these functions are
           not inlined everywhere they are called.

       ----ffffmmmmssss----eeeexxxxtttteeeennnnssssiiiioooonnnnssss
           Disable pedantic warnings about constructs used in
           MFC, such as implicit int and getting a pointer to
           member function via non-standard syntax.

       ----ffffnnnnoooo----nnnnoooonnnnaaaannnnssssiiii----bbbbuuuuiiiillllttttiiiinnnnssss
           Disable built-in declarations of functions that are
           not mandated by ANSI/ISO C.  These include "ffs",
           "alloca", "_exit", "index", "bzero", "conjf", and
           other related functions.

       ----ffffnnnnoooo----ooooppppeeeerrrraaaattttoooorrrr----nnnnaaaammmmeeeessss
           Do not treat the operator name keywords "and",
           "bitand", "bitor", "compl", "not", "or" and "xor" as
           synonyms as keywords.

       ----ffffnnnnoooo----ooooppppttttiiiioooonnnnaaaallll----ddddiiiiaaaaggggssss
           Disable diagnostics that the standard says a compiler
           does not need to issue.  Currently, the only such
           diagnostic issued by G++ is the one for a name having
           multiple meanings within a class.





2004-02-14                  gcc-3.3.3                          21





GCC(1)                         GNU                         GCC(1)


       ----ffffppppeeeerrrrmmmmiiiissssssssiiiivvvveeee
           Downgrade some diagnostics about nonconformant code
           from errors to warnings.  Thus, using ----ffffppppeeeerrrrmmmmiiiissssssssiiiivvvveeee
           will allow some nonconforming code to compile.

       ----ffffrrrreeeeppppoooo
           Enable automatic template instantiation at link time.
           This option also implies ----ffffnnnnoooo----iiiimmmmpppplllliiiicccciiiitttt----tttteeeemmmmppppllllaaaatttteeeessss.

       ----ffffnnnnoooo----rrrrttttttttiiii
           Disable generation of information about every class
           with virtual functions for use by the C++ runtime type
           identification features (ddddyyyynnnnaaaammmmiiiicccc____ccccaaaasssstttt and ttttyyyyppppeeeeiiiidddd).  If
           you don't use those parts of the language, you can
           save some space by using this flag.  Note that
           exception handling uses the same information, but it
           will generate it as needed.

       ----ffffssssttttaaaattttssss
           Emit statistics about front-end processing at the end
           of the compilation.  This information is generally
           only useful to the G++ development team.

       ----fffftttteeeemmmmppppllllaaaatttteeee----ddddeeeepppptttthhhh----_n
           Set the maximum instantiation depth for template
           classes to _n.  A limit on the template instantiation
           depth is needed to detect endless recursions during
           template class instantiation.  ANSI/ISO C++ conforming
           programs must not rely on a maximum depth greater than
           17.

       ----ffffuuuusssseeee----ccccxxxxaaaa----aaaatttteeeexxxxiiiitttt
           Register destructors for objects with static storage
           duration with the "__cxa_atexit" function rather than
           the "atexit" function.  This option is required for
           fully standards-compliant handling of static
           destructors, but will only work if your C library
           supports "__cxa_atexit".

       ----ffffvvvvttttaaaabbbblllleeee----ggggcccc
           Emit special relocations for vtables and virtual
           function references so that the linker can identify
           unused virtual functions and zero out vtable slots
           that refer to them.  This is most useful with
           ----ffffffffuuuunnnnccccttttiiiioooonnnn----sssseeeeccccttttiiiioooonnnnssss and ----WWWWllll,,,,--------ggggcccc----sssseeeeccccttttiiiioooonnnnssss, in order to
           also discard the functions themselves.

           This optimization requires GNU as and GNU ld.  Not all
           systems support this option.  ----WWWWllll,,,,--------ggggcccc----sssseeeeccccttttiiiioooonnnnssss is
           ignored without ----ssssttttaaaattttiiiicccc.

       ----ffffnnnnoooo----wwwweeeeaaaakkkk
           Do not use weak symbol support, even if it is provided
           by the linker.  By default, G++ will use weak symbols



2004-02-14                  gcc-3.3.3                          22





GCC(1)                         GNU                         GCC(1)


           if they are available.  This option exists only for
           testing, and should not be used by end-users; it will
           result in inferior code and has no benefits.  This
           option may be removed in a future release of G++.

       ----nnnnoooossssttttddddiiiinnnncccc++++++++
           Do not search for header files in the standard
           directories specific to C++, but do still search the
           other standard directories.  (This option is used when
           building the C++ library.)

       In addition, these optimization, warning, and code
       generation options have meanings only for C++ programs:

       ----ffffnnnnoooo----ddddeeeeffffaaaauuuulllltttt----iiiinnnnlllliiiinnnneeee
           Do not assume iiiinnnnlllliiiinnnneeee for functions defined inside a
           class scope.
             Note that these functions will have linkage like
           inline functions; they just won't be inlined by
           default.

       ----WWWWaaaabbbbiiii (C++ only)
           Warn when G++ generates code that is probably not
           compatible with the vendor-neutral C++ ABI.  Although
           an effort has been made to warn about all such cases,
           there are probably some cases that are not warned
           about, even though G++ is generating incompatible
           code.  There may also be cases where warnings are
           emitted even though the code that is generated will be
           compatible.

           You should rewrite your code to avoid these warnings
           if you are concerned about the fact that code
           generated by G++ may not be binary compatible with
           code generated by other compilers.

           The known incompatibilities at this point include:

           +o   Incorrect handling of tail-padding for bit-fields.
               G++ may attempt to pack data into the same byte as
               a base class.  For example:

                       struct A { virtual void f(); int f1 : 1; };
                       struct B : public A { int f2 : 1; };

               In this case, G++ will place "B::f2" into the same
               byte as"A::f1"; other compilers will not.  You can
               avoid this problem by explicitly padding "A" so
               that its size is a multiple of the byte size on
               your platform; that will cause G++ and other
               compilers to layout "B" identically.

           +o   Incorrect handling of tail-padding for virtual
               bases.  G++ does not use tail padding when laying



2004-02-14                  gcc-3.3.3                          23





GCC(1)                         GNU                         GCC(1)


               out virtual bases.  For example:

                       struct A { virtual void f(); char c1; };
                       struct B { B(); char c2; };
                       struct C : public A, public virtual B {};

               In this case, G++ will not place "B" into the
               tail-padding for "A"; other compilers will.  You
               can avoid this problem by explicitly padding "A"
               so that its size is a multiple of its alignment
               (ignoring virtual base classes); that will cause
               G++ and other compilers to layout "C" identically.

           +o   Incorrect handling of bit-fields with declared
               widths greater than that of their underlying
               types, when the bit-fields appear in a union.  For
               example:

                       union U { int i : 4096; };

               Assuming that an "int" does not have 4096 bits,
               G++ will make the union too small by the number of
               bits in an "int".

           +o   Empty classes can be placed at incorrect offsets.
               For example:

                       struct A {};

                       struct B {
                         A a;
                         virtual void f ();
                       };

                       struct C : public B, public A {};

               G++ will place the "A" base class of "C" at a
               nonzero offset; it should be placed at offset
               zero.  G++ mistakenly believes that the "A" data
               member of "B" is already at offset zero.

           +o   Names of template functions whose types involve
               "typename" or template template parameters can be
               mangled incorrectly.

                       template <typename Q>
                       void f(typename Q::X) {}

                       template <template <typename> class Q>
                       void f(typename Q<int>::X) {}

               Instantiations of these templates may be mangled
               incorrectly.




2004-02-14                  gcc-3.3.3                          24





GCC(1)                         GNU                         GCC(1)


       ----WWWWccccttttoooorrrr----ddddttttoooorrrr----pppprrrriiiivvvvaaaaccccyyyy (C++ only)
           Warn when a class seems unusable because all the
           constructors or destructors in that class are private,
           and it has neither friends nor public static member
           functions.  This warning is enabled by default.

       ----WWWWnnnnoooonnnn----vvvviiiirrrrttttuuuuaaaallll----ddddttttoooorrrr (C++ only)
           Warn when a class appears to be polymorphic, thereby
           requiring a virtual destructor, yet it declares a non-
           virtual one.  This warning is enabled by ----WWWWaaaallllllll.

       ----WWWWrrrreeeeoooorrrrddddeeeerrrr (C++ only)
           Warn when the order of member initializers given in
           the code does not match the order in which they must
           be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler will rearrange the member initializers
           for iiii and jjjj to match the declaration order of the
           members, emitting a warning to that effect.  This
           warning is enabled by ----WWWWaaaallllllll.

       The following ----WWWW............ options are not affected by ----WWWWaaaallllllll.

       ----WWWWeeeeffffffffcccc++++++++ (C++ only)
           Warn about violations of the following style
           guidelines from Scott Meyers' _E_f_f_e_c_t_i_v_e _C_+_+ book:

           +o   Item 11:  Define a copy constructor and an
               assignment operator for classes with dynamically
               allocated memory.

           +o   Item 12:  Prefer initialization to assignment in
               constructors.

           +o   Item 14:  Make destructors virtual in base
               classes.

           +o   Item 15:  Have "operator=" return a reference to
               "*this".

           +o   Item 23:  Don't try to return a reference when you
               must return an object.

           Also warn about violations of the following style
           guidelines from Scott Meyers' _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

           +o   Item 6:  Distinguish between prefix and postfix
               forms of increment and decrement operators.



2004-02-14                  gcc-3.3.3                          25





GCC(1)                         GNU                         GCC(1)


           +o   Item 7:  Never overload "&&", "||", or ",".

           When selecting this option, be aware that the standard
           library headers do not obey all of these guidelines;
           use ggggrrrreeeepppp ----vvvv to filter out those warnings.

       ----WWWWnnnnoooo----ddddeeeepppprrrreeeeccccaaaatttteeeedddd (C++ only)
           Do not warn about usage of deprecated features.

       ----WWWWnnnnoooo----nnnnoooonnnn----tttteeeemmmmppppllllaaaatttteeee----ffffrrrriiiieeeennnndddd (C++ only)
           Disable warnings when non-templatized friend functions
           are declared within a template.  Since the advent of
           explicit template specification support in G++, if the
           name of the friend is an unqualified-id (i.e., ffffrrrriiiieeeennnndddd
           ffffoooooooo((((iiiinnnntttt))))), the C++ language specification demands that
           the friend declare or define an ordinary, nontemplate
           function.  (Section 14.5.3).  Before G++ implemented
           explicit specification, unqualified-ids could be
           interpreted as a particular specialization of a
           templatized function.  Because this non-conforming
           behavior is no longer the default behavior for G++,
           ----WWWWnnnnoooonnnn----tttteeeemmmmppppllllaaaatttteeee----ffffrrrriiiieeeennnndddd allows the compiler to check
           existing code for potential trouble spots and is on by
           default.  This new compiler behavior can be turned off
           with ----WWWWnnnnoooo----nnnnoooonnnn----tttteeeemmmmppppllllaaaatttteeee----ffffrrrriiiieeeennnndddd which keeps the
           conformant compiler code but disables the helpful
           warning.

       ----WWWWoooolllldddd----ssssttttyyyylllleeee----ccccaaaasssstttt (C++ only)
           Warn if an old-style (C-style) cast to a non-void type
           is used within a C++ program.  The new-style casts
           (ssssttttaaaattttiiiicccc____ccccaaaasssstttt, rrrreeeeiiiinnnntttteeeerrrrpppprrrreeeetttt____ccccaaaasssstttt, and ccccoooonnnnsssstttt____ccccaaaasssstttt) are
           less vulnerable to unintended effects and much easier
           to search for.

       ----WWWWoooovvvveeeerrrrllllooooaaaaddddeeeedddd----vvvviiiirrrrttttuuuuaaaallll (C++ only)
           Warn when a function declaration hides virtual
           functions from a base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and
           code like:

                   B* b;
                   b->f();

           will fail to compile.



2004-02-14                  gcc-3.3.3                          26





GCC(1)                         GNU                         GCC(1)


       ----WWWWnnnnoooo----ppppmmmmffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnnssss (C++ only)
           Disable the diagnostic for converting a bound pointer
           to member function to a plain pointer.

       ----WWWWssssiiiiggggnnnn----pppprrrroooommmmoooo (C++ only)
           Warn when overload resolution chooses a promotion from
           unsigned or enumeral type to a signed type, over a
           conversion to an unsigned type of the same size.
           Previous versions of G++ would try to preserve
           unsignedness, but the standard mandates the current
           behavior.

       ----WWWWssssyyyynnnntttthhhh (C++ only)
           Warn when G++'s synthesis behavior does not match that
           of cfront.  For instance:

                   struct A {
                     operator int ();
                     A& operator = (int);
                   };

                   main ()
                   {
                     A a,b;
                     a = b;
                   }

           In this example, G++ will synthesize a default AAAA&&&&
           ooooppppeeeerrrraaaattttoooorrrr ==== ((((ccccoooonnnnsssstttt AAAA&&&&))));;;;, while cfront will use the
           user-defined ooooppppeeeerrrraaaattttoooorrrr ====.

       OOOOppppttttiiiioooonnnnssss CCCCoooonnnnttttrrrroooolllllllliiiinnnngggg OOOObbbbjjjjeeeeccccttttiiiivvvveeee----CCCC DDDDiiiiaaaalllleeeecccctttt

       This section describes the command-line options that are
       only meaningful for Objective-C programs, but you can also
       use most of the GNU compiler options regardless of what
       language your program is in.  For example, you might
       compile a file "some_class.m" like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, ----ffffggggnnnnuuuu----rrrruuuunnnnttttiiiimmmmeeee is an option meant only for
       Objective-C programs; you can use the other options with
       any language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling
       Objective-C programs:

       ----ffffccccoooonnnnssssttttaaaannnntttt----ssssttttrrrriiiinnnngggg----ccccllllaaaassssssss====_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate
           for each literal string specified with the syntax
           "@"..."".  The default class name is
           "NXConstantString".




2004-02-14                  gcc-3.3.3                          27





GCC(1)                         GNU                         GCC(1)


       ----ffffggggnnnnuuuu----rrrruuuunnnnttttiiiimmmmeeee
           Generate object code compatible with the standard GNU
           Objective-C runtime.  This is the default for most
           types of systems.

       ----ffffnnnneeeexxxxtttt----rrrruuuunnnnttttiiiimmmmeeee
           Generate output compatible with the NeXT runtime.
           This is the default for NeXT-based systems, including
           Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is
           predefined if (and only if) this option is used.

       ----ggggeeeennnn----ddddeeeeccccllllssss
           Dump interface declarations for all classes seen in
           the source file to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       ----WWWWnnnnoooo----pppprrrroooottttooooccccoooollll
           If a class is declared to implement a protocol, a
           warning is issued for every method in the protocol
           that is not implemented by the class.  The default
           behavior is to issue a warning for every method not
           explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If
           you use the "-Wno-protocol" option, then methods
           inherited from the superclass are considered to be
           implemented, and no warning is issued for them.

       ----WWWWsssseeeelllleeeeccccttttoooorrrr
           Warn if multiple methods of different types for the
           same selector are found during compilation.  The check
           is performed on the list of methods in the final stage
           of compilation.  Additionally, a check is performed
           for each selector appearing in a "@selector(...)"
           expression, and a corresponding method for that
           selector has been found during compilation.  Because
           these checks scan the method table only at the end of
           compilation, these warnings are not produced if the
           final stage of compilation is not reached, for example
           because an error is found during compilation, or
           because the "-fsyntax-only" option is being used.

       ----WWWWuuuunnnnddddeeeeccccllllaaaarrrreeeedddd----sssseeeelllleeeeccccttttoooorrrr
           Warn if a "@selector(...)" expression referring to an
           undeclared selector is found.  A selector is
           considered undeclared if no method with that name has
           been declared before the "@selector(...)" expression,
           either explicitly in an "@interface" or "@protocol"
           declaration, or implicitly in an "@implementation"
           section.  This option always performs its checks as
           soon as a "@selector(...)" expression is found, while
           "-Wselector" only performs its checks in the final
           stage of compilation.  This also enforces the coding
           style convention that methods and selectors must be
           declared before being used.




2004-02-14                  gcc-3.3.3                          28





GCC(1)                         GNU                         GCC(1)


       OOOOppppttttiiiioooonnnnssss ttttoooo CCCCoooonnnnttttrrrroooollll DDDDiiiiaaaaggggnnnnoooossssttttiiiicccc MMMMeeeessssssssaaaaggggeeeessss FFFFoooorrrrmmmmaaaattttttttiiiinnnngggg

       Traditionally, diagnostic messages have been formatted
       irrespective of the output device's aspect (e.g. its
       width, ...).  The options described below can be used to
       control the diagnostic messages formatting algorithm, e.g.
       how many characters per line, how often source location
       information should be reported.  Right now, only the C++
       front end can honor these options.  However it is
       expected, in the near future, that the remaining front
       ends would be able to digest them correctly.

       ----ffffmmmmeeeessssssssaaaaggggeeee----lllleeeennnnggggtttthhhh====_n
           Try to format error messages so that they fit on lines
           of about _n characters.  The default is 72 characters
           for gggg++++++++ and 0 for the rest of the front ends supported
           by GCC.  If _n is zero, then no line-wrapping will be
           done; each error message will appear on a single line.

       ----ffffddddiiiiaaaaggggnnnnoooossssttttiiiiccccssss----sssshhhhoooowwww----llllooooccccaaaattttiiiioooonnnn====oooonnnncccceeee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit _o_n_c_e source
           location information; that is, in case the message is
           too long to fit on a single physical line and has to
           be wrapped, the source location won't be emitted (as
           prefix) again, over and over, in subsequent
           continuation lines.  This is the default behavior.

       ----ffffddddiiiiaaaaggggnnnnoooossssttttiiiiccccssss----sssshhhhoooowwww----llllooooccccaaaattttiiiioooonnnn====eeeevvvveeeerrrryyyy----lllliiiinnnneeee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit the same source
           location information (as prefix) for physical lines
           that result from the process of breaking a message
           which is too long to fit on a single line.

       OOOOppppttttiiiioooonnnnssss ttttoooo RRRReeeeqqqquuuueeeesssstttt oooorrrr SSSSuuuupppppppprrrreeeessssssss WWWWaaaarrrrnnnniiiinnnnggggssss

       Warnings are diagnostic messages that report constructions
       which are not inherently erroneous but which are risky or
       suggest there may have been an error.

       You can request many specific warnings with options
       beginning ----WWWW, for example ----WWWWiiiimmmmpppplllliiiicccciiiitttt to request warnings
       on implicit declarations.  Each of these specific warning
       options also has a negative form beginning ----WWWWnnnnoooo---- to turn
       off warnings; for example, ----WWWWnnnnoooo----iiiimmmmpppplllliiiicccciiiitttt.  This manual
       lists only one of the two forms, whichever is not the
       default.

       The following options control the amount and kinds of
       warnings produced by GCC; for further, language-specific
       options also refer to @ref{C++ Dialect Options} and
       @ref{Objective-C Dialect Options}.




2004-02-14                  gcc-3.3.3                          29





GCC(1)                         GNU                         GCC(1)


       ----ffffssssyyyynnnnttttaaaaxxxx----oooonnnnllllyyyy
           Check the code for syntax errors, but don't do
           anything beyond that.

       ----ppppeeeeddddaaaannnnttttiiiicccc
           Issue all the warnings demanded by strict ISO C and
           ISO C++; reject all programs that use forbidden
           extensions, and some other programs that do not follow
           ISO C and ISO C++.  For ISO C, follows the version of
           the ISO C standard specified by any ----ssssttttdddd option used.

           Valid ISO C and ISO C++ programs should compile
           properly with or without this option (though a rare
           few will require ----aaaannnnssssiiii or a ----ssssttttdddd option specifying the
           required version of ISO C).  However, without this
           option, certain GNU extensions and traditional C and
           C++ features are supported as well.  With this option,
           they are rejected.

           ----ppppeeeeddddaaaannnnttttiiiicccc does not cause warning messages for use of
           the alternate keywords whose names begin and end with
           ________.  Pedantic warnings are also disabled in the
           expression that follows "__extension__".  However,
           only system header files should use these escape
           routes; application programs should avoid them.

           Some users try to use ----ppppeeeeddddaaaannnnttttiiiicccc to check programs for
           strict ISO C conformance.  They soon find that it does
           not do quite what they want: it finds some non-ISO
           practices, but not all---only those for which ISO C
           _r_e_q_u_i_r_e_s a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C
           might be useful in some instances, but would require
           considerable additional work and would be quite
           different from ----ppppeeeeddddaaaannnnttttiiiicccc.  We don't have plans to
           support such a feature in the near future.

           Where the standard specified with ----ssssttttdddd represents a
           GNU extended dialect of C, such as ggggnnnnuuuu88889999 or ggggnnnnuuuu99999999,
           there is a corresponding _b_a_s_e _s_t_a_n_d_a_r_d, the version of
           ISO C on which the GNU extended dialect is based.
           Warnings from ----ppppeeeeddddaaaannnnttttiiiicccc are given where they are
           required by the base standard.  (It would not make
           sense for such warnings to be given only for features
           not in the specified GNU C dialect, since by
           definition the GNU dialects of C include all features
           the compiler supports with the given option, and there
           would be nothing to warn about.)

       ----ppppeeeeddddaaaannnnttttiiiicccc----eeeerrrrrrrroooorrrrssss
           Like ----ppppeeeeddddaaaannnnttttiiiicccc, except that errors are produced rather
           than warnings.



2004-02-14                  gcc-3.3.3                          30





GCC(1)                         GNU                         GCC(1)


       ----wwww  Inhibit all warning messages.

       ----WWWWnnnnoooo----iiiimmmmppppoooorrrrtttt
           Inhibit warning messages about the use of ####iiiimmmmppppoooorrrrtttt.

       ----WWWWcccchhhhaaaarrrr----ssssuuuubbbbssssccccrrrriiiippppttttssss
           Warn if an array subscript has type "char".  This is a
           common cause of error, as programmers often forget
           that this type is signed on some machines.

       ----WWWWccccoooommmmmmmmeeeennnntttt
           Warn whenever a comment-start sequence ////**** appears in a
           ////**** comment, or whenever a Backslash-Newline appears in
           a //////// comment.

       ----WWWWffffoooorrrrmmmmaaaatttt
           Check calls to "printf" and "scanf", etc., to make
           sure that the arguments supplied have types
           appropriate to the format string specified, and that
           the conversions specified in the format string make
           sense.  This includes standard functions, and others
           specified by format attributes, in the "printf",
           "scanf", "strftime" and "strfmon" (an X/Open
           extension, not in the C standard) families.

           The formats are checked against the format features
           supported by GNU libc version 2.2.  These include all
           ISO C90 and C99 features, as well as features from the
           Single Unix Specification and some BSD and GNU
           extensions.  Other library implementations may not
           support all these features; GCC does not support
           warning about features that go beyond a particular
           library's limitations.  However, if ----ppppeeeeddddaaaannnnttttiiiicccc is used
           with ----WWWWffffoooorrrrmmmmaaaatttt, warnings will be given about format
           features not in the selected standard version (but not
           for "strfmon" formats, since those are not in any
           version of the C standard).

           Since ----WWWWffffoooorrrrmmmmaaaatttt also checks for null format arguments
           for several functions, ----WWWWffffoooorrrrmmmmaaaatttt also implies
           ----WWWWnnnnoooonnnnnnnnuuuullllllll.

           ----WWWWffffoooorrrrmmmmaaaatttt is included in ----WWWWaaaallllllll.  For more control over
           some aspects of format checking, the options ----WWWWnnnnoooo----
           ffffoooorrrrmmmmaaaatttt----yyyy2222kkkk, ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----eeeexxxxttttrrrraaaa----aaaarrrrggggssss, ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----zzzzeeeerrrroooo----
           lllleeeennnnggggtttthhhh, ----WWWWffffoooorrrrmmmmaaaatttt----nnnnoooonnnnlllliiiitttteeeerrrraaaallll, ----WWWWffffoooorrrrmmmmaaaatttt----sssseeeeccccuuuurrrriiiittttyyyy, and
           ----WWWWffffoooorrrrmmmmaaaatttt====2222 are available, but are not included in
           ----WWWWaaaallllllll.

       ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----yyyy2222kkkk
           If ----WWWWffffoooorrrrmmmmaaaatttt is specified, do not warn about "strftime"
           formats which may yield only a two-digit year.





2004-02-14                  gcc-3.3.3                          31





GCC(1)                         GNU                         GCC(1)


       ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----eeeexxxxttttrrrraaaa----aaaarrrrggggssss
           If ----WWWWffffoooorrrrmmmmaaaatttt is specified, do not warn about excess
           arguments to a "printf" or "scanf" format function.
           The C standard specifies that such arguments are
           ignored.

           Where the unused arguments lie between used arguments
           that are specified with $$$$ operand number
           specifications, normally warnings are still given,
           since the implementation could not know what type to
           pass to "va_arg" to skip the unused arguments.
           However, in the case of "scanf" formats, this option
           will suppress the warning if the unused arguments are
           all pointers, since the Single Unix Specification says
           that such unused arguments are allowed.

       ----WWWWnnnnoooo----ffffoooorrrrmmmmaaaatttt----zzzzeeeerrrroooo----lllleeeennnnggggtttthhhh
           If ----WWWWffffoooorrrrmmmmaaaatttt is specified, do not warn about zero-
           length formats.  The C standard specifies that zero-
           length formats are allowed.

       ----WWWWffffoooorrrrmmmmaaaatttt----nnnnoooonnnnlllliiiitttteeeerrrraaaallll
           If ----WWWWffffoooorrrrmmmmaaaatttt is specified, also warn if the format
           string is not a string literal and so cannot be
           checked, unless the format function takes its format
           arguments as a "va_list".

       ----WWWWffffoooorrrrmmmmaaaatttt----sssseeeeccccuuuurrrriiiittttyyyy
           If ----WWWWffffoooorrrrmmmmaaaatttt is specified, also warn about uses of
           format functions that represent possible security
           problems.  At present, this warns about calls to
           "printf" and "scanf" functions where the format string
           is not a string literal and there are no format
           arguments, as in "printf (foo);".  This may be a
           security hole if the format string came from untrusted
           input and contains %%%%nnnn.  (This is currently a subset of
           what ----WWWWffffoooorrrrmmmmaaaatttt----nnnnoooonnnnlllliiiitttteeeerrrraaaallll warns about, but in future
           warnings may be added to ----WWWWffffoooorrrrmmmmaaaatttt----sssseeeeccccuuuurrrriiiittttyyyy that are
           not included in ----WWWWffffoooorrrrmmmmaaaatttt----nnnnoooonnnnlllliiiitttteeeerrrraaaallll.)

       ----WWWWffffoooorrrrmmmmaaaatttt====2222
           Enable ----WWWWffffoooorrrrmmmmaaaatttt plus format checks not included in
           ----WWWWffffoooorrrrmmmmaaaatttt.  Currently equivalent to ----WWWWffffoooorrrrmmmmaaaatttt ----WWWWffffoooorrrrmmmmaaaatttt----
           nnnnoooonnnnlllliiiitttteeeerrrraaaallll ----WWWWffffoooorrrrmmmmaaaatttt----sssseeeeccccuuuurrrriiiittttyyyy.

       ----WWWWnnnnoooonnnnnnnnuuuullllllll
           Warn about passing a null pointer for arguments marked
           as requiring a non-null value by the "nonnull"
           function attribute.

           ----WWWWnnnnoooonnnnnnnnuuuullllllll is included in ----WWWWaaaallllllll and ----WWWWffffoooorrrrmmmmaaaatttt.  It can
           be disabled with the ----WWWWnnnnoooo----nnnnoooonnnnnnnnuuuullllllll option.





2004-02-14                  gcc-3.3.3                          32





GCC(1)                         GNU                         GCC(1)


       ----WWWWiiiimmmmpppplllliiiicccciiiitttt----iiiinnnntttt
           Warn when a declaration does not specify a type.

       ----WWWWiiiimmmmpppplllliiiicccciiiitttt----ffffuuuunnnnccccttttiiiioooonnnn----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnn
       ----WWWWeeeerrrrrrrroooorrrr----iiiimmmmpppplllliiiicccciiiitttt----ffffuuuunnnnccccttttiiiioooonnnn----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnn
           Give a warning (or error) whenever a function is used
           before being declared.

       ----WWWWiiiimmmmpppplllliiiicccciiiitttt
           Same as ----WWWWiiiimmmmpppplllliiiicccciiiitttt----iiiinnnntttt and ----WWWWiiiimmmmpppplllliiiicccciiiitttt----ffffuuuunnnnccccttttiiiioooonnnn----
           ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnn.

       ----WWWWmmmmaaaaiiiinnnn
           Warn if the type of mmmmaaaaiiiinnnn is suspicious.  mmmmaaaaiiiinnnn should
           be a function with external linkage, returning int,
           taking either zero arguments, two, or three arguments
           of appropriate types.

       ----WWWWmmmmiiiissssssssiiiinnnngggg----bbbbrrrraaaacccceeeessss
           Warn if an aggregate or union initializer is not fully
           bracketed.  In the following example, the initializer
           for aaaa is not fully bracketed, but that for bbbb is fully
           bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };


       ----WWWWppppaaaarrrreeeennnntttthhhheeeesssseeeessss
           Warn if parentheses are omitted in certain contexts,
           such as when there is an assignment in a context where
           a truth value is expected, or when operators are
           nested whose precedence people often get confused
           about.

           Also warn about constructions where there may be
           confusion to which "if" statement an "else" branch
           belongs.  Here is an example of such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C, every "else" branch belongs to the innermost
           possible "if" statement, which in this example is "if
           (b)".  This is often not what the programmer expected,
           as illustrated in the above example by indentation the
           programmer chose.  When there is the potential for
           this confusion, GCC will issue a warning when this
           flag is specified.  To eliminate the warning, add



2004-02-14                  gcc-3.3.3                          33





GCC(1)                         GNU                         GCC(1)


           explicit braces around the innermost "if" statement so
           there is no way the "else" could belong to the
           enclosing "if".  The resulting code would look like
           this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }


       ----WWWWsssseeeeqqqquuuueeeennnncccceeee----ppppooooiiiinnnntttt
           Warn about code that may have undefined semantics
           because of violations of sequence point rules in the C
           standard.

           The C standard defines the order in which expressions
           in a C program are evaluated in terms of _s_e_q_u_e_n_c_e
           _p_o_i_n_t_s, which represent a partial ordering between the
           execution of parts of the program: those executed
           before the sequence point, and those executed after
           it.  These occur after the evaluation of a full
           expression (one which is not part of a larger
           expression), after the evaluation of the first operand
           of a "&&", "||", "? :" or "," (comma) operator, before
           a function is called (but after the evaluation of its
           arguments and the expression denoting the called
           function), and in certain other places.  Other than as
           expressed by the sequence point rules, the order of
           evaluation of subexpressions of an expression is not
           specified.  All these rules describe only a partial
           order rather than a total order, since, for example,
           if two functions are called within one expression with
           no sequence point between them, the order in which the
           functions are called is not specified.  However, the
           standards committee have ruled that function calls do
           not overlap.

           It is not specified when between sequence points
           modifications to the values of objects take effect.
           Programs whose behavior depends on this have undefined
           behavior; the C standard specifies that ``Between the
           previous and next sequence point an object shall have
           its stored value modified at most once by the
           evaluation of an expression.  Furthermore, the prior
           value shall be read only to determine the value to be
           stored.''.  If a program breaks these rules, the
           results on any particular implementation are entirely
           unpredictable.



2004-02-14                  gcc-3.3.3                          34





GCC(1)                         GNU                         GCC(1)


           Examples of code with undefined behavior are "a =
           a++;", "a[n] = b[n++]" and "a[i++] = i;".  Some more
           complicated cases are not diagnosed by this option,
           and it may give an occasional false positive result,
           but in general it has been found fairly effective at
           detecting this sort of problem in programs.

           The present implementation of this option only works
           for C programs.  A future implementation may also work
           for C++ programs.

           The C standard is worded confusingly, therefore there
           is some debate over the precise meaning of the
           sequence point rules in subtle cases.  Links to
           discussions of the problem, including proposed formal
           definitions, may be found on our readings page, at
           <hhhhttttttttpppp::::////////ggggcccccccc....ggggnnnnuuuu....oooorrrrgggg////rrrreeeeaaaaddddiiiinnnnggggssss....hhhhttttmmmmllll>.

       ----WWWWrrrreeeettttuuuurrrrnnnn----ttttyyyyppppeeee
           Warn whenever a function is defined with a return-type
           that defaults to "int".  Also warn about any "return"
           statement with no return-value in a function whose
           return-type is not "void".

           For C++, a function without return type always
           produces a diagnostic message, even when ----WWWWnnnnoooo----rrrreeeettttuuuurrrrnnnn----
           ttttyyyyppppeeee is specified.  The only exceptions are mmmmaaaaiiiinnnn and
           functions defined in system headers.

       ----WWWWsssswwwwiiiittttcccchhhh
           Warn whenever a "switch" statement has an index of
           enumeral type and lacks a "case" for one or more of
           the named codes of that enumeration.  (The presence of
           a "default" label prevents this warning.)  "case"
           labels outside the enumeration range also provoke
           warnings when this option is used.

       ----WWWWsssswwwwiiiittttcccchhhh----ddddeeeeffffaaaauuuulllltttt
           Warn whenever a "switch" statement does not have a
           "default" case.

       ----WWWWsssswwwwiiiittttcccchhhh----eeeennnnuuuummmm
           Warn whenever a "switch" statement has an index of
           enumeral type and lacks a "case" for one or more of
           the named codes of that enumeration.  "case" labels
           outside the enumeration range also provoke warnings
           when this option is used.

       ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss
           Warn if any trigraphs are encountered that might
           change the meaning of the program (trigraphs within
           comments are not warned about).





2004-02-14                  gcc-3.3.3                          35





GCC(1)                         GNU                         GCC(1)


       ----WWWWuuuunnnnuuuusssseeeedddd----ffffuuuunnnnccccttttiiiioooonnnn
           Warn whenever a static function is declared but not
           defined or a non\-inline static function is unused.

       ----WWWWuuuunnnnuuuusssseeeedddd----llllaaaabbbbeeeellll
           Warn whenever a label is declared but not used.

           To suppress this warning use the uuuunnnnuuuusssseeeedddd attribute.

       ----WWWWuuuunnnnuuuusssseeeedddd----ppppaaaarrrraaaammmmeeeetttteeeerrrr
           Warn whenever a function parameter is unused aside
           from its declaration.

           To suppress this warning use the uuuunnnnuuuusssseeeedddd attribute.

       ----WWWWuuuunnnnuuuusssseeeedddd----vvvvaaaarrrriiiiaaaabbbblllleeee
           Warn whenever a local variable or non-constant static
           variable is unused aside from its declaration

           To suppress this warning use the uuuunnnnuuuusssseeeedddd attribute.

       ----WWWWuuuunnnnuuuusssseeeedddd----vvvvaaaalllluuuueeee
           Warn whenever a statement computes a result that is
           explicitly not used.

           To suppress this warning cast the expression to vvvvooooiiiidddd.

       ----WWWWuuuunnnnuuuusssseeeedddd
           All the above ----WWWWuuuunnnnuuuusssseeeedddd options combined.

           In order to get a warning about an unused function
           parameter, you must either specify ----WWWW ----WWWWuuuunnnnuuuusssseeeedddd or
           separately specify ----WWWWuuuunnnnuuuusssseeeedddd----ppppaaaarrrraaaammmmeeeetttteeeerrrr.

       ----WWWWuuuunnnniiiinnnniiiittttiiiiaaaalllliiiizzzzeeeedddd
           Warn if an automatic variable is used without first
           being initialized or if a variable may be clobbered by
           a "setjmp" call.

           These warnings are possible only in optimizing
           compilation, because they require data flow
           information that is computed only when optimizing.  If
           you don't specify ----OOOO, you simply won't get these
           warnings.

           These warnings occur only for variables that are
           candidates for register allocation.  Therefore, they
           do not occur for a variable that is declared
           "volatile", or whose address is taken, or whose size
           is other than 1, 2, 4 or 8 bytes.  Also, they do not
           occur for structures, unions or arrays, even when they
           are in registers.

           Note that there may be no warning about a variable



2004-02-14                  gcc-3.3.3                          36





GCC(1)                         GNU                         GCC(1)


           that is used only to compute a value that itself is
           never used, because such computations may be deleted
           by data flow analysis before the warnings are printed.

           These warnings are made optional because GCC is not
           smart enough to see all the reasons why the code might
           be correct despite appearing to have an error.  Here
           is one example of how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is
           always initialized, but GCC doesn't know this.  Here
           is another common case:

                   {
                     int save_y;
                     if (change_y) save_y = y, y = new_y;
                     ...
                     if (change_y) y = save_y;
                   }

           This has no bug because "save_y" is used only if it is
           set.

           This option also warns when a non-volatile automatic
           variable might be changed by a call to "longjmp".
           These warnings as well are possible only in optimizing
           compilation.

           The compiler sees only the calls to "setjmp".  It
           cannot know where "longjmp" will be called; in fact, a
           signal handler could call it at any point in the code.
           As a result, you may get a warning even when there is
           in fact no problem because "longjmp" cannot in fact be
           called at the place which would cause a problem.

           Some spurious warnings can be avoided if you declare
           all the functions you use that never return as
           "noreturn".

       ----WWWWuuuunnnnkkkknnnnoooowwwwnnnn----pppprrrraaaaggggmmmmaaaassss
           Warn when a #pragma directive is encountered which is



2004-02-14                  gcc-3.3.3                          37





GCC(1)                         GNU                         GCC(1)


           not understood by GCC.  If this command line option is
           used, warnings will even be issued for unknown pragmas
           in system header files.  This is not the case if the
           warnings were only enabled by the ----WWWWaaaallllllll command line
           option.

       ----WWWWssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg
           This option is only active when ----ffffssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg is
           active.  It warns about code which might break the
           strict aliasing rules that the compiler is using for
           optimization. The warning does not catch all cases,
           but does attempt to catch the more common pitfalls. It
           is included in ----WWWWaaaallllllll.

       ----WWWWaaaallllllll
           All of the above ----WWWW options combined.  This enables
           all the warnings about constructions that some users
           consider questionable, and that are easy to avoid (or
           modify to prevent the warning), even in conjunction
           with macros.  This also enables some language-specific
           warnings described in @ref{C++ Dialect Options} and
           @ref{Objective-C Dialect Options}.

       The following ----WWWW............ options are not implied by ----WWWWaaaallllllll.
       Some of them warn about constructions that users generally
       do not consider questionable, but which occasionally you
       might wish to check for; others warn about constructions
       that are necessary or hard to avoid in some cases, and
       there is no simple way to modify the code to suppress the
       warning.

       ----WWWW  Print extra warning messages for these events:

           +o   A function can return either with or without a
               value.  (Falling off the end of the function body
               is considered returning without a value.)  For
               example, this function would evoke such a warning:

                       foo (a)
                       {
                         if (a > 0)
                           return a;
                       }


           +o   An expression-statement or the left-hand side of a
               comma expression contains no side effects.  To
               suppress the warning, cast the unused expression
               to void.  For example, an expression such as
               xxxx[[[[iiii,,,,jjjj]]]] will cause a warning, but xxxx[[[[((((vvvvooooiiiidddd))))iiii,,,,jjjj]]]] will
               not.

           +o   An unsigned value is compared against zero with <<<<
               or >>>>====.



2004-02-14                  gcc-3.3.3                          38





GCC(1)                         GNU                         GCC(1)


           +o   A comparison like xxxx<<<<====yyyy<<<<====zzzz appears; this is
               equivalent to ((((xxxx<<<<====yyyy ???? 1111 :::: 0000)))) <<<<==== zzzz, which is a
               different interpretation from that of ordinary
               mathematical notation.

           +o   Storage-class specifiers like "static" are not the
               first things in a declaration.  According to the C
               Standard, this usage is obsolescent.

           +o   The return type of a function has a type qualifier
               such as "const".  Such a type qualifier has no
               effect, since the value returned by a function is
               not an lvalue.  (But don't warn about the GNU
               extension of "volatile void" return types.  That
               extension will be warned about if ----ppppeeeeddddaaaannnnttttiiiicccc is
               specified.)

           +o   If ----WWWWaaaallllllll or ----WWWWuuuunnnnuuuusssseeeedddd is also specified, warn about
               unused arguments.

           +o   A comparison between signed and unsigned values
               could produce an incorrect result when the signed
               value is converted to unsigned.  (But don't warn
               if ----WWWWnnnnoooo----ssssiiiiggggnnnn----ccccoooommmmppppaaaarrrreeee is also specified.)

           +o   An aggregate has a partly bracketed initializer.
               For example, the following code would evoke such a
               warning, because braces are missing around the
               initializer for "x.h":

                       struct s { int f, g; };
                       struct t { struct s h; int i; };
                       struct t x = { 1, 2, 3 };


           +o   An aggregate has an initializer which does not
               initialize all members.  For example, the
               following code would cause such a warning, because
               "x.h" would be implicitly initialized to zero:

                       struct s { int f, g, h; };
                       struct s x = { 3, 4 };


       ----WWWWnnnnoooo----ddddiiiivvvv----bbbbyyyy----zzzzeeeerrrroooo
           Do not warn about compile-time integer division by
           zero.  Floating point division by zero is not warned
           about, as it can be a legitimate way of obtaining
           infinities and NaNs.

       ----WWWWssssyyyysssstttteeeemmmm----hhhheeeeaaaaddddeeeerrrrssss
           Print warning messages for constructs found in system
           header files.  Warnings from system headers are
           normally suppressed, on the assumption that they



2004-02-14                  gcc-3.3.3                          39





GCC(1)                         GNU                         GCC(1)


           usually do not indicate real problems and would only
           make the compiler output harder to read.  Using this
           command line option tells GCC to emit warnings from
           system headers as if they occurred in user code.
           However, note that using ----WWWWaaaallllllll in conjunction with
           this option will _n_o_t warn about unknown pragmas in
           system headers---for that, ----WWWWuuuunnnnkkkknnnnoooowwwwnnnn----pppprrrraaaaggggmmmmaaaassss must also
           be used.

       ----WWWWffffllllooooaaaatttt----eeeeqqqquuuuaaaallll
           Warn if floating point values are used in equality
           comparisons.

           The idea behind this is that sometimes it is
           convenient (for the programmer) to consider floating-
           point values as approximations to infinitely precise
           real numbers.  If you are doing this, then you need to
           compute (by analyzing the code, or in some other way)
           the maximum or likely maximum error that the
           computation introduces, and allow for it when
           performing comparisons (and when producing output, but
           that's a different problem).  In particular, instead
           of testing for equality, you would check to see
           whether the two values have ranges that overlap; and
           this is done with the relational operators, so
           equality comparisons are probably mistaken.

       ----WWWWttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll (C only)
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent,
           and/or problematic constructs which should be avoided.

           +o   Macro parameters that appear within string
               literals in the macro body.  In traditional C
               macro replacement takes place within string
               literals, but does not in ISO C.

           +o   In traditional C, some preprocessor directives did
               not exist.  Traditional preprocessors would only
               consider a line to be a directive if the ####
               appeared in column 1 on the line.  Therefore
               ----WWWWttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll warns about directives that
               traditional C understands but would ignore because
               the #### does not appear as the first character on
               the line.  It also suggests you hide directives
               like ####pppprrrraaaaggggmmmmaaaa not understood by traditional C by
               indenting them.  Some traditional implementations
               would not recognize ####eeeelllliiiiffff, so it suggests avoiding
               it altogether.

           +o   A function-like macro that appears without
               arguments.




2004-02-14                  gcc-3.3.3                          40





GCC(1)                         GNU                         GCC(1)


           +o   The unary plus operator.

           +o   The UUUU integer constant suffix, or the FFFF or LLLL
               floating point constant suffixes.  (Traditional C
               does support the LLLL suffix on integer constants.)
               Note, these suffixes appear in macros defined in
               the system headers of most modern systems, e.g.
               the ____MMMMIIIINNNN/____MMMMAAAAXXXX macros in "<limits.h>".  Use of
               these macros in user code might normally lead to
               spurious warnings, however gcc's integrated
               preprocessor has enough context to avoid warning
               in these cases.

           +o   A function declared external in one block and then
               used after the end of the block.

           +o   A "switch" statement has an operand of type
               "long".

           +o   A non-"static" function declaration follows a
               "static" one.  This construct is not accepted by
               some traditional C compilers.

           +o   The ISO type of an integer constant has a
               different width or signedness from its traditional
               type.  This warning is only issued if the base of
               the constant is ten.  I.e. hexadecimal or octal
               values, which typically represent bit patterns,
               are not warned about.

           +o   Usage of ISO string concatenation is detected.

           +o   Initialization of automatic aggregates.

           +o   Identifier conflicts with labels.  Traditional C
               lacks a separate namespace for labels.

           +o   Initialization of unions.  If the initializer is
               zero, the warning is omitted.  This is done under
               the assumption that the zero initializer in user
               code appears conditioned on e.g. "__STDC__" to
               avoid missing initializer warnings and relies on
               default initialization to zero in the traditional
               C case.

           +o   Conversions by prototypes between fixed/floating
               point values and vice versa.  The absence of these
               prototypes when compiling with traditional C would
               cause serious problems.  This is a subset of the
               possible conversion warnings, for the full set use
               ----WWWWccccoooonnnnvvvveeeerrrrssssiiiioooonnnn.

           +o   Use of ISO C style function definitions.  This
               warning intentionally is _n_o_t issued for prototype



2004-02-14                  gcc-3.3.3                          41





GCC(1)                         GNU                         GCC(1)


               declarations or variadic functions because these
               ISO C features will appear in your code when using
               libiberty's traditional C compatibility macros,
               "PARAMS" and "VPARAMS".  This warning is also
               bypassed for nested functions because that feature
               is already a gcc extension and thus not relevant
               to traditional C compatibility.

       ----WWWWuuuunnnnddddeeeeffff
           Warn if an undefined identifier is evaluated in an ####iiiiffff
           directive.

       ----WWWWeeeennnnddddiiiiffff----llllaaaabbbbeeeellllssss
           Warn whenever an ####eeeellllsssseeee or an ####eeeennnnddddiiiiffff are followed by
           text.

       ----WWWWsssshhhhaaaaddddoooowwww
           Warn whenever a local variable shadows another local
           variable, parameter or global variable or whenever a
           built-in function is shadowed.

       ----WWWWllllaaaarrrrggggeeeerrrr----tttthhhhaaaannnn----_l_e_n
           Warn whenever an object of larger than _l_e_n bytes is
           defined.

       ----WWWWppppooooiiiinnnntttteeeerrrr----aaaarrrriiiitttthhhh
           Warn about anything that depends on the ``size of'' a
           function type or of "void".  GNU C assigns these types
           a size of 1, for convenience in calculations with
           "void *" pointers and pointers to functions.

       ----WWWWbbbbaaaadddd----ffffuuuunnnnccccttttiiiioooonnnn----ccccaaaasssstttt (C only)
           Warn whenever a function call is cast to a non-
           matching type.  For example, warn if "int malloc()" is
           cast to "anything *".

       ----WWWWccccaaaasssstttt----qqqquuuuaaaallll
           Warn whenever a pointer is cast so as to remove a type
           qualifier from the target type.  For example, warn if
           a "const char *" is cast to an ordinary "char *".

       ----WWWWccccaaaasssstttt----aaaalllliiiiggggnnnn
           Warn whenever a pointer is cast such that the required
           alignment of the target is increased.  For example,
           warn if a "char *" is cast to an "int *" on machines
           where integers can only be accessed at two- or four-
           byte boundaries.

       ----WWWWwwwwrrrriiiitttteeee----ssssttttrrrriiiinnnnggggssss
           When compiling C, give string constants the type
           "const char[length]" so that copying the address of
           one into a non-"const" "char *" pointer will get a
           warning; when compiling C++, warn about the deprecated
           conversion from string constants to "char *".  These



2004-02-14                  gcc-3.3.3                          42





GCC(1)                         GNU                         GCC(1)


           warnings will help you find at compile time code that
           can try to write into a string constant, but only if
           you have been very careful about using "const" in
           declarations and prototypes.  Otherwise, it will just
           be a nuisance; this is why we did not make ----WWWWaaaallllllll
           request these warnings.

       ----WWWWccccoooonnnnvvvveeeerrrrssssiiiioooonnnn
           Warn if a prototype causes a type conversion that is
           different from what would happen to the same argument
           in the absence of a prototype.  This includes
           conversions of fixed point to floating and vice versa,
           and conversions changing the width or signedness of a
           fixed point argument except when the same as the
           default promotion.

           Also, warn if a negative integer constant expression
           is implicitly converted to an unsigned type.  For
           example, warn about the assignment "x = -1" if "x" is
           unsigned.  But do not warn about explicit casts like
           "(unsigned) -1".

       ----WWWWssssiiiiggggnnnn----ccccoooommmmppppaaaarrrreeee
           Warn when a comparison between signed and unsigned
           values could produce an incorrect result when the
           signed value is converted to unsigned.  This warning
           is enabled by ----WWWW, and by ----WWWWaaaallllllll in C++ only.

       ----WWWWaaaaggggggggrrrreeeeggggaaaatttteeee----rrrreeeettttuuuurrrrnnnn
           Warn if any functions that return structures or unions
           are defined or called.  (In languages where you can
           return an array, this also elicits a warning.)

       ----WWWWssssttttrrrriiiicccctttt----pppprrrroooottttoooottttyyyyppppeeeessss (C only)
           Warn if a function is declared or defined without
           specifying the argument types.  (An old-style function
           definition is permitted without a warning if preceded
           by a declaration which specifies the argument types.)

       ----WWWWmmmmiiiissssssssiiiinnnngggg----pppprrrroooottttoooottttyyyyppppeeeessss (C only)
           Warn if a global function is defined without a
           previous prototype declaration.  This warning is
           issued even if the definition itself provides a
           prototype.  The aim is to detect global functions that
           fail to be declared in header files.

       ----WWWWmmmmiiiissssssssiiiinnnngggg----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnnssss (C only)
           Warn if a global function is defined without a
           previous declaration.  Do so even if the definition
           itself provides a prototype.  Use this option to
           detect global functions that are not declared in
           header files.





2004-02-14                  gcc-3.3.3                          43





GCC(1)                         GNU                         GCC(1)


       ----WWWWmmmmiiiissssssssiiiinnnngggg----nnnnoooorrrreeeettttuuuurrrrnnnn
           Warn about functions which might be candidates for
           attribute "noreturn".  Note these are only possible
           candidates, not absolute ones.  Care should be taken
           to manually verify functions actually do not ever
           return before adding the "noreturn" attribute,
           otherwise subtle code generation bugs could be
           introduced.  You will not get a warning for "main" in
           hosted C environments.

       ----WWWWmmmmiiiissssssssiiiinnnngggg----ffffoooorrrrmmmmaaaatttt----aaaattttttttrrrriiiibbbbuuuutttteeee
           If ----WWWWffffoooorrrrmmmmaaaatttt is enabled, also warn about functions
           which might be candidates for "format" attributes.
           Note these are only possible candidates, not absolute
           ones.  GCC will guess that "format" attributes might
           be appropriate for any function that calls a function
           like "vprintf" or "vscanf", but this might not always
           be the case, and some functions for which "format"
           attributes are appropriate may not be detected.  This
           option has no effect unless ----WWWWffffoooorrrrmmmmaaaatttt is enabled
           (possibly by ----WWWWaaaallllllll).

       ----WWWWnnnnoooo----mmmmuuuullllttttiiiicccchhhhaaaarrrr
           Do not warn if a multicharacter constant (''''FFFFOOOOOOOOFFFF'''') is
           used.  Usually they indicate a typo in the user's
           code, as they have implementation-defined values, and
           should not be used in portable code.

       ----WWWWnnnnoooo----ddddeeeepppprrrreeeeccccaaaatttteeeedddd----ddddeeeeccccllllaaaarrrraaaattttiiiioooonnnnssss
           Do not warn about uses of functions, variables, and
           types marked as deprecated by using the "deprecated"
           attribute.  (@pxref{Function Attributes},
           @pxref{Variable Attributes}, @pxref{Type Attributes}.)

       ----WWWWppppaaaacccckkkkeeeedddd
           Warn if a structure is given the packed attribute, but
           the packed attribute has no effect on the layout or
           size of the structure.  Such structures may be mis-
           aligned for little benefit.  For instance, in this
           code, the variable "f.x" in "struct bar" will be
           misaligned even though "struct bar" does not itself
           have the packed attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };






2004-02-14                  gcc-3.3.3                          44





GCC(1)                         GNU                         GCC(1)


       ----WWWWppppaaaaddddddddeeeedddd
           Warn if padding is included in a structure, either to
           align an element of the structure or to align the
           whole structure.  Sometimes when this happens it is
           possible to rearrange the fields of the structure to
           reduce the padding and so make the structure smaller.

       ----WWWWrrrreeeedddduuuunnnnddddaaaannnntttt----ddddeeeeccccllllssss
           Warn if anything is declared more than once in the
           same scope, even in cases where multiple declaration
           is valid and changes nothing.

       ----WWWWnnnneeeesssstttteeeedddd----eeeexxxxtttteeeerrrrnnnnssss (C only)
           Warn if an "extern" declaration is encountered within
           a function.

       ----WWWWuuuunnnnrrrreeeeaaaacccchhhhaaaabbbblllleeee----ccccooooddddeeee
           Warn if the compiler detects that code will never be
           executed.

           This option is intended to warn when the compiler
           detects that at least a whole line of source code will
           never be executed, because some condition is never
           satisfied or because it is after a procedure that
           never returns.

           It is possible for this option to produce a warning
           even though there are circumstances under which part
           of the affected line can be executed, so care should
           be taken when removing apparently-unreachable code.

           For instance, when a function is inlined, a warning
           may mean that the line is unreachable in only one
           inlined copy of the function.

           This option is not made part of ----WWWWaaaallllllll because in a
           debugging version of a program there is often
           substantial code which checks correct functioning of
           the program and is, hopefully, unreachable because the
           program does work.  Another common use of unreachable
           code is to provide behavior which is selectable at
           compile-time.

       ----WWWWiiiinnnnlllliiiinnnneeee
           Warn if a function can not be inlined and it was
           declared as inline.  Even with this option, the
           compiler will not warn about failures to inline
           functions declared in system headers.

           The compiler uses a variety of heuristics to determine
           whether or not to inline a function.  For example, the
           compiler takes into account the size of the function
           being inlined and the the amount of inlining that has
           already been done in the current function.  Therefore,



2004-02-14                  gcc-3.3.3                          45





GCC(1)                         GNU                         GCC(1)


           seemingly insignificant changes in the source program
           can cause the warnings produced by ----WWWWiiiinnnnlllliiiinnnneeee to appear
           or disappear.

       ----WWWWlllloooonnnngggg----lllloooonnnngggg
           Warn if lllloooonnnngggg lllloooonnnngggg type is used.  This is default.  To
           inhibit the warning messages, use ----WWWWnnnnoooo----lllloooonnnngggg----lllloooonnnngggg.
           Flags ----WWWWlllloooonnnngggg----lllloooonnnngggg and ----WWWWnnnnoooo----lllloooonnnngggg----lllloooonnnngggg are taken into
           account only when ----ppppeeeeddddaaaannnnttttiiiicccc flag is used.

       ----WWWWddddiiiissssaaaabbbblllleeeedddd----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnn
           Warn if a requested optimization pass is disabled.
           This warning does not generally indicate that there is
           anything wrong with your code; it merely indicates
           that GCC's optimizers were unable to handle the code
           effectively.  Often, the problem is that your code is
           too big or too complex; GCC will refuse to optimize
           programs when the optimization itself is likely to
           take inordinate amounts of time.

       ----WWWWeeeerrrrrrrroooorrrr
           Make all warnings into errors.

       OOOOppppttttiiiioooonnnnssss ffffoooorrrr DDDDeeeebbbbuuuuggggggggiiiinnnngggg YYYYoooouuuurrrr PPPPrrrrooooggggrrrraaaammmm oooorrrr GGGGCCCCCCCC

       GCC has various special options that are used for
       debugging either your program or GCC:

       ----gggg  Produce debugging information in the operating
           system's native format (stabs, COFF, XCOFF, or DWARF).
           GDB can work with this debugging information.

           On most systems that use stabs format, ----gggg enables use
           of extra debugging information that only GDB can use;
           this extra information makes debugging work better in
           GDB but will probably make other debuggers crash or
           refuse to read the program.  If you want to control
           for certain whether to generate the extra information,
           use ----ggggssssttttaaaabbbbssss++++, ----ggggssssttttaaaabbbbssss, ----ggggxxxxccccooooffffffff++++, ----ggggxxxxccccooooffffffff, ----ggggddddwwwwaaaarrrrffff----1111++++,
           ----ggggddddwwwwaaaarrrrffff----1111, or ----ggggvvvvmmmmssss (see below).

           Unlike most other C compilers, GCC allows you to use
           ----gggg with ----OOOO.  The shortcuts taken by optimized code may
           occasionally produce surprising results: some
           variables you declared may not exist at all; flow of
           control may briefly move where you did not expect it;
           some statements may not be executed because they
           compute constant results or their values were already
           at hand; some statements may execute in different
           places because they were moved out of loops.

           Nevertheless it proves possible to debug optimized
           output.  This makes it reasonable to use the optimizer
           for programs that might have bugs.



2004-02-14                  gcc-3.3.3                          46





GCC(1)                         GNU                         GCC(1)


           The following options are useful when GCC is generated
           with the capability for more than one debugging
           format.

       ----ggggggggddddbbbb
           Produce debugging information for use by GDB.  This
           means to use the most expressive format available
           (DWARF 2, stabs, or the native format if neither of
           those are supported), including GDB extensions if at
           all possible.

       ----ggggssssttttaaaabbbbssss
           Produce debugging information in stabs format (if that
           is supported), without GDB extensions.  This is the
           format used by DBX on most BSD systems.  On MIPS,
           Alpha and System V Release 4 systems this option
           produces stabs debugging output which is not
           understood by DBX or SDB.  On System V Release 4
           systems this option requires the GNU assembler.

       ----ggggssssttttaaaabbbbssss++++
           Produce debugging information in stabs format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program.

       ----ggggccccooooffffffff
           Produce debugging information in COFF format (if that
           is supported).  This is the format used by SDB on most
           System V systems prior to System V Release 4.

       ----ggggxxxxccccooooffffffff
           Produce debugging information in XCOFF format (if that
           is supported).  This is the format used by the DBX
           debugger on IBM RS/6000 systems.

       ----ggggxxxxccccooooffffffff++++
           Produce debugging information in XCOFF format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program, and may cause assemblers other than
           the GNU assembler (GAS) to fail with an error.

       ----ggggddddwwwwaaaarrrrffff
           Produce debugging information in DWARF version 1
           format (if that is supported).  This is the format
           used by SDB on most System V Release 4 systems.

           This option is deprecated.

       ----ggggddddwwwwaaaarrrrffff++++
           Produce debugging information in DWARF version 1



2004-02-14                  gcc-3.3.3                          47





GCC(1)                         GNU                         GCC(1)


           format (if that is supported), using GNU extensions
           understood only by the GNU debugger (GDB).  The use of
           these extensions is likely to make other debuggers
           crash or refuse to read the program.

           This option is deprecated.

       ----ggggddddwwwwaaaarrrrffff----2222
           Produce debugging information in DWARF version 2
           format (if that is supported).  This is the format
           used by DBX on IRIX 6.

       ----ggggvvvvmmmmssss
           Produce debugging information in VMS debug format (if
           that is supported).  This is the format used by DEBUG
           on VMS systems.

       ----gggg_l_e_v_e_l
       ----ggggggggddddbbbb_l_e_v_e_l
       ----ggggssssttttaaaabbbbssss_l_e_v_e_l
       ----ggggccccooooffffffff_l_e_v_e_l
       ----ggggxxxxccccooooffffffff_l_e_v_e_l
       ----ggggvvvvmmmmssss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to
           specify how much information.  The default level is 2.

           Level 1 produces minimal information, enough for
           making backtraces in parts of the program that you
           don't plan to debug.  This includes descriptions of
           functions and external variables, but no information
           about local variables and no line numbers.

           Level 3 includes extra information, such as all the
           macro definitions present in the program.  Some
           debuggers support macro expansion when you use ----gggg3333.

           Note that in order to avoid confusion between DWARF1
           debug level 2, and DWARF2, neither ----ggggddddwwwwaaaarrrrffff nor
           ----ggggddddwwwwaaaarrrrffff----2222 accept a concatenated debug level.  Instead
           use an additional ----gggg_l_e_v_e_l option to change the debug
           level for DWARF1 or DWARF2.

       ----ffffeeeelllliiiimmmmiiiinnnnaaaatttteeee----ddddwwwwaaaarrrrffff2222----dddduuuuppppssss
           Compress DWARF2 debugging information by eliminating
           duplicated information about each symbol.  This option
           only makes sense when generating DWARF2 debugging
           information with ----ggggddddwwwwaaaarrrrffff----2222.

       ----pppp  Generate extra code to write profile information
           suitable for the analysis program pppprrrrooooffff.  You must use
           this option when compiling the source files you want
           data about, and you must also use it when linking.





2004-02-14                  gcc-3.3.3                          48





GCC(1)                         GNU                         GCC(1)


       ----ppppgggg Generate extra code to write profile information
           suitable for the analysis program ggggpppprrrrooooffff.  You must use
           this option when compiling the source files you want
           data about, and you must also use it when linking.

       ----QQQQ  Makes the compiler print out each function name as it
           is compiled, and print some statistics about each pass
           when it finishes.

       ----ffffttttiiiimmmmeeee----rrrreeeeppppoooorrrrtttt
           Makes the compiler print some statistics about the
           time consumed by each pass when it finishes.

       ----ffffmmmmeeeemmmm----rrrreeeeppppoooorrrrtttt
           Makes the compiler print some statistics about
           permanent memory allocation when it finishes.

       ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss
           Instrument _a_r_c_s during compilation to generate
           coverage data or for profile-directed block ordering.
           During execution the program records how many times
           each branch is executed and how many times it is
           taken.  When the compiled program exits it saves this
           data to a file called _a_u_x_n_a_m_e_._d_a for each source file.
           _a_u_x_n_a_m_e is generated from the name of the output file,
           if explicitly specified and it is not the final
           executable, otherwise it is the basename of the source
           file. In both cases any suffix is removed (e.g.
           _f_o_o_._d_a for input file _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._d_a for
           output file specified as ----oooo ddddiiiirrrr////ffffoooooooo....oooo).

           For profile-directed block ordering, compile the
           program with ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss plus optimization and code
           generation options, generate the arc profile
           information by running the program on a selected
           workload, and then compile the program again with the
           same optimization and code generation options plus
           ----ffffbbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss.

           The other use of ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss is for use with ggggccccoooovvvv,
           when it is used with the ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee option.

           With ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss, for each function of your program
           GCC creates a program flow graph, then finds a
           spanning tree for the graph.  Only arcs that are not
           on the spanning tree have to be instrumented: the
           compiler adds code to count the number of times that
           these arcs are executed.  When an arc is the only exit
           or only entrance to a block, the instrumentation code
           can be added to the block; otherwise, a new basic
           block must be created to hold the instrumentation
           code.





2004-02-14                  gcc-3.3.3                          49





GCC(1)                         GNU                         GCC(1)


       ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee
           Create data files for the ggggccccoooovvvv code-coverage utility.
           See ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss option above for a description of
           _a_u_x_n_a_m_e.

           _a_u_x_n_a_m_e....bbbbbbbb
               A mapping from basic blocks to line numbers, which
               ggggccccoooovvvv uses to associate basic block execution
               counts with line numbers.

           _a_u_x_n_a_m_e....bbbbbbbbgggg
               A list of all arcs in the program flow graph.
               This allows ggggccccoooovvvv to reconstruct the program flow
               graph, so that it can compute all basic block and
               arc execution counts from the information in the
               _a_u_x_n_a_m_e_._d_a file.

           Use ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee with ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss; the latter
           option adds instrumentation to the program, which then
           writes execution counts to another data file:

           _a_u_x_n_a_m_e....ddddaaaa
               Runtime arc execution counts, used in conjunction
               with the arc information in the file _a_u_x_n_a_m_e_._b_b_g.

           Coverage data will map better to the source files if
           ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee is used without optimization.

       ----dddd_l_e_t_t_e_r_s
           Says to make debugging dumps during compilation at
           times specified by _l_e_t_t_e_r_s.  This is used for
           debugging the compiler.  The file names for most of
           the dumps are made by appending a pass number and a
           word to the _d_u_m_p_n_a_m_e. _d_u_m_p_n_a_m_e is generated from the
           name of the output file, if explicitly specified and
           it is not an executable, otherwise it is the basename
           of the source file. In both cases any suffix is
           removed (e.g.  _f_o_o_._0_0_._r_t_l or _f_o_o_._0_1_._s_i_b_l_i_n_g).  Here
           are the possible letters for use in _l_e_t_t_e_r_s, and their
           meanings:

           AAAA   Annotate the assembler output with miscellaneous
               debugging information.

           bbbb   Dump after computing branch probabilities, to
               _f_i_l_e_._1_4_._b_p.

           BBBB   Dump after block reordering, to _f_i_l_e_._3_2_._b_b_r_o.

           cccc   Dump after instruction combination, to the file
               _f_i_l_e_._1_9_._c_o_m_b_i_n_e.

           CCCC   Dump after the first if conversion, to the file
               _f_i_l_e_._1_5_._c_e_1.



2004-02-14                  gcc-3.3.3                          50





GCC(1)                         GNU                         GCC(1)


           dddd   Dump after delayed branch scheduling, to
               _f_i_l_e_._3_4_._d_b_r.

           DDDD   Dump all macro definitions, at the end of
               preprocessing, in addition to normal output.

           eeee   Dump after SSA optimizations, to _f_i_l_e_._0_4_._s_s_a and
               _f_i_l_e_._0_7_._u_s_s_a.

           EEEE   Dump after the second if conversion, to
               _f_i_l_e_._2_9_._c_e_3.

           ffff   Dump after control and data flow analysis, to
               _f_i_l_e_._1_4_._c_f_g.  Also dump after life analysis, to
               _f_i_l_e_._1_8_._l_i_f_e.

           FFFF   Dump after purging "ADDRESSOF" codes, to
               _f_i_l_e_._1_0_._a_d_d_r_e_s_s_o_f.

           gggg   Dump after global register allocation, to
               _f_i_l_e_._2_4_._g_r_e_g.

           GGGG   Dump after GCSE, to _f_i_l_e_._1_1_._g_c_s_e.

           hhhh   Dump after finalization of EH handling code, to
               _f_i_l_e_._0_2_._e_h.

           iiii   Dump after sibling call optimizations, to
               _f_i_l_e_._0_1_._s_i_b_l_i_n_g.

           jjjj   Dump after the first jump optimization, to
               _f_i_l_e_._0_3_._j_u_m_p.

           kkkk   Dump after conversion from registers to stack, to
               _f_i_l_e_._3_1_._s_t_a_c_k.

           llll   Dump after local register allocation, to
               _f_i_l_e_._2_3_._l_r_e_g.

           LLLL   Dump after loop optimization, to _f_i_l_e_._1_2_._l_o_o_p.

           MMMM   Dump after performing the machine dependent
               reorganization pass, to _f_i_l_e_._3_3_._m_a_c_h.

           nnnn   Dump after register renumbering, to _f_i_l_e_._2_8_._r_n_r_e_g.

           NNNN   Dump after the register move pass, to
               _f_i_l_e_._2_1_._r_e_g_m_o_v_e.

           oooo   Dump after post-reload optimizations, to
               _f_i_l_e_._2_5_._p_o_s_t_r_e_l_o_a_d.

           rrrr   Dump after RTL generation, to _f_i_l_e_._0_0_._r_t_l.




2004-02-14                  gcc-3.3.3                          51





GCC(1)                         GNU                         GCC(1)


           RRRR   Dump after the second scheduling pass, to
               _f_i_l_e_._3_0_._s_c_h_e_d_2.

           ssss   Dump after CSE (including the jump optimization
               that sometimes follows CSE), to _f_i_l_e_._0_9_._c_s_e.

           SSSS   Dump after the first scheduling pass, to
               _f_i_l_e_._2_2_._s_c_h_e_d.

           tttt   Dump after the second CSE pass (including the jump
               optimization that sometimes follows CSE), to
               _f_i_l_e_._1_7_._c_s_e_2.

           TTTT   Dump after running tracer, to _f_i_l_e_._1_6_._t_r_a_c_e_r.

           uuuu   Dump after null pointer elimination pass to
               _f_i_l_e_._0_8_._n_u_l_l.

           wwww   Dump after the second flow pass, to _f_i_l_e_._2_6_._f_l_o_w_2.

           WWWW   Dump after SSA conditional constant propagation,
               to _f_i_l_e_._0_5_._s_s_a_c_c_p.

           XXXX   Dump after SSA dead code elimination, to
               _f_i_l_e_._0_6_._s_s_a_d_c_e.

           zzzz   Dump after the peephole pass, to
               _f_i_l_e_._2_7_._p_e_e_p_h_o_l_e_2.

           aaaa   Produce all the dumps listed above.

           mmmm   Print statistics on memory usage, at the end of
               the run, to standard error.

           pppp   Annotate the assembler output with a comment
               indicating which pattern and alternative was used.
               The length of each instruction is also printed.

           PPPP   Dump the RTL in the assembler output as a comment
               before each instruction.  Also turns on ----ddddpppp
               annotation.

           vvvv   For each of the other indicated dump files (except
               for _f_i_l_e_._0_0_._r_t_l), dump a representation of the
               control flow graph suitable for viewing with VCG
               to _f_i_l_e_._p_a_s_s_._v_c_g.

           xxxx   Just generate RTL for a function instead of
               compiling it.  Usually used with rrrr.

           yyyy   Dump debugging information during parsing, to
               standard error.





2004-02-14                  gcc-3.3.3                          52





GCC(1)                         GNU                         GCC(1)


       ----ffffdddduuuummmmpppp----uuuunnnnnnnnuuuummmmbbbbeeeerrrreeeedddd
           When doing debugging dumps (see ----dddd option above),
           suppress instruction numbers and line number note
           output.  This makes it more feasible to use diff on
           debugging dumps for compiler invocations with
           different options, in particular with and without ----gggg.

       ----ffffdddduuuummmmpppp----ttttrrrraaaannnnssssllllaaaattttiiiioooonnnn----uuuunnnniiiitttt (C and C++ only)
       ----ffffdddduuuummmmpppp----ttttrrrraaaannnnssssllllaaaattttiiiioooonnnn----uuuunnnniiiitttt----_o_p_t_i_o_n_s (C and C++ only)
           Dump a representation of the tree structure for the
           entire translation unit to a file.  The file name is
           made by appending _._t_u to the source file name.  If the
           ----_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls the details of
           the dump as described for the ----ffffdddduuuummmmpppp----ttttrrrreeeeeeee options.

       ----ffffdddduuuummmmpppp----ccccllllaaaassssssss----hhhhiiiieeeerrrraaaarrrrcccchhhhyyyy (C++ only)
       ----ffffdddduuuummmmpppp----ccccllllaaaassssssss----hhhhiiiieeeerrrraaaarrrrcccchhhhyyyy----_o_p_t_i_o_n_s (C++ only)
           Dump a representation of each class's hierarchy and
           virtual function table layout to a file.  The file
           name is made by appending _._c_l_a_s_s to the source file
           name.  If the ----_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls
           the details of the dump as described for the ----ffffdddduuuummmmpppp----
           ttttrrrreeeeeeee options.

       ----ffffdddduuuummmmpppp----ttttrrrreeeeeeee----_s_w_i_t_c_h (C++ only)
       ----ffffdddduuuummmmpppp----ttttrrrreeeeeeee----_s_w_i_t_c_h----_o_p_t_i_o_n_s (C++ only)
           Control the dumping at various stages of processing
           the intermediate language tree to a file.  The file
           name is generated by appending a switch specific
           suffix to the source file name.  If the ----_o_p_t_i_o_n_s form
           is used, _o_p_t_i_o_n_s is a list of ---- separated options that
           control the details of the dump. Not all options are
           applicable to all dumps, those which are not
           meaningful will be ignored. The following options are
           available

           aaaaddddddddrrrreeeessssssss
               Print the address of each node.  Usually this is
               not meaningful as it changes according to the
               environment and source file. Its primary use is
               for tying up a dump file with a debug environment.

           sssslllliiiimmmm
               Inhibit dumping of members of a scope or body of a
               function merely because that scope has been
               reached. Only dump such items when they are
               directly reachable by some other path.

           aaaallllllll Turn on all options.

           The following tree dumps are possible:

           oooorrrriiiiggggiiiinnnnaaaallll
               Dump before any tree based optimization, to



2004-02-14                  gcc-3.3.3                          53





GCC(1)                         GNU                         GCC(1)


               _f_i_l_e_._o_r_i_g_i_n_a_l.

           ooooppppttttiiiimmmmiiiizzzzeeeedddd
               Dump after all tree based optimization, to
               _f_i_l_e_._o_p_t_i_m_i_z_e_d.

           iiiinnnnlllliiiinnnneeeedddd
               Dump after function inlining, to _f_i_l_e_._i_n_l_i_n_e_d.

       ----ffffrrrraaaannnnddddoooommmm----sssseeeeeeeedddd====_s_t_r_i_n_g
           This option provides a seed that GCC uses when it
           would otherwise use random numbers.  At present, this
           is used to generate certain symbol names that have to
           be different in every compiled file.

           The _s_t_r_i_n_g should be different for every file you
           compile.

       ----ffffsssscccchhhheeeedddd----vvvveeeerrrrbbbboooosssseeee====_n
           On targets that use instruction scheduling, this
           option controls the amount of debugging output the
           scheduler prints.  This information is written to
           standard error, unless ----ddddSSSS or ----ddddRRRR is specified, in
           which case it is output to the usual dump listing
           file, _._s_c_h_e_d or _._s_c_h_e_d_2 respectively.  However for _n
           greater than nine, the output is always printed to
           standard error.

           For _n greater than zero, ----ffffsssscccchhhheeeedddd----vvvveeeerrrrbbbboooosssseeee outputs the
           same information as ----ddddRRRRSSSS.  For _n greater than one, it
           also output basic block probabilities, detailed ready
           list information and unit/insn info.  For _n greater
           than two, it includes RTL at abort point, control-flow
           and regions info.  And for _n over four, ----ffffsssscccchhhheeeedddd----
           vvvveeeerrrrbbbboooosssseeee also includes dependence info.

       ----ssssaaaavvvveeee----tttteeeemmmmppppssss
           Store the usual ``temporary'' intermediate files
           permanently; place them in the current directory and
           name them based on the source file.  Thus, compiling
           _f_o_o_._c with ----cccc ----ssssaaaavvvveeee----tttteeeemmmmppppssss would produce files _f_o_o_._i
           and _f_o_o_._s, as well as _f_o_o_._o.  This creates a
           preprocessed _f_o_o_._i output file even though the
           compiler now normally uses an integrated preprocessor.

       ----ttttiiiimmmmeeee
           Report the CPU time taken by each subprocess in the
           compilation sequence.  For C source files, this is the
           compiler proper and assembler (plus the linker if
           linking is done).  The output looks like this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01




2004-02-14                  gcc-3.3.3                          54





GCC(1)                         GNU                         GCC(1)


           The first number on each line is the ``user time,''
           that is time spent executing the program itself.  The
           second number is ``system time,'' time spent executing
           operating system routines on behalf of the program.
           Both numbers are in seconds.

       ----pppprrrriiiinnnntttt----ffffiiiilllleeee----nnnnaaaammmmeeee====_l_i_b_r_a_r_y
           Print the full absolute name of the library file
           _l_i_b_r_a_r_y that would be used when linking---and don't do
           anything else.  With this option, GCC does not compile
           or link anything; it just prints the file name.

       ----pppprrrriiiinnnntttt----mmmmuuuullllttttiiii----ddddiiiirrrreeeeccccttttoooorrrryyyy
           Print the directory name corresponding to the multilib
           selected by any other switches present in the command
           line.  This directory is supposed to exist in
           GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX.

       ----pppprrrriiiinnnntttt----mmmmuuuullllttttiiii----lllliiiibbbb
           Print the mapping from multilib directory names to
           compiler switches that enable them.  The directory
           name is separated from the switches by ;;;;, and each
           switch starts with an @@@@}}}} iiiinnnnsssstttteeeeaaaadddd ooooffff tttthhhheeee @@@@ssssaaaammmmpppp{{{{----,
           without spaces between multiple switches.  This is
           supposed to ease shell-processing.

       ----pppprrrriiiinnnntttt----pppprrrroooogggg----nnnnaaaammmmeeee====_p_r_o_g_r_a_m
           Like ----pppprrrriiiinnnntttt----ffffiiiilllleeee----nnnnaaaammmmeeee, but searches for a program such
           as ccccpppppppp.

       ----pppprrrriiiinnnntttt----lllliiiibbbbggggcccccccc----ffffiiiilllleeee----nnnnaaaammmmeeee
           Same as ----pppprrrriiiinnnntttt----ffffiiiilllleeee----nnnnaaaammmmeeee====lllliiiibbbbggggcccccccc....aaaa.

           This is useful when you use ----nnnnoooossssttttddddlllliiiibbbb or
           ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss but you do want to link with _l_i_b_g_c_c_._a.
           You can do

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`


       ----pppprrrriiiinnnntttt----sssseeeeaaaarrrrcccchhhh----ddddiiiirrrrssss
           Print the name of the configured installation
           directory and a list of program and library
           directories gcc will search---and don't do anything
           else.

           This is useful when gcc prints the error message
           iiiinnnnssssttttaaaallllllllaaaattttiiiioooonnnn pppprrrroooobbbblllleeeemmmm,,,, ccccaaaannnnnnnnooootttt eeeexxxxeeeecccc ccccpppppppp0000:::: NNNNoooo ssssuuuucccchhhh ffffiiiilllleeee
           oooorrrr ddddiiiirrrreeeeccccttttoooorrrryyyy.  To resolve this you either need to put
           _c_p_p_0 and the other compiler components where gcc
           expects to find them, or you can set the environment
           variable GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX to the directory where you
           installed them.  Don't forget the trailing '/'.




2004-02-14                  gcc-3.3.3                          55





GCC(1)                         GNU                         GCC(1)


       ----dddduuuummmmppppmmmmaaaacccchhhhiiiinnnneeee
           Print the compiler's target machine (for example,
           iiii666688886666----ppppcccc----lllliiiinnnnuuuuxxxx----ggggnnnnuuuu)---and don't do anything else.

       ----dddduuuummmmppppvvvveeeerrrrssssiiiioooonnnn
           Print the compiler version (for example, 3333....0000)---and
           don't do anything else.

       ----dddduuuummmmppppssssppppeeeeccccssss
           Print the compiler's built-in specs---and don't do
           anything else.  (This is used when GCC itself is being
           built.)

       OOOOppppttttiiiioooonnnnssss TTTThhhhaaaatttt CCCCoooonnnnttttrrrroooollll OOOOppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnn

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to
       reduce the cost of compilation and to make debugging
       produce the expected results.  Statements are independent:
       if you stop the program with a breakpoint between
       statements, you can then assign a new value to any
       variable or change the program counter to any other
       statement in the function and get exactly the results you
       would expect from the source code.

       Turning on optimization flags makes the compiler attempt
       to improve the performance and/or code size at the expense
       of compilation time and possibly the ability to debug the
       program.

       Not all optimizations are controlled directly by a flag.
       Only optimizations that have a flag are listed.

       ----OOOO
       ----OOOO1111 Optimize.  Optimizing compilation takes somewhat more
           time, and a lot more memory for a large function.

           With ----OOOO, the compiler tries to reduce code size and
           execution time, without performing any optimizations
           that take a great deal of compilation time.

           ----OOOO turns on the following optimization flags: ----ffffddddeeeeffffeeeerrrr----
           ppppoooopppp ----ffffmmmmeeeerrrrggggeeee----ccccoooonnnnssssttttaaaannnnttttssss ----fffftttthhhhrrrreeeeaaaadddd----jjjjuuuummmmppppssss ----fffflllloooooooopppp----ooooppppttttiiiimmmmiiiizzzzeeee
           ----ffffccccrrrroooossssssssjjjjuuuummmmppppiiiinnnngggg ----ffffiiiiffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn ----ffffiiiiffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn2222
           ----ffffddddeeeellllaaaayyyyeeeedddd----bbbbrrrraaaannnncccchhhh ----ffffgggguuuueeeessssssss----bbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttyyyy ----ffffccccpppprrrroooopppp----
           rrrreeeeggggiiiisssstttteeeerrrrssss

           ----OOOO also turns on ----ffffoooommmmiiiitttt----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr on machines
           where doing so does not interfere with debugging.

       ----OOOO2222 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed
           tradeoff.  The compiler does not perform loop



2004-02-14                  gcc-3.3.3                          56





GCC(1)                         GNU                         GCC(1)


           unrolling or function inlining when you specify ----OOOO2222.
           As compared to ----OOOO, this option increases both
           compilation time and the performance of the generated
           code.

           ----OOOO2222 turns on all optimization flags specified by ----OOOO.
           It also turns on the following optimization flags:
           ----ffffffffoooorrrrcccceeee----mmmmeeeemmmm ----ffffooooppppttttiiiimmmmiiiizzzzeeee----ssssiiiibbbblllliiiinnnngggg----ccccaaaallllllllssss ----ffffssssttttrrrreeeennnnggggtttthhhh----rrrreeeedddduuuucccceeee
           ----ffffccccsssseeee----ffffoooolllllllloooowwww----jjjjuuuummmmppppssss  ----ffffccccsssseeee----sssskkkkiiiipppp----bbbblllloooocccckkkkssss ----ffffrrrreeeerrrruuuunnnn----ccccsssseeee----
           aaaafffftttteeeerrrr----lllloooooooopppp  ----ffffrrrreeeerrrruuuunnnn----lllloooooooopppp----oooopppptttt ----ffffggggccccsssseeee   ----ffffggggccccsssseeee----llllmmmm
           ----ffffggggccccsssseeee----ssssmmmm ----ffffddddeeeelllleeeetttteeee----nnnnuuuullllllll----ppppooooiiiinnnntttteeeerrrr----cccchhhheeeecccckkkkssss ----ffffeeeexxxxppppeeeennnnssssiiiivvvveeee----
           ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss ----ffffrrrreeeeggggmmmmoooovvvveeee ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss  ----ffffsssscccchhhheeeedddduuuulllleeee----
           iiiinnnnssssnnnnssss2222 ----ffffsssscccchhhheeeedddd----iiiinnnntttteeeerrrrbbbblllloooocccckkkk ----ffffsssscccchhhheeeedddd----ssssppppeeeecccc ----ffffccccaaaalllllllleeeerrrr----ssssaaaavvvveeeessss
           ----ffffppppeeeeeeeepppphhhhoooolllleeee2222 ----ffffrrrreeeeoooorrrrddddeeeerrrr----bbbblllloooocccckkkkssss  ----ffffrrrreeeeoooorrrrddddeeeerrrr----ffffuuuunnnnccccttttiiiioooonnnnssss
           ----ffffssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss  ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss
           ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss  ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss

           Please note the warning under ----ffffggggccccsssseeee about invoking
           ----OOOO2222 on programs that use computed gotos.

       ----OOOO3333 Optimize yet more.  ----OOOO3333 turns on all optimizations
           specified by ----OOOO2222 and also turns on the ----ffffiiiinnnnlllliiiinnnneeee----
           ffffuuuunnnnccccttttiiiioooonnnnssss and ----ffffrrrreeeennnnaaaammmmeeee----rrrreeeeggggiiiisssstttteeeerrrrssss options.

       ----OOOO0000 Do not optimize.  This is the default.

       ----OOOOssss Optimize for size.  ----OOOOssss enables all ----OOOO2222 optimizations
           that do not typically increase code size.  It also
           performs further optimizations designed to reduce code
           size.

           ----OOOOssss disables the following optimization flags:
           ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss  ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss  ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss
           ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss  ----ffffrrrreeeeoooorrrrddddeeeerrrr----bbbblllloooocccckkkkssss  ----ffffpppprrrreeeeffffeeeettttcccchhhh----lllloooooooopppp----
           aaaarrrrrrrraaaayyyyssss

           If you use multiple ----OOOO options, with or without level
           numbers, the last such option is the one that is
           effective.

       Options of the form ----ffff_f_l_a_g specify machine-independent
       flags.  Most flags have both positive and negative forms;
       the negative form of ----ffffffffoooooooo would be ----ffffnnnnoooo----ffffoooooooo.  In the
       table below, only one of the forms is listed---the one you
       typically will use.  You can figure out the other form by
       either removing nnnnoooo---- or adding it.

       The following options control specific optimizations.
       They are either activated by ----OOOO options or are related to
       ones that are.  You can use the following flags in the
       rare cases when ``fine-tuning'' of optimizations to be
       performed is desired.





2004-02-14                  gcc-3.3.3                          57





GCC(1)                         GNU                         GCC(1)


       ----ffffnnnnoooo----ddddeeeeffffaaaauuuulllltttt----iiiinnnnlllliiiinnnneeee
           Do not make member functions inline by default merely
           because they are defined inside the class scope (C++
           only).  Otherwise, when you specify ----OOOO, member
           functions defined inside class scope are compiled
           inline by default; i.e., you don't need to add iiiinnnnlllliiiinnnneeee
           in front of the member function name.

       ----ffffnnnnoooo----ddddeeeeffffeeeerrrr----ppppoooopppp
           Always pop the arguments to each function call as soon
           as that function returns.  For machines which must pop
           arguments after a function call, the compiler normally
           lets arguments accumulate on the stack for several
           function calls and pops them all at once.

           Disabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffffffoooorrrrcccceeee----mmmmeeeemmmm
           Force memory operands to be copied into registers
           before doing arithmetic on them.  This produces better
           code by making all memory references potential common
           subexpressions.  When they are not common
           subexpressions, instruction combination should
           eliminate the separate register-load.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffffffoooorrrrcccceeee----aaaaddddddddrrrr
           Force memory address constants to be copied into
           registers before doing arithmetic on them.  This may
           produce better code just as ----ffffffffoooorrrrcccceeee----mmmmeeeemmmm may.

       ----ffffoooommmmiiiitttt----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr
           Don't keep the frame pointer in a register for
           functions that don't need one.  This avoids the
           instructions to save, set up and restore frame
           pointers; it also makes an extra register available in
           many functions.  IIIItttt aaaallllssssoooo mmmmaaaakkkkeeeessss ddddeeeebbbbuuuuggggggggiiiinnnngggg iiiimmmmppppoooossssssssiiiibbbblllleeee oooonnnn
           ssssoooommmmeeee mmmmaaaacccchhhhiiiinnnneeeessss....

           On some machines, such as the VAX, this flag has no
           effect, because the standard calling sequence
           automatically handles the frame pointer and nothing is
           saved by pretending it doesn't exist.  The machine-
           description macro "FRAME_POINTER_REQUIRED" controls
           whether a target machine supports this flag.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffooooppppttttiiiimmmmiiiizzzzeeee----ssssiiiibbbblllliiiinnnngggg----ccccaaaallllllllssss
           Optimize sibling and tail recursive calls.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.




2004-02-14                  gcc-3.3.3                          58





GCC(1)                         GNU                         GCC(1)


       ----ffffnnnnoooo----iiiinnnnlllliiiinnnneeee
           Don't pay attention to the "inline" keyword.  Normally
           this option is used to keep the compiler from
           expanding any functions inline.  Note that if you are
           not optimizing, no functions can be expanded inline.

       ----ffffiiiinnnnlllliiiinnnneeee----ffffuuuunnnnccccttttiiiioooonnnnssss
           Integrate all simple functions into their callers.
           The compiler heuristically decides which functions are
           simple enough to be worth integrating in this way.

           If all calls to a given function are integrated, and
           the function is declared "static", then the function
           is normally not output as assembler code in its own
           right.

           Enabled at level ----OOOO3333.

       ----ffffiiiinnnnlllliiiinnnneeee----lllliiiimmmmiiiitttt====_n
           By default, gcc limits the size of functions that can
           be inlined.  This flag allows the control of this
           limit for functions that are explicitly marked as
           inline (i.e., marked with the inline keyword or
           defined within the class definition in c++).  _n is the
           size of functions that can be inlined in number of
           pseudo instructions (not counting parameter handling).
           The default value of _n is 600.  Increasing this value
           can result in more inlined code at the cost of
           compilation time and memory consumption.  Decreasing
           usually makes the compilation faster and less code
           will be inlined (which presumably means slower
           programs).  This option is particularly useful for
           programs that use inlining heavily such as those based
           on recursive templates with C++.

           Inlining is actually controlled by a number of
           parameters, which may be specified individually by
           using --------ppppaaaarrrraaaammmm _n_a_m_e====_v_a_l_u_e.  The ----ffffiiiinnnnlllliiiinnnneeee----lllliiiimmmmiiiitttt====_n option
           sets some of these parameters as follows:

            @item max-inline-insns
             is set to I<n>.
            @item max-inline-insns-single
             is set to I<n>/2.
            @item max-inline-insns-auto
             is set to I<n>/2.
            @item min-inline-insns
             is set to 130 or I<n>/4, whichever is smaller.
            @item max-inline-insns-rtl
             is set to I<n>.


           Using ----ffffiiiinnnnlllliiiinnnneeee----lllliiiimmmmiiiitttt====666600000000 thus results in the default
           settings for these parameters.  See below for a



2004-02-14                  gcc-3.3.3                          59





GCC(1)                         GNU                         GCC(1)


           documentation of the individual parameters controlling
           inlining.

           _N_o_t_e_: pseudo instruction represents, in this
           particular context, an abstract measurement of
           function's size.  In no way, it represents a count of
           assembly instructions and as such its exact meaning
           might change from one release to an another.

       ----ffffkkkkeeeeeeeepppp----iiiinnnnlllliiiinnnneeee----ffffuuuunnnnccccttttiiiioooonnnnssss
           Even if all calls to a given function are integrated,
           and the function is declared "static", nevertheless
           output a separate run-time callable version of the
           function.  This switch does not affect "extern inline"
           functions.

       ----ffffkkkkeeeeeeeepppp----ssssttttaaaattttiiiicccc----ccccoooonnnnssssttttssss
           Emit variables declared "static const" when
           optimization isn't turned on, even if the variables
           aren't referenced.

           GCC enables this option by default.  If you want to
           force the compiler to check if the variable was
           referenced, regardless of whether or not optimization
           is turned on, use the ----ffffnnnnoooo----kkkkeeeeeeeepppp----ssssttttaaaattttiiiicccc----ccccoooonnnnssssttttssss option.

       ----ffffmmmmeeeerrrrggggeeee----ccccoooonnnnssssttttaaaannnnttttssss
           Attempt to merge identical constants (string constants
           and floating point constants) across compilation
           units.

           This option is the default for optimized compilation
           if the assembler and linker support it.  Use ----ffffnnnnoooo----
           mmmmeeeerrrrggggeeee----ccccoooonnnnssssttttaaaannnnttttssss to inhibit this behavior.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffmmmmeeeerrrrggggeeee----aaaallllllll----ccccoooonnnnssssttttaaaannnnttttssss
           Attempt to merge identical constants and identical
           variables.

           This option implies ----ffffmmmmeeeerrrrggggeeee----ccccoooonnnnssssttttaaaannnnttttssss.  In addition to
           ----ffffmmmmeeeerrrrggggeeee----ccccoooonnnnssssttttaaaannnnttttssss this considers e.g. even constant
           initialized arrays or initialized constant variables
           with integral or floating point types.  Languages like
           C or C++ require each non-automatic variable to have
           distinct location, so using this option will result in
           non-conforming behavior.

       ----ffffnnnnoooo----bbbbrrrraaaannnncccchhhh----ccccoooouuuunnnntttt----rrrreeeegggg
           Do not use ``decrement and branch'' instructions on a
           count register, but instead generate a sequence of
           instructions that decrement a register, compare it
           against zero, then branch based upon the result.  This



2004-02-14                  gcc-3.3.3                          60





GCC(1)                         GNU                         GCC(1)


           option is only meaningful on architectures that
           support such instructions, which include x86, PowerPC,
           IA-64 and S/390.

           The default is ----ffffbbbbrrrraaaannnncccchhhh----ccccoooouuuunnnntttt----rrrreeeegggg, enabled when
           ----ffffssssttttrrrreeeennnnggggtttthhhh----rrrreeeedddduuuucccceeee is enabled.

       ----ffffnnnnoooo----ffffuuuunnnnccccttttiiiioooonnnn----ccccsssseeee
           Do not put function addresses in registers; make each
           instruction that calls a constant function contain the
           function's address explicitly.

           This option results in less efficient code, but some
           strange hacks that alter the assembler output may be
           confused by the optimizations performed when this
           option is not used.

           The default is ----ffffffffuuuunnnnccccttttiiiioooonnnn----ccccsssseeee

       ----ffffnnnnoooo----zzzzeeeerrrroooo----iiiinnnniiiittttiiiiaaaalllliiiizzzzeeeedddd----iiiinnnn----bbbbssssssss
           If the target supports a BSS section, GCC by default
           puts variables that are initialized to zero into BSS.
           This can save space in the resulting code.

           This option turns off this behavior because some
           programs explicitly rely on variables going to the
           data section.  E.g., so that the resulting executable
           can find the beginning of that section and/or make
           assumptions based on that.

           The default is ----ffffzzzzeeeerrrroooo----iiiinnnniiiittttiiiiaaaalllliiiizzzzeeeedddd----iiiinnnn----bbbbssssssss.

       ----ffffssssttttrrrreeeennnnggggtttthhhh----rrrreeeedddduuuucccceeee
           Perform the optimizations of loop strength reduction
           and elimination of iteration variables.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----fffftttthhhhrrrreeeeaaaadddd----jjjjuuuummmmppppssss
           Perform optimizations where we check to see if a jump
           branches to a location where another comparison
           subsumed by the first is found.  If so, the first
           branch is redirected to either the destination of the
           second branch or a point immediately following it,
           depending on whether the condition is known to be true
           or false.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffccccsssseeee----ffffoooolllllllloooowwww----jjjjuuuummmmppppssss
           In common subexpression elimination, scan through jump
           instructions when the target of the jump is not
           reached by any other path.  For example, when CSE
           encounters an "if" statement with an "else" clause,



2004-02-14                  gcc-3.3.3                          61





GCC(1)                         GNU                         GCC(1)


           CSE will follow the jump when the condition tested is
           false.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffccccsssseeee----sssskkkkiiiipppp----bbbblllloooocccckkkkssss
           This is similar to ----ffffccccsssseeee----ffffoooolllllllloooowwww----jjjjuuuummmmppppssss, but causes CSE
           to follow jumps which conditionally skip over blocks.
           When CSE encounters a simple "if" statement with no
           else clause, ----ffffccccsssseeee----sssskkkkiiiipppp----bbbblllloooocccckkkkssss causes CSE to follow
           the jump around the body of the "if".

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffrrrreeeerrrruuuunnnn----ccccsssseeee----aaaafffftttteeeerrrr----lllloooooooopppp
           Re-run common subexpression elimination after loop
           optimizations has been performed.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffrrrreeeerrrruuuunnnn----lllloooooooopppp----oooopppptttt
           Run the loop optimizer twice.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffggggccccsssseeee
           Perform a global common subexpression elimination
           pass.  This pass also performs global constant and
           copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a
           GCC extension, you may get better runtime performance
           if you disable the global common subexpression
           elimination pass by adding ----ffffnnnnoooo----ggggccccsssseeee to the command
           line.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffggggccccsssseeee----llllmmmm
           When ----ffffggggccccsssseeee----llllmmmm is enabled, global common subexpression
           elimination will attempt to move loads which are only
           killed by stores into themselves.  This allows a loop
           containing a load/store sequence to be changed to a
           load outside the loop, and a copy/store within the
           loop.

           Enabled by default when gcse is enabled.

       ----ffffggggccccsssseeee----ssssmmmm
           When ----ffffggggccccsssseeee----ssssmmmm is enabled, A store motion pass is run
           after global common subexpression elimination.  This
           pass will attempt to move stores out of loops.  When
           used in conjunction with ----ffffggggccccsssseeee----llllmmmm, loops containing a
           load/store sequence can be changed to a load before



2004-02-14                  gcc-3.3.3                          62





GCC(1)                         GNU                         GCC(1)


           the loop and a store after the loop.

           Enabled by default when gcse is enabled.

       ----fffflllloooooooopppp----ooooppppttttiiiimmmmiiiizzzzeeee
           Perform loop optimizations: move constant expressions
           out of loops, simplify exit test conditions and
           optionally do strength-reduction and loop unrolling as
           well.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffccccrrrroooossssssssjjjjuuuummmmppppiiiinnnngggg
           Perform cross-jumping transformation. This
           transformation unifies equivalent code and save code
           size. The resulting code may or may not perform better
           than without cross-jumping.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffiiiiffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn
           Attempt to transform conditional jumps into branch-
           less equivalents.  This include use of conditional
           moves, min, max, set flags and abs instructions, and
           some tricks doable by standard arithmetics.  The use
           of conditional execution on chips where it is
           available is controlled by "if-conversion2".

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffiiiiffff----ccccoooonnnnvvvveeeerrrrssssiiiioooonnnn2222
           Use conditional execution (where available) to
           transform conditional jumps into branch-less
           equivalents.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffddddeeeelllleeeetttteeee----nnnnuuuullllllll----ppppooooiiiinnnntttteeeerrrr----cccchhhheeeecccckkkkssss
           Use global dataflow analysis to identify and eliminate
           useless checks for null pointers.  The compiler
           assumes that dereferencing a null pointer would have
           halted the program.  If a pointer is checked after it
           has already been dereferenced, it cannot be null.

           In some environments, this assumption is not true, and
           programs can safely dereference null pointers.  Use
           ----ffffnnnnoooo----ddddeeeelllleeeetttteeee----nnnnuuuullllllll----ppppooooiiiinnnntttteeeerrrr----cccchhhheeeecccckkkkssss to disable this
           optimization for programs which depend on that
           behavior.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffeeeexxxxppppeeeennnnssssiiiivvvveeee----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss
           Perform a number of minor optimizations that are



2004-02-14                  gcc-3.3.3                          63





GCC(1)                         GNU                         GCC(1)


           relatively expensive.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffooooppppttttiiiimmmmiiiizzzzeeee----rrrreeeeggggiiiisssstttteeeerrrr----mmmmoooovvvveeee
       ----ffffrrrreeeeggggmmmmoooovvvveeee
           Attempt to reassign register numbers in move
           instructions and as operands of other simple
           instructions in order to maximize the amount of
           register tying.  This is especially helpful on
           machines with two-operand instructions.

           Note ----ffffrrrreeeeggggmmmmoooovvvveeee and ----ffffooooppppttttiiiimmmmiiiizzzzeeee----rrrreeeeggggiiiisssstttteeeerrrr----mmmmoooovvvveeee are the
           same optimization.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffddddeeeellllaaaayyyyeeeedddd----bbbbrrrraaaannnncccchhhh
           If supported for the target machine, attempt to
           reorder instructions to exploit instruction slots
           available after delayed branch instructions.

           Enabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss
           If supported for the target machine, attempt to
           reorder instructions to eliminate execution stalls due
           to required data being unavailable.  This helps
           machines that have slow floating point or memory load
           instructions by allowing other instructions to be
           issued until the result of the load or floating point
           instruction is required.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss2222
           Similar to ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss, but requests an
           additional pass of instruction scheduling after
           register allocation has been done.  This is especially
           useful on machines with a relatively small number of
           registers and where memory load instructions take more
           than one cycle.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffnnnnoooo----sssscccchhhheeeedddd----iiiinnnntttteeeerrrrbbbblllloooocccckkkk
           Don't schedule instructions across basic blocks.  This
           is normally enabled by default when scheduling before
           register allocation, i.e.  with ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss or at
           ----OOOO2222 or higher.

       ----ffffnnnnoooo----sssscccchhhheeeedddd----ssssppppeeeecccc
           Don't allow speculative motion of non-load
           instructions.  This is normally enabled by default



2004-02-14                  gcc-3.3.3                          64





GCC(1)                         GNU                         GCC(1)


           when scheduling before register allocation, i.e.  with
           ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss or at ----OOOO2222 or higher.

       ----ffffsssscccchhhheeeedddd----ssssppppeeeecccc----llllooooaaaadddd
           Allow speculative motion of some load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss or at ----OOOO2222 or
           higher.

       ----ffffsssscccchhhheeeedddd----ssssppppeeeecccc----llllooooaaaadddd----ddddaaaannnnggggeeeerrrroooouuuussss
           Allow speculative motion of more load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with ----ffffsssscccchhhheeeedddduuuulllleeee----iiiinnnnssssnnnnssss or at ----OOOO2222 or
           higher.

       ----ffffccccaaaalllllllleeeerrrr----ssssaaaavvvveeeessss
           Enable values to be allocated in registers that will
           be clobbered by function calls, by emitting extra
           instructions to save and restore the registers around
           such calls.  Such allocation is done only when it
           seems to result in better code than would otherwise be
           produced.

           This option is always enabled by default on certain
           machines, usually those which have no call-preserved
           registers to use instead.

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffmmmmoooovvvveeee----aaaallllllll----mmmmoooovvvvaaaabbbblllleeeessss
           Forces all invariant computations in loops to be moved
           outside the loop.

       ----ffffrrrreeeedddduuuucccceeee----aaaallllllll----ggggiiiivvvvssss
           Forces all general-induction variables in loops to be
           strength-reduced.

           _N_o_t_e_: When compiling programs written in Fortran,
           ----ffffmmmmoooovvvveeee----aaaallllllll----mmmmoooovvvvaaaabbbblllleeeessss and ----ffffrrrreeeedddduuuucccceeee----aaaallllllll----ggggiiiivvvvssss are enabled
           by default when you use the optimizer.

           These options may generate better or worse code;
           results are highly dependent on the structure of loops
           within the source code.

           These two options are intended to be removed someday,
           once they have helped determine the efficacy of
           various approaches to improving loop optimizations.

           Please let us (<ggggcccccccc@@@@ggggcccccccc....ggggnnnnuuuu....oooorrrrgggg> and
           <ffffoooorrrrttttrrrraaaannnn@@@@ggggnnnnuuuu....oooorrrrgggg>) know how use of these options
           affects the performance of your production code.
           We're very interested in code that runs _s_l_o_w_e_r when
           these options are _e_n_a_b_l_e_d.



2004-02-14                  gcc-3.3.3                          65





GCC(1)                         GNU                         GCC(1)


       ----ffffnnnnoooo----ppppeeeeeeeepppphhhhoooolllleeee
       ----ffffnnnnoooo----ppppeeeeeeeepppphhhhoooolllleeee2222
           Disable any machine-specific peephole optimizations.
           The difference between ----ffffnnnnoooo----ppppeeeeeeeepppphhhhoooolllleeee and ----ffffnnnnoooo----
           ppppeeeeeeeepppphhhhoooolllleeee2222 is in how they are implemented in the
           compiler; some targets use one, some use the other, a
           few use both.

           ----ffffppppeeeeeeeepppphhhhoooolllleeee is enabled by default.  ----ffffppppeeeeeeeepppphhhhoooolllleeee2222 enabled
           at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffbbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss
       ----ffffnnnnoooo----gggguuuueeeessssssss----bbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttyyyy
           Do not guess branch probabilities using a randomized
           model.

           Sometimes gcc will opt to use a randomized model to
           guess branch probabilities, when none are available
           from either profiling feedback (----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss) or
           ________bbbbuuuuiiiillllttttiiiinnnn____eeeexxxxppppeeeecccctttt.  This means that different runs of
           the compiler on the same program may produce different
           object code.

           In a hard real-time system, people don't want
           different runs of the compiler to produce code that
           has different behavior; minimizing non-determinism is
           of paramount import.  This switch allows users to
           reduce non-determinism, possibly at the expense of
           inferior optimization.

           The default is ----ffffgggguuuueeeessssssss----bbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttyyyy at levels
           ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffrrrreeeeoooorrrrddddeeeerrrr----bbbblllloooocccckkkkssss
           Reorder basic blocks in the compiled function in order
           to reduce number of taken branches and improve code
           locality.

           Enabled at levels ----OOOO2222, ----OOOO3333.

       ----ffffrrrreeeeoooorrrrddddeeeerrrr----ffffuuuunnnnccccttttiiiioooonnnnssss
           Reorder basic blocks in the compiled function in order
           to reduce number of taken branches and improve code
           locality. This is implemented by using special
           subsections "text.hot" for most frequently executed
           functions and "text.unlikely" for unlikely executed
           functions.  Reordering is done by the linker so object
           file format must support named sections and linker
           must place them in a reasonable way.

           Also profile feedback must be available in to make
           this option effective.  See ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss for
           details.




2004-02-14                  gcc-3.3.3                          66





GCC(1)                         GNU                         GCC(1)


           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg
           Allows the compiler to assume the strictest aliasing
           rules applicable to the language being compiled.  For
           C (and C++), this activates optimizations based on the
           type of expressions.  In particular, an object of one
           type is assumed never to reside at the same address as
           an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can
           alias an "int", but not a "void*" or a "double".  A
           character type may alias any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member
           than the one most recently written to (called ``type-
           punning'') is common.  Even with ----ffffssssttttrrrriiiicccctttt----aaaalllliiiiaaaassssiiiinnnngggg,
           type-punning is allowed, provided the memory is
           accessed through the union type.  So, the code above
           will work as expected.  However, this code might not:

                   int f() {
                     a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Every language that wishes to perform language-
           specific alias analysis should define a function that
           computes, given an "tree" node, an alias set for the
           node.  Nodes in different alias sets are not allowed
           to alias.  For an example, see the C front-end
           function "c_get_alias_set".

           Enabled at levels ----OOOO2222, ----OOOO3333, ----OOOOssss.

       ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss
       ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss====_n
           Align the start of functions to the next power-of-two
           greater than _n, skipping up to _n bytes.  For instance,



2004-02-14                  gcc-3.3.3                          67





GCC(1)                         GNU                         GCC(1)


           ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss====33332222 aligns functions to the next
           32-byte boundary, but ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss====22224444 would align
           to the next 32-byte boundary only if this can be done
           by skipping 23 bytes or less.

           ----ffffnnnnoooo----aaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss and ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss====1111 are
           equivalent and mean that functions will not be
           aligned.

           Some assemblers only support this flag when _n is a
           power of two; in that case, it is rounded up.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels ----OOOO2222, ----OOOO3333.

       ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss
       ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss====_n
           Align all branch targets to a power-of-two boundary,
           skipping up to _n bytes like ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss.  This
           option can easily make code slower, because it must
           insert dummy operations for when the branch target is
           reached in the usual flow of the code.

           ----ffffnnnnoooo----aaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss and ----ffffaaaalllliiiiggggnnnn----llllaaaabbbbeeeellllssss====1111 are equivalent
           and mean that labels will not be aligned.

           If ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss or ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss are applicable and
           are greater than this value, then their values are
           used instead.

           If _n is not specified or is zero, use a machine-
           dependent default which is very likely to be 1111,
           meaning no alignment.

           Enabled at levels ----OOOO2222, ----OOOO3333.

       ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss
       ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss====_n
           Align loops to a power-of-two boundary, skipping up to
           _n bytes like ----ffffaaaalllliiiiggggnnnn----ffffuuuunnnnccccttttiiiioooonnnnssss.  The hope is that the
           loop will be executed many times, which will make up
           for any execution of the dummy operations.

           ----ffffnnnnoooo----aaaalllliiiiggggnnnn----llllooooooooppppssss and ----ffffaaaalllliiiiggggnnnn----llllooooooooppppssss====1111 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels ----OOOO2222, ----OOOO3333.





2004-02-14                  gcc-3.3.3                          68





GCC(1)                         GNU                         GCC(1)


       ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss
       ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss====_n
           Align branch targets to a power-of-two boundary, for
           branch targets where the targets can only be reached
           by jumping, skipping up to _n bytes like ----ffffaaaalllliiiiggggnnnn----
           ffffuuuunnnnccccttttiiiioooonnnnssss.  In this case, no dummy operations need be
           executed.

           ----ffffnnnnoooo----aaaalllliiiiggggnnnn----jjjjuuuummmmppppssss and ----ffffaaaalllliiiiggggnnnn----jjjjuuuummmmppppssss====1111 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels ----OOOO2222, ----OOOO3333.

       ----ffffrrrreeeennnnaaaammmmeeee----rrrreeeeggggiiiisssstttteeeerrrrssss
           Attempt to avoid false dependencies in scheduled code
           by making use of registers left over after register
           allocation.  This optimization will most benefit
           processors with lots of registers.  It can, however,
           make debugging impossible, since variables will no
           longer stay in a ``home register''.

           Enabled at levels ----OOOO3333.

       ----ffffnnnnoooo----ccccpppprrrroooopppp----rrrreeeeggggiiiisssstttteeeerrrrssss
           After register allocation and post-register allocation
           instruction splitting, we perform a copy-propagation
           pass to try to reduce scheduling dependencies and
           occasionally eliminate the copy.

           Disabled at levels ----OOOO, ----OOOO2222, ----OOOO3333, ----OOOOssss.

       The following options control compiler behavior regarding
       floating point arithmetic.  These options trade off
       between speed and correctness.  All must be specifically
       enabled.

       ----ffffffffllllooooaaaatttt----ssssttttoooorrrreeee
           Do not store floating point variables in registers,
           and inhibit other options that might change whether a
           floating point value is taken from a register or
           memory.

           This option prevents undesirable excess precision on
           machines such as the 68000 where the floating
           registers (of the 68881) keep more precision than a
           "double" is supposed to have.  Similarly for the x86
           architecture.  For most programs, the excess precision
           does only good, but a few programs rely on the precise
           definition of IEEE floating point.  Use ----ffffffffllllooooaaaatttt----ssssttttoooorrrreeee
           for such programs, after modifying them to store all
           pertinent intermediate computations into variables.



2004-02-14                  gcc-3.3.3                          69





GCC(1)                         GNU                         GCC(1)


       ----ffffffffaaaasssstttt----mmmmaaaatttthhhh
           Sets ----ffffnnnnoooo----mmmmaaaatttthhhh----eeeerrrrrrrrnnnnoooo, ----ffffuuuunnnnssssaaaaffffeeee----mmmmaaaatttthhhh----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss,
           ----ffffnnnnoooo----ttttrrrraaaappppppppiiiinnnngggg----mmmmaaaatttthhhh, ----ffffffffiiiinnnniiiitttteeee----mmmmaaaatttthhhh----oooonnnnllllyyyy and ----ffffnnnnoooo----
           ssssiiiiggggnnnnaaaalllliiiinnnngggg----nnnnaaaannnnssss.

           This option causes the preprocessor macro
           "__FAST_MATH__" to be defined.

           This option should never be turned on by any ----OOOO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

       ----ffffnnnnoooo----mmmmaaaatttthhhh----eeeerrrrrrrrnnnnoooo
           Do not set ERRNO after calling math functions that are
           executed with a single instruction, e.g., sqrt.  A
           program that relies on IEEE exceptions for math error
           handling may want to use this flag for speed while
           maintaining IEEE arithmetic compatibility.

           This option should never be turned on by any ----OOOO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is ----ffffmmmmaaaatttthhhh----eeeerrrrrrrrnnnnoooo.

       ----ffffuuuunnnnssssaaaaffffeeee----mmmmaaaatttthhhh----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss
           Allow optimizations for floating-point arithmetic that
           (a) assume that arguments and results are valid and
           (b) may violate IEEE or ANSI standards.  When used at
           link-time, it may include libraries or startup files
           that change the default FPU control word or other
           similar optimizations.

           This option should never be turned on by any ----OOOO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is ----ffffnnnnoooo----uuuunnnnssssaaaaffffeeee----mmmmaaaatttthhhh----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss.

       ----ffffffffiiiinnnniiiitttteeee----mmmmaaaatttthhhh----oooonnnnllllyyyy
           Allow optimizations for floating-point arithmetic that
           assume that arguments and results are not NaNs or
           +-Infs.

           This option should never be turned on by any ----OOOO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications.

           The default is ----ffffnnnnoooo----ffffiiiinnnniiiitttteeee----mmmmaaaatttthhhh----oooonnnnllllyyyy.




2004-02-14                  gcc-3.3.3                          70





GCC(1)                         GNU                         GCC(1)


       ----ffffnnnnoooo----ttttrrrraaaappppppppiiiinnnngggg----mmmmaaaatttthhhh
           Compile code assuming that floating-point operations
           cannot generate user-visible traps.  These traps
           include division by zero, overflow, underflow, inexact
           result and invalid operation.  This option implies
           ----ffffnnnnoooo----ssssiiiiggggnnnnaaaalllliiiinnnngggg----nnnnaaaannnnssss.  Setting this option may allow
           faster code if one relies on ``non-stop'' IEEE
           arithmetic, for example.

           This option should never be turned on by any ----OOOO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is ----ffffttttrrrraaaappppppppiiiinnnngggg----mmmmaaaatttthhhh.

       ----ffffssssiiiiggggnnnnaaaalllliiiinnnngggg----nnnnaaaannnnssss
           Compile code assuming that IEEE signaling NaNs may
           generate user-visible traps during floating-point
           operations.  Setting this option disables
           optimizations that may change the number of exceptions
           visible with signaling NaNs.  This option implies
           ----ffffttttrrrraaaappppppppiiiinnnngggg----mmmmaaaatttthhhh.

           This option causes the preprocessor macro
           "__SUPPORT_SNAN__" to be defined.

           The default is ----ffffnnnnoooo----ssssiiiiggggnnnnaaaalllliiiinnnngggg----nnnnaaaannnnssss.

           This option is experimental and does not currently
           guarantee to disable all GCC optimizations that affect
           signaling NaN behavior.

       ----ffffssssiiiinnnngggglllleeee----pppprrrreeeecccciiiissssiiiioooonnnn----ccccoooonnnnssssttttaaaannnntttt
           Treat floating point constant as single precision
           constant instead of implicitly converting it to double
           precision constant.

       The following options control optimizations that may
       improve performance, but are not enabled by any ----OOOO
       options.  This section includes experimental options that
       may produce broken code.

       ----ffffbbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss
           After running a program compiled with ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss,
           you can compile it a second time using ----ffffbbbbrrrraaaannnncccchhhh----
           pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss, to improve optimizations based on the
           number of times each branch was taken.  When the
           program compiled with ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss exits it saves
           arc execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._d_a
           for each source file  The information in this data
           file is very dependent on the structure of the
           generated code, so you must use the same source code
           and the same optimization options for both



2004-02-14                  gcc-3.3.3                          71





GCC(1)                         GNU                         GCC(1)


           compilations.

           With ----ffffbbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss, GCC puts a RRRREEEEGGGG____BBBBRRRR____PPPPRRRROOOOBBBB
           note on each JJJJUUUUMMMMPPPP____IIIINNNNSSSSNNNN and CCCCAAAALLLLLLLL____IIIINNNNSSSSNNNN.  These can be
           used to improve optimization.  Currently, they are
           only used in one place: in _r_e_o_r_g_._c, instead of
           guessing which path a branch is mostly to take, the
           RRRREEEEGGGG____BBBBRRRR____PPPPRRRROOOOBBBB values are used to exactly determine which
           path is taken more often.

       ----ffffnnnneeeewwww----rrrraaaa
           Use a graph coloring register allocator.  Currently
           this option is meant for testing, so we are interested
           to hear about miscompilations with ----ffffnnnneeeewwww----rrrraaaa.

       ----ffffttttrrrraaaacccceeeerrrr
           Perform tail duplication to enlarge superblock size.
           This transformation simplifies the control flow of the
           function allowing other optimizations to do better
           job.

       ----ffffuuuunnnnrrrroooollllllll----llllooooooooppppssss
           Unroll loops whose number of iterations can be
           determined at compile time or upon entry to the loop.
           ----ffffuuuunnnnrrrroooollllllll----llllooooooooppppssss implies both ----ffffssssttttrrrreeeennnnggggtttthhhh----rrrreeeedddduuuucccceeee and
           ----ffffrrrreeeerrrruuuunnnn----ccccsssseeee----aaaafffftttteeeerrrr----lllloooooooopppp.  This option makes code
           larger, and may or may not make it run faster.

       ----ffffuuuunnnnrrrroooollllllll----aaaallllllll----llllooooooooppppssss
           Unroll all loops, even if their number of iterations
           is uncertain when the loop is entered.  This usually
           makes programs run more slowly.  ----ffffuuuunnnnrrrroooollllllll----aaaallllllll----llllooooooooppppssss
           implies the same options as ----ffffuuuunnnnrrrroooollllllll----llllooooooooppppssss,

       ----ffffpppprrrreeeeffffeeeettttcccchhhh----lllloooooooopppp----aaaarrrrrrrraaaayyyyssss
           If supported by the target machine, generate
           instructions to prefetch memory to improve the
           performance of loops that access large arrays.

           Disabled at level ----OOOOssss.

       ----ffffffffuuuunnnnccccttttiiiioooonnnn----sssseeeeccccttttiiiioooonnnnssss
       ----ffffddddaaaattttaaaa----sssseeeeccccttttiiiioooonnnnssss
           Place each function or data item into its own section
           in the output file if the target supports arbitrary
           sections.  The name of the function or the name of the
           data item determines the section's name in the output
           file.

           Use these options on systems where the linker can
           perform optimizations to improve locality of reference
           in the instruction space.  Most systems using the ELF
           object format and SPARC processors running Solaris 2
           have linkers with such optimizations.  AIX may have



2004-02-14                  gcc-3.3.3                          72





GCC(1)                         GNU                         GCC(1)


           these optimizations in the future.

           Only use these options when there are significant
           benefits from doing so.  When you specify these
           options, the assembler and linker will create larger
           object and executable files and will also be slower.
           You will not be able to use "gprof" on all systems if
           you specify this option and you may have problems with
           debugging if you specify both this option and ----gggg.

       ----ffffssssssssaaaa
           Perform optimizations in static single assignment
           form.  Each function's flow graph is translated into
           SSA form, optimizations are performed, and the flow
           graph is translated back from SSA form.  Users should
           not specify this option, since it is not yet ready for
           production use.

       ----ffffssssssssaaaa----ccccccccpppp
           Perform Sparse Conditional Constant Propagation in SSA
           form.  Requires ----ffffssssssssaaaa.  Like ----ffffssssssssaaaa, this is an
           experimental feature.

       ----ffffssssssssaaaa----ddddcccceeee
           Perform aggressive dead-code elimination in SSA form.
           Requires ----ffffssssssssaaaa.  Like ----ffffssssssssaaaa, this is an experimental
           feature.

       --------ppppaaaarrrraaaammmm _n_a_m_e====_v_a_l_u_e
           In some places, GCC uses various constants to control
           the amount of optimization that is done.  For example,
           GCC will not inline functions that contain more that a
           certain number of instructions.  You can control some
           of these constants on the command-line using the
           --------ppppaaaarrrraaaammmm option.

           The names of specific parameters, and the meaning of
           the values, are tied to the internals of the compiler,
           and are subject to change without notice in future
           releases.

           In each case, the _v_a_l_u_e is an integer.  The allowable
           choices for _n_a_m_e are given in the following table:

           mmmmaaaaxxxx----ccccrrrroooossssssssjjjjuuuummmmpppp----eeeeddddggggeeeessss
               The maximum number of incoming edges to consider
               for crossjumping.  The algorithm used by
               ----ffffccccrrrroooossssssssjjjjuuuummmmppppiiiinnnngggg is O(N^2) in the number of edges
               incoming to each block.  Increasing values mean
               more aggressive optimization, making the compile
               time increase with probably small improvement in
               executable size.





2004-02-14                  gcc-3.3.3                          73





GCC(1)                         GNU                         GCC(1)


           mmmmaaaaxxxx----ddddeeeellllaaaayyyy----ssssllllooootttt----iiiinnnnssssnnnn----sssseeeeaaaarrrrcccchhhh
               The maximum number of instructions to consider
               when looking for an instruction to fill a delay
               slot.  If more than this arbitrary number of
               instructions is searched, the time savings from
               filling the delay slot will be minimal so stop
               searching.  Increasing values mean more aggressive
               optimization, making the compile time increase
               with probably small improvement in executable run
               time.

           mmmmaaaaxxxx----ddddeeeellllaaaayyyy----ssssllllooootttt----lllliiiivvvveeee----sssseeeeaaaarrrrcccchhhh
               When trying to fill delay slots, the maximum
               number of instructions to consider when searching
               for a block with valid live register information.
               Increasing this arbitrarily chosen value means
               more aggressive optimization, increasing the
               compile time.  This parameter should be removed
               when the delay slot code is rewritten to maintain
               the control-flow graph.

           mmmmaaaaxxxx----ggggccccsssseeee----mmmmeeeemmmmoooorrrryyyy
               The approximate maximum amount of memory that will
               be allocated in order to perform the global common
               subexpression elimination optimization.  If more
               memory than specified is required, the
               optimization will not be done.

           mmmmaaaaxxxx----ggggccccsssseeee----ppppaaaasssssssseeeessss
               The maximum number of passes of GCSE to run.

           mmmmaaaaxxxx----ppppeeeennnnddddiiiinnnngggg----lllliiiisssstttt----lllleeeennnnggggtttthhhh
               The maximum number of pending dependencies
               scheduling will allow before flushing the current
               state and starting over.  Large functions with few
               branches or calls can create excessively large
               lists which needlessly consume memory and
               resources.

           mmmmaaaaxxxx----iiiinnnnlllliiiinnnneeee----iiiinnnnssssnnnnssss----ssssiiiinnnngggglllleeee
               Several parameters control the tree inliner used
               in gcc.  This number sets the maximum number of
               instructions (counted in gcc's internal
               representation) in a single function that the tree
               inliner will consider for inlining.  This only
               affects functions declared inline and methods
               implemented in a class declaration (C++).  The
               default value is 300.

           mmmmaaaaxxxx----iiiinnnnlllliiiinnnneeee----iiiinnnnssssnnnnssss----aaaauuuuttttoooo
               When you use ----ffffiiiinnnnlllliiiinnnneeee----ffffuuuunnnnccccttttiiiioooonnnnssss (included in ----OOOO3333),
               a lot of functions that would otherwise not be
               considered for inlining by the compiler will be
               investigated.  To those functions, a different



2004-02-14                  gcc-3.3.3                          74





GCC(1)                         GNU                         GCC(1)


               (more restrictive) limit compared to functions
               declared inline can be applied.  The default value
               is 300.

           mmmmaaaaxxxx----iiiinnnnlllliiiinnnneeee----iiiinnnnssssnnnnssss
               The tree inliner does decrease the allowable size
               for single functions to be inlined after we
               already inlined the number of instructions given
               here by repeated inlining.  This number should be
               a factor of two or more larger than the single
               function limit.  Higher numbers result in better
               runtime performance, but incur higher compile-time
               resource (CPU time, memory) requirements and
               result in larger binaries.  Very high values are
               not advisable, as too large binaries may adversely
               affect runtime performance.  The default value is
               600.

           mmmmaaaaxxxx----iiiinnnnlllliiiinnnneeee----ssssllllooooppppeeee
               After exceeding the maximum number of inlined
               instructions by repeated inlining, a linear
               function is used to decrease the allowable size
               for single functions.  The slope of that function
               is the negative reciprocal of the number specified
               here.  The default value is 32.

           mmmmiiiinnnn----iiiinnnnlllliiiinnnneeee----iiiinnnnssssnnnnssss
               The repeated inlining is throttled more and more
               by the linear function after exceeding the limit.
               To avoid too much throttling, a minimum for this
               function is specified here to allow repeated
               inlining for very small functions even when a lot
               of repeated inlining already has been done.  The
               default value is 130.

           mmmmaaaaxxxx----iiiinnnnlllliiiinnnneeee----iiiinnnnssssnnnnssss----rrrrttttllll
               For languages that use the RTL inliner (this
               happens at a later stage than tree inlining), you
               can set the maximum allowable size (counted in RTL
               instructions) for the RTL inliner with this
               parameter.  The default value is 600.

           mmmmaaaaxxxx----uuuunnnnrrrroooolllllllleeeedddd----iiiinnnnssssnnnnssss
               The maximum number of instructions that a loop
               should have if that loop is unrolled, and if the
               loop is unrolled, it determines how many times the
               loop code is unrolled.

           hhhhooootttt----bbbbbbbb----ccccoooouuuunnnntttt----ffffrrrraaaaccccttttiiiioooonnnn
               Select fraction of the maximal count of
               repetitions of basic block in program given basic
               block needs to have to be considered hot.





2004-02-14                  gcc-3.3.3                          75





GCC(1)                         GNU                         GCC(1)


           hhhhooootttt----bbbbbbbb----ffffrrrreeeeqqqquuuueeeennnnccccyyyy----ffffrrrraaaaccccttttiiiioooonnnn
               Select fraction of the maximal frequency of
               executions of basic block in function given basic
               block needs to have to be considered hot

           ttttrrrraaaacccceeeerrrr----ddddyyyynnnnaaaammmmiiiicccc----ccccoooovvvveeeerrrraaaaggggeeee
           ttttrrrraaaacccceeeerrrr----ddddyyyynnnnaaaammmmiiiicccc----ccccoooovvvveeeerrrraaaaggggeeee----ffffeeeeeeeeddddbbbbaaaacccckkkk
               This value is used to limit superblock formation
               once the given percentage of executed instructions
               is covered.  This limits unnecessary code size
               expansion.

               The ttttrrrraaaacccceeeerrrr----ddddyyyynnnnaaaammmmiiiicccc----ccccoooovvvveeeerrrraaaaggggeeee----ffffeeeeeeeeddddbbbbaaaacccckkkk is used only
               when profile feedback is available.  The real
               profiles (as opposed to statically estimated ones)
               are much less balanced allowing the threshold to
               be larger value.

           ttttrrrraaaacccceeeerrrr----mmmmaaaaxxxx----ccccooooddddeeee----ggggrrrroooowwwwtttthhhh
               Stop tail duplication once code growth has reached
               given percentage.  This is rather hokey argument,
               as most of the duplicates will be eliminated later
               in cross jumping, so it may be set to much higher
               values than is the desired code growth.

           ttttrrrraaaacccceeeerrrr----mmmmiiiinnnn----bbbbrrrraaaannnncccchhhh----rrrraaaattttiiiioooo
               Stop reverse growth when the reverse probability
               of best edge is less than this threshold (in
               percent).

           ttttrrrraaaacccceeeerrrr----mmmmiiiinnnn----bbbbrrrraaaannnncccchhhh----rrrraaaattttiiiioooo
           ttttrrrraaaacccceeeerrrr----mmmmiiiinnnn----bbbbrrrraaaannnncccchhhh----rrrraaaattttiiiioooo----ffffeeeeeeeeddddbbbbaaaacccckkkk
               Stop forward growth if the best edge do have
               probability lower than this threshold.

               Similarly to ttttrrrraaaacccceeeerrrr----ddddyyyynnnnaaaammmmiiiicccc----ccccoooovvvveeeerrrraaaaggggeeee two values
               are present, one for compilation for profile
               feedback and one for compilation without.  The
               value for compilation with profile feedback needs
               to be more conservative (higher) in order to make
               tracer effective.

           ggggggggcccc----mmmmiiiinnnn----eeeexxxxppppaaaannnndddd
               GCC uses a garbage collector to manage its own
               memory allocation.  This parameter specifies the
               minimum percentage by which the garbage
               collector's heap should be allowed to expand
               between collections.  Tuning this may improve
               compilation speed; it has no effect on code
               generation.

               The default is 30% + 70% * (RAM/1GB) with an upper
               bound of 100% when RAM >= 1GB.  If "getrlimit" is
               available, the notion of "RAM" is the smallest of



2004-02-14                  gcc-3.3.3                          76





GCC(1)                         GNU                         GCC(1)


               actual RAM, RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.
               If GCC is not able to calculate RAM on a
               particular platform, the lower bound of 30% is
               used.  Setting this parameter and ggggggggcccc----mmmmiiiinnnn----hhhheeeeaaaappppssssiiiizzzzeeee
               to zero causes a full collection to occur at every
               opportunity.  This is extremely slow, but can be
               useful for debugging.

           ggggggggcccc----mmmmiiiinnnn----hhhheeeeaaaappppssssiiiizzzzeeee
               Minimum size of the garbage collector's heap
               before it begins bothering to collect garbage.
               The first collection occurs after the heap expands
               by ggggggggcccc----mmmmiiiinnnn----eeeexxxxppppaaaannnndddd% beyond ggggggggcccc----mmmmiiiinnnn----hhhheeeeaaaappppssssiiiizzzzeeee.
               Again, tuning this may improve compilation speed,
               and has no effect on code generation.

               The default is RAM/8, with a lower bound of 4096
               (four megabytes) and an upper bound of 131072 (128
               megabytes).  If "getrlimit" is available, the
               notion of "RAM" is the smallest of actual RAM,
               RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If GCC is
               not able to calculate RAM on a particular
               platform, the lower bound is used.  Setting this
               parameter very large effectively disables garbage
               collection.  Setting this parameter and ggggggggcccc----mmmmiiiinnnn----
               eeeexxxxppppaaaannnndddd to zero causes a full collection to occur
               at every opportunity.

       OOOOppppttttiiiioooonnnnssss CCCCoooonnnnttttrrrroooolllllllliiiinnnngggg tttthhhheeee PPPPrrrreeeepppprrrroooocccceeeessssssssoooorrrr

       These options control the C preprocessor, which is run on
       each C source file before actual compilation.

       If you use the ----EEEE option, nothing is done except
       preprocessing.  Some of these options make sense only
       together with ----EEEE because they cause the preprocessor
       output to be unsuitable for actual compilation.

       You can use ----WWWWpppp,,,,_o_p_t_i_o_n to bypass the compiler driver and
       pass _o_p_t_i_o_n directly through to the preprocessor.  If
       _o_p_t_i_o_n contains commas, it is split into multiple options
       at the commas.  However, many options are modified,
       translated or interpreted by the compiler driver before
       being passed to the preprocessor, and ----WWWWpppp forcibly
       bypasses this phase.  The preprocessor's direct interface
       is undocumented and subject to change, so whenever
       possible you should avoid using ----WWWWpppp and let the driver
       handle the options instead.

       ----DDDD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition "1".

       ----DDDD _n_a_m_e====_d_e_f_i_n_i_t_i_o_n
           Predefine _n_a_m_e as a macro, with definition _d_e_f_i_n_i_t_i_o_n.



2004-02-14                  gcc-3.3.3                          77





GCC(1)                         GNU                         GCC(1)


           There are no restrictions on the contents of
           _d_e_f_i_n_i_t_i_o_n, but if you are invoking the preprocessor
           from a shell or shell-like program you may need to use
           the shell's quoting syntax to protect characters such
           as spaces that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the
           command line, write its argument list with surrounding
           parentheses before the equals sign (if any).
           Parentheses are meaningful to most shells, so you will
           need to quote the option.  With sssshhhh and ccccsssshhhh,
           ----DDDD''''_n_a_m_e((((_a_r_g_s_._._.))))====_d_e_f_i_n_i_t_i_o_n'''' works.

           ----DDDD and ----UUUU options are processed in the order they are
           given on the command line.  All ----iiiimmmmaaaaccccrrrroooossss _f_i_l_e and
           ----iiiinnnncccclllluuuuddddeeee _f_i_l_e options are processed after all ----DDDD and
           ----UUUU options.

       ----UUUU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built
           in or provided with a ----DDDD option.

       ----uuuunnnnddddeeeeffff
           Do not predefine any system-specific or GCC-specific
           macros.  The standard predefined macros remain
           defined.

       ----IIII _d_i_r
           Add the directory _d_i_r to the list of directories to be
           searched for header files.  Directories named by ----IIII
           are searched before the standard system include
           directories.  If the directory _d_i_r is a standard
           system include directory, the option is ignored to
           ensure that the default search order for system
           directories and the special treatment of system
           headers are not defeated .

       ----oooo _f_i_l_e
           Write output to _f_i_l_e.  This is the same as specifying
           _f_i_l_e as the second non-option argument to ccccpppppppp.  ggggcccccccc
           has a different interpretation of a second non-option
           argument, so you must use ----oooo to specify the output
           file.

       ----WWWWaaaallllllll
           Turns on all optional warnings which are desirable for
           normal code.  At present this is ----WWWWccccoooommmmmmmmeeeennnntttt and
           ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss.  Note that many of the preprocessor's
           warnings are on by default and have no options to
           control them.

       ----WWWWccccoooommmmmmmmeeeennnntttt





2004-02-14                  gcc-3.3.3                          78





GCC(1)                         GNU                         GCC(1)


       ----WWWWccccoooommmmmmmmeeeennnnttttssss
           Warn whenever a comment-start sequence ////**** appears in a
           ////**** comment, or whenever a backslash-newline appears in
           a //////// comment.  (Both forms have the same effect.)

       ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss
           Warn if any trigraphs are encountered.  This option
           used to take effect only if ----ttttrrrriiiiggggrrrraaaapppphhhhssss was also
           specified, but now works independently.  Warnings are
           not given for trigraphs within comments, as they do
           not affect the meaning of the program.

       ----WWWWttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent, and
           problematic constructs which should be avoided.

       ----WWWWiiiimmmmppppoooorrrrtttt
           Warn the first time ####iiiimmmmppppoooorrrrtttt is used.

       ----WWWWuuuunnnnddddeeeeffff
           Warn whenever an identifier which is not a macro is
           encountered in an ####iiiiffff directive, outside of ddddeeeeffffiiiinnnneeeedddd.
           Such identifiers are replaced with zero.

       ----WWWWuuuunnnnuuuusssseeeedddd----mmmmaaaaccccrrrroooossss
           Warn about macros defined in the main file that are
           unused.  A macro is _u_s_e_d if it is expanded or tested
           for existence at least once.  The preprocessor will
           also warn if the macro has not been used at the time
           it is redefined or undefined.

           Built-in macros, macros defined on the command line,
           and macros defined in include files are not warned
           about.

           NNNNooootttteeee:::: If a macro is actually used, but only used in
           skipped conditional blocks, then CPP will report it as
           unused.  To avoid the warning in such a case, you
           might improve the scope of the macro's definition by,
           for example, moving it into the first skipped block.
           Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif


       ----WWWWeeeennnnddddiiiiffff----llllaaaabbbbeeeellllssss
           Warn whenever an ####eeeellllsssseeee or an ####eeeennnnddddiiiiffff are followed by
           text.  This usually happens in code of the form





2004-02-14                  gcc-3.3.3                          79





GCC(1)                         GNU                         GCC(1)


                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments, but
           often are not in older programs.  This warning is on
           by default.

       ----WWWWeeeerrrrrrrroooorrrr
           Make all warnings into hard errors.  Source code which
           triggers warnings will be rejected.

       ----WWWWssssyyyysssstttteeeemmmm----hhhheeeeaaaaddddeeeerrrrssss
           Issue warnings for code in system headers.  These are
           normally unhelpful in finding bugs in your own code,
           therefore suppressed.  If you are responsible for the
           system library, you may want to see them.

       ----wwww  Suppress all warnings, including those which GNU CPP
           issues by default.

       ----ppppeeeeddddaaaannnnttttiiiicccc
           Issue all the mandatory diagnostics listed in the C
           standard.  Some of them are left out by default, since
           they trigger frequently on harmless code.

       ----ppppeeeeddddaaaannnnttttiiiicccc----eeeerrrrrrrroooorrrrssss
           Issue all the mandatory diagnostics, and make all
           mandatory diagnostics into errors.  This includes
           mandatory diagnostics that GCC issues without
           ----ppppeeeeddddaaaannnnttttiiiicccc but treats as warnings.

       ----MMMM  Instead of outputting the result of preprocessing,
           output a rule suitable for mmmmaaaakkkkeeee describing the
           dependencies of the main source file.  The
           preprocessor outputs one mmmmaaaakkkkeeee rule containing the
           object file name for that source file, a colon, and
           the names of all the included files, including those
           coming from ----iiiinnnncccclllluuuuddddeeee or ----iiiimmmmaaaaccccrrrroooossss command line options.

           Unless specified explicitly (with ----MMMMTTTT or ----MMMMQQQQ), the
           object file name consists of the basename of the
           source file with any suffix replaced with object file
           suffix.  If there are many included files then the
           rule is split into several lines using \\\\-newline.  The
           rule has no commands.

           This option does not suppress the preprocessor's debug
           output, such as ----ddddMMMM.  To avoid mixing such debug
           output with the dependency rules you should explicitly
           specify the dependency output file with ----MMMMFFFF, or use an
           environment variable like DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT.  Debug



2004-02-14                  gcc-3.3.3                          80





GCC(1)                         GNU                         GCC(1)


           output will still be sent to the regular output stream
           as normal.

           Passing ----MMMM to the driver implies ----EEEE, and suppresses
           warnings with an implicit ----wwww.

       ----MMMMMMMM Like ----MMMM but do not mention header files that are found
           in system header directories, nor header files that
           are included, directly or indirectly, from such a
           header.

           This implies that the choice of angle brackets or
           double quotes in an ####iiiinnnncccclllluuuuddddeeee directive does not in
           itself determine whether that header will appear in
           ----MMMMMMMM dependency output.  This is a slight change in
           semantics from GCC versions 3.0 and earlier.

       ----MMMMFFFF _f_i_l_e
           @anchor{-MF} When used with ----MMMM or ----MMMMMMMM, specifies a
           file to write the dependencies to.  If no ----MMMMFFFF switch
           is given the preprocessor sends the rules to the same
           place it would have sent preprocessed output.

           When used with the driver options ----MMMMDDDD or ----MMMMMMMMDDDD, ----MMMMFFFF
           overrides the default dependency output file.

       ----MMMMGGGG In conjunction with an option such as ----MMMM requesting
           dependency generation, ----MMMMGGGG assumes missing header
           files are generated files and adds them to the
           dependency list without raising an error.  The
           dependency filename is taken directly from the
           "#include" directive without prepending any path.  ----MMMMGGGG
           also suppresses preprocessed output, as a missing
           header file renders this useless.

           This feature is used in automatic updating of
           makefiles.

       ----MMMMPPPP This option instructs CPP to add a phony target for
           each dependency other than the main file, causing each
           to depend on nothing.  These dummy rules work around
           errors mmmmaaaakkkkeeee gives if you remove header files without
           updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:


       ----MMMMTTTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency
           generation.  By default CPP takes the name of the main



2004-02-14                  gcc-3.3.3                          81





GCC(1)                         GNU                         GCC(1)


           input file, including any path, deletes any file
           suffix such as ....cccc, and appends the platform's usual
           object suffix.  The result is the target.

           An ----MMMMTTTT option will set the target to be exactly the
           string you specify.  If you want multiple targets, you
           can specify them as a single argument to ----MMMMTTTT, or use
           multiple ----MMMMTTTT options.

           For example, ----MMMMTTTT ''''$$$$((((oooobbbbjjjjppppffffxxxx))))ffffoooooooo....oooo'''' might give

                   $(objpfx)foo.o: foo.c


       ----MMMMQQQQ _t_a_r_g_e_t
           Same as ----MMMMTTTT, but it quotes any characters which are
           special to Make.  ----MMMMQQQQ ''''$$$$((((oooobbbbjjjjppppffffxxxx))))ffffoooooooo....oooo'''' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it
           were given with ----MMMMQQQQ.

       ----MMMMDDDD ----MMMMDDDD is equivalent to ----MMMM ----MMMMFFFF _f_i_l_e, except that ----EEEE is
           not implied.  The driver determines _f_i_l_e based on
           whether an ----oooo option is given.  If it is, the driver
           uses its argument but with a suffix of _._d, otherwise
           it take the basename of the input file and applies a
           _._d suffix.

           If ----MMMMDDDD is used in conjunction with ----EEEE, any ----oooo switch
           is understood to specify the dependency output file
           (but @pxref{-MF}), but if used without ----EEEE, each ----oooo is
           understood to specify a target object file.

           Since ----EEEE is not implied, ----MMMMDDDD can be used to generate a
           dependency output file as a side-effect of the
           compilation process.

       ----MMMMMMMMDDDD
           Like ----MMMMDDDD except mention only user header files, not
           system -header files.

       ----xxxx cccc
       ----xxxx cccc++++++++
       ----xxxx oooobbbbjjjjeeeeccccttttiiiivvvveeee----cccc
       ----xxxx aaaasssssssseeeemmmmbbbblllleeeerrrr----wwwwiiiitttthhhh----ccccpppppppp
           Specify the source language: C, C++, Objective-C, or
           assembly.  This has nothing to do with standards
           conformance or extensions; it merely selects which
           base syntax to expect.  If you give none of these
           options, cpp will deduce the language from the
           extension of the source file: ....cccc, ....cccccccc, ....mmmm, or ....SSSS.
           Some other common extensions for C++ and assembly are



2004-02-14                  gcc-3.3.3                          82





GCC(1)                         GNU                         GCC(1)


           also recognized.  If cpp does not recognize the
           extension, it will treat the file as C; this is the
           most generic mode.

           NNNNooootttteeee:::: Previous versions of cpp accepted a ----llllaaaannnngggg option
           which selected both the language and the standards
           conformance level.  This option has been removed,
           because it conflicts with the ----llll option.

       ----ssssttttdddd====_s_t_a_n_d_a_r_d
       ----aaaannnnssssiiii
           Specify the standard to which the code should conform.
           Currently CPP knows about C and C++ standards; others
           may be added in the future.

           _s_t_a_n_d_a_r_d may be one of:

           ""iso9899:1990""
           ""c89""
               The ISO C standard from 1990.  cccc88889999 is the
               customary shorthand for this version of the
               standard.

               The ----aaaannnnssssiiii option is equivalent to ----ssssttttdddd====cccc88889999.

           ""iso9899:199409""
               The 1990 C standard, as amended in 1994.

           ""iso9899:1999""
           ""c99""
           ""iso9899:199x""
           ""c9x""
               The revised ISO C standard, published in December
               1999.  Before publication, this was known as C9X.

           ""gnu89""
               The 1990 C standard plus GNU extensions.  This is
               the default.

           ""gnu99""
           ""gnu9x""
               The 1999 C standard plus GNU extensions.

           ""c++98""
               The 1998 ISO C++ standard plus amendments.

           ""gnu++98""
               The same as ----ssssttttdddd====cccc++++++++99998888 plus GNU extensions.  This
               is the default for C++ code.

       ----IIII---- Split the include path.  Any directories specified
           with ----IIII options before ----IIII---- are searched only for
           headers requested with "#include "file""; they are not
           searched for "#include <file>".  If additional



2004-02-14                  gcc-3.3.3                          83





GCC(1)                         GNU                         GCC(1)


           directories are specified with ----IIII options after the
           ----IIII----, those directories are searched for all ####iiiinnnncccclllluuuuddddeeee
           directives.

           In addition, ----IIII---- inhibits the use of the directory of
           the current file directory as the first search
           directory for "#include "file"".

       ----nnnnoooossssttttddddiiiinnnncccc
           Do not search the standard system directories for
           header files.  Only the directories you have specified
           with ----IIII options (and the directory of the current
           file, if appropriate) are searched.

       ----nnnnoooossssttttddddiiiinnnncccc++++++++
           Do not search for header files in the C++-specific
           standard directories, but do still search the other
           standard directories.  (This option is used when
           building the C++ library.)

       ----iiiinnnncccclllluuuuddddeeee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the
           first line of the primary source file.  However, the
           first directory searched for _f_i_l_e is the
           preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not
           found there, it is searched for in the remainder of
           the "#include "..."" search chain as normal.

           If multiple ----iiiinnnncccclllluuuuddddeeee options are given, the files are
           included in the order they appear on the command line.

       ----iiiimmmmaaaaccccrrrroooossss _f_i_l_e
           Exactly like ----iiiinnnncccclllluuuuddddeeee, except that any output produced
           by scanning _f_i_l_e is thrown away.  Macros it defines
           remain defined.  This allows you to acquire all the
           macros from a header without also processing its
           declarations.

           All files specified by ----iiiimmmmaaaaccccrrrroooossss are processed before
           all files specified by ----iiiinnnncccclllluuuuddddeeee.

       ----iiiiddddiiiirrrraaaafffftttteeeerrrr _d_i_r
           Search _d_i_r for header files, but do it _a_f_t_e_r all
           directories specified with ----IIII and the standard system
           directories have been exhausted.  _d_i_r is treated as a
           system include directory.

       ----iiiipppprrrreeeeffffiiiixxxx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent
           ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx options.  If the prefix represents a
           directory, you should include the final ////.





2004-02-14                  gcc-3.3.3                          84





GCC(1)                         GNU                         GCC(1)


       ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx _d_i_r
       ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxxbbbbeeeeffffoooorrrreeee _d_i_r
           Append _d_i_r to the prefix specified previously with
           ----iiiipppprrrreeeeffffiiiixxxx, and add the resulting directory to the
           include search path.  ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxxbbbbeeeeffffoooorrrreeee puts it in
           the same place ----IIII would; ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx puts it where
           ----iiiiddddiiiirrrraaaafffftttteeeerrrr would.

           Use of these options is discouraged.

       ----iiiissssyyyysssstttteeeemmmm _d_i_r
           Search _d_i_r for header files, after all directories
           specified by ----IIII but before the standard system
           directories.  Mark it as a system directory, so that
           it gets the same special treatment as is applied to
           the standard system directories.

       ----ffffpppprrrreeeepppprrrroooocccceeeesssssssseeeedddd
           Indicate to the preprocessor that the input file has
           already been preprocessed.  This suppresses things
           like macro expansion, trigraph conversion, escaped
           newline splicing, and processing of most directives.
           The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed
           with ----CCCC to the compiler without problems.  In this
           mode the integrated preprocessor is little more than a
           tokenizer for the front ends.

           ----ffffpppprrrreeeepppprrrroooocccceeeesssssssseeeedddd is implicit if the input file has one
           of the extensions ....iiii, ....iiiiiiii or ....mmmmiiii.  These are the
           extensions that GCC uses for preprocessed files
           created by ----ssssaaaavvvveeee----tttteeeemmmmppppssss.

       ----ffffttttaaaabbbbssssttttoooopppp====_w_i_d_t_h
           Set the distance between tab stops.  This helps the
           preprocessor report correct column numbers in warnings
           or errors, even if tabs appear on the line.  If the
           value is less than 1 or greater than 100, the option
           is ignored.  The default is 8.

       ----ffffnnnnoooo----sssshhhhoooowwww----ccccoooolllluuuummmmnnnn
           Do not print column numbers in diagnostics.  This may
           be necessary if diagnostics are being scanned by a
           program that does not understand the column numbers,
           such as ddddeeeejjjjaaaaggggnnnnuuuu.

       ----AAAA _p_r_e_d_i_c_a_t_e====_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.  This form is preferred to the older
           form ----AAAA _p_r_e_d_i_c_a_t_e((((_a_n_s_w_e_r)))), which is still supported,
           because it does not use shell special characters.

       ----AAAA ----_p_r_e_d_i_c_a_t_e====_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and



2004-02-14                  gcc-3.3.3                          85





GCC(1)                         GNU                         GCC(1)


           answer _a_n_s_w_e_r.

       ----ddddCCCCHHHHAAAARRRRSSSS
           _C_H_A_R_S is a sequence of one or more of the following
           characters, and must not be preceded by a space.
           Other characters are interpreted by the compiler
           proper, or reserved for future versions of GCC, and so
           are silently ignored.  If you specify characters whose
           behavior conflicts, the result is undefined.

           MMMM   Instead of the normal output, generate a list of
               ####ddddeeeeffffiiiinnnneeee directives for all the macros defined
               during the execution of the preprocessor,
               including predefined macros.  This gives you a way
               of finding out what is predefined in your version
               of the preprocessor.  Assuming you have no file
               _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               will show all the predefined macros.

           DDDD   Like MMMM except in two respects: it does _n_o_t include
               the predefined macros, and it outputs _b_o_t_h the
               ####ddddeeeeffffiiiinnnneeee directives and the result of
               preprocessing.  Both kinds of output go to the
               standard output file.

           NNNN   Like DDDD, but emit only the macro names, not their
               expansions.

           IIII   Output ####iiiinnnncccclllluuuuddddeeee directives in addition to the
               result of preprocessing.

       ----PPPP  Inhibit generation of linemarkers in the output from
           the preprocessor.  This might be useful when running
           the preprocessor on something that is not C code, and
           will be sent to a program which might be confused by
           the linemarkers.

       ----CCCC  Do not discard comments.  All comments are passed
           through to the output file, except for comments in
           processed directives, which are deleted along with the
           directive.

           You should be prepared for side effects when using ----CCCC;
           it causes the preprocessor to treat comments as tokens
           in their own right.  For example, comments appearing
           at the start of what would be a directive line have
           the effect of turning that line into an ordinary
           source line, since the first token on the line is no
           longer a ####.





2004-02-14                  gcc-3.3.3                          86





GCC(1)                         GNU                         GCC(1)


       ----CCCCCCCC Do not discard comments, including during macro
           expansion.  This is like ----CCCC, except that comments
           contained within macros are also passed through to the
           output file where the macro is expanded.

           In addition to the side-effects of the ----CCCC option, the
           ----CCCCCCCC option causes all C++-style comments inside a
           macro to be converted to C-style comments.  This is to
           prevent later use of that macro from inadvertently
           commenting out the remainder of the source line.

           The ----CCCCCCCC option is generally used to support lint
           comments.

       ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll----ccccpppppppp
           Try to imitate the behavior of old-fashioned C
           preprocessors, as opposed to ISO C preprocessors.

       ----ttttrrrriiiiggggrrrraaaapppphhhhssss
           Process trigraph sequences.  These are three-character
           sequences, all starting with ????????, that are defined by
           ISO C to stand for single characters.  For example,
           ????????//// stands for \\\\, so ''''????????////nnnn'''' is a character constant
           for a newline.  By default, GCC ignores trigraphs, but
           in standard-conforming modes it converts them.  See
           the ----ssssttttdddd and ----aaaannnnssssiiii options.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~


       ----rrrreeeemmmmaaaapppp
           Enable special code to work around file systems which
           only permit very short file names, such as MS-DOS.

       --------hhhheeeellllpppp
       --------ttttaaaarrrrggggeeeetttt----hhhheeeellllpppp
           Print text describing all the command line options
           instead of preprocessing anything.

       ----vvvv  Verbose mode.  Print out GNU CPP's version number at
           the beginning of execution, and report the final form
           of the include path.

       ----HHHH  Print the name of each header file used, in addition
           to other normal activities.  Each name is indented to
           show how deep in the ####iiiinnnncccclllluuuuddddeeee stack it is.

       ----vvvveeeerrrrssssiiiioooonnnn
       --------vvvveeeerrrrssssiiiioooonnnn
           Print out GNU CPP's version number.  With one dash,
           proceed to preprocess as normal.  With two dashes,



2004-02-14                  gcc-3.3.3                          87





GCC(1)                         GNU                         GCC(1)


           exit immediately.

       PPPPaaaassssssssiiiinnnngggg OOOOppppttttiiiioooonnnnssss ttttoooo tttthhhheeee AAAAsssssssseeeemmmmbbbblllleeeerrrr

       You can pass options to the assembler.

       ----WWWWaaaa,,,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.

       OOOOppppttttiiiioooonnnnssss ffffoooorrrr LLLLiiiinnnnkkkkiiiinnnngggg

       These options come into play when the compiler links
       object files into an executable output file.  They are
       meaningless if the compiler is not doing a link step.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
           A file name that does not end in a special recognized
           suffix is considered to name an object file or
           library.  (Object files are distinguished from
           libraries by the linker according to the file
           contents.)  If linking is done, these object files are
           used as input to the linker.

       ----cccc
       ----SSSS
       ----EEEE  If any of these options is used, then the linker is
           not run, and object file names should not be used as
           arguments.

       ----llll_l_i_b_r_a_r_y
       ----llll _l_i_b_r_a_r_y
           Search the library named _l_i_b_r_a_r_y when linking.  (The
           second alternative with the library as a separate
           argument is only for POSIX compliance and is not
           recommended.)

           It makes a difference where in the command you write
           this option; the linker searches and processes
           libraries and object files in the order they are
           specified.  Thus, ffffoooooooo....oooo ----llllzzzz bbbbaaaarrrr....oooo searches library zzzz
           after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to
           functions in zzzz, those functions may not be loaded.

           The linker searches a standard list of directories for
           the library, which is actually a file named
           _l_i_b_l_i_b_r_a_r_y_._a.  The linker then uses this file as if it
           had been specified precisely by name.

           The directories searched include several standard
           system directories plus any that you specify with ----LLLL.

           Normally the files found this way are library



2004-02-14                  gcc-3.3.3                          88





GCC(1)                         GNU                         GCC(1)


           files---archive files whose members are object files.
           The linker handles an archive file by scanning through
           it for members which define symbols that have so far
           been referenced but not defined.  But if the file that
           is found is an ordinary object file, it is linked in
           the usual fashion.  The only difference between using
           an ----llll option and specifying a file name is that ----llll
           surrounds _l_i_b_r_a_r_y with lllliiiibbbb and ....aaaa and searches several
           directories.

       ----lllloooobbbbjjjjcccc
           You need this special case of the ----llll option in order
           to link an Objective-C program.

       ----nnnnoooossssttttaaaarrrrttttffffiiiilllleeeessss
           Do not use the standard system startup files when
           linking.  The standard system libraries are used
           normally, unless ----nnnnoooossssttttddddlllliiiibbbb or ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss is used.

       ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss
           Do not use the standard system libraries when linking.
           Only the libraries you specify will be passed to the
           linker.  The standard startup files are used normally,
           unless ----nnnnoooossssttttaaaarrrrttttffffiiiilllleeeessss is used.  The compiler may
           generate calls to memcmp, memset, and memcpy for
           System V (and ISO C) environments or to bcopy and
           bzero for BSD environments.  These entries are usually
           resolved by entries in libc.  These entry points
           should be supplied through some other mechanism when
           this option is specified.

       ----nnnnoooossssttttddddlllliiiibbbb
           Do not use the standard system startup files or
           libraries when linking.  No startup files and only the
           libraries you specify will be passed to the linker.
           The compiler may generate calls to memcmp, memset, and
           memcpy for System V (and ISO C) environments or to
           bcopy and bzero for BSD environments.  These entries
           are usually resolved by entries in libc.  These entry
           points should be supplied through some other mechanism
           when this option is specified.

           One of the standard libraries bypassed by ----nnnnoooossssttttddddlllliiiibbbb
           and ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss is _l_i_b_g_c_c_._a, a library of internal
           subroutines that GCC uses to overcome shortcomings of
           particular machines, or special needs for some
           languages.

           In most cases, you need _l_i_b_g_c_c_._a even when you want to
           avoid other standard libraries.  In other words, when
           you specify ----nnnnoooossssttttddddlllliiiibbbb or ----nnnnooooddddeeeeffffaaaauuuullllttttlllliiiibbbbssss you should
           usually specify ----llllggggcccccccc as well.  This ensures that you
           have no unresolved references to internal GCC library
           subroutines.  (For example, ________mmmmaaaaiiiinnnn, used to ensure C++



2004-02-14                  gcc-3.3.3                          89





GCC(1)                         GNU                         GCC(1)


           constructors will be called.)

       ----ssss  Remove all symbol table and relocation information
           from the executable.

       ----ssssttttaaaattttiiiicccc
           On systems that support dynamic linking, this prevents
           linking with the shared libraries.  On other systems,
           this option has no effect.

       ----sssshhhhaaaarrrreeeedddd
           Produce a shared object which can then be linked with
           other objects to form an executable.  Not all systems
           support this option.  For predictable results, you
           must also specify the same set of options that were
           used to generate code (----ffffppppiiiicccc, ----ffffPPPPIIIICCCC, or model
           suboptions) when you specify this option.[1]

       ----sssshhhhaaaarrrreeeedddd----lllliiiibbbbggggcccccccc
       ----ssssttttaaaattttiiiicccc----lllliiiibbbbggggcccccccc
           On systems that provide _l_i_b_g_c_c as a shared library,
           these options force the use of either the shared or
           static version respectively.  If no shared version of
           _l_i_b_g_c_c was built when the compiler was configured,
           these options have no effect.

           There are several situations in which an application
           should use the shared _l_i_b_g_c_c instead of the static
           version.  The most common of these is when the
           application wishes to throw and catch exceptions
           across different shared libraries.  In that case, each
           of the libraries as well as the application itself
           should use the shared _l_i_b_g_c_c.

           Therefore, the G++ and GCJ drivers automatically add
           ----sssshhhhaaaarrrreeeedddd----lllliiiibbbbggggcccccccc whenever you build a shared library or
           a main executable, because C++ and Java programs
           typically use exceptions, so this is the right thing
           to do.

           If, instead, you use the GCC driver to create shared
           libraries, you may find that they will not always be
           linked with the shared _l_i_b_g_c_c.  If GCC finds, at its
           configuration time, that you have a GNU linker that
           does not support option --------eeeehhhh----ffffrrrraaaammmmeeee----hhhhddddrrrr, it will link
           the shared version of _l_i_b_g_c_c into shared libraries by
           default.  Otherwise, it will take advantage of the
           linker and optimize away the linking with the shared
           version of _l_i_b_g_c_c, linking with the static version of
           libgcc by default.  This allows exceptions to
           propagate through such shared libraries, without
           incurring relocation costs at library load time.

           However, if a library or main executable is supposed



2004-02-14                  gcc-3.3.3                          90





GCC(1)                         GNU                         GCC(1)


           to throw or catch exceptions, you must link it using
           the G++ or GCJ driver, as appropriate for the
           languages used in the program, or using the option
           ----sssshhhhaaaarrrreeeedddd----lllliiiibbbbggggcccccccc, such that it is linked with the shared
           _l_i_b_g_c_c.

       ----ssssyyyymmmmbbbboooolllliiiicccc
           Bind references to global symbols when building a
           shared object.  Warn about any unresolved references
           (unless overridden by the link editor option ----XXXXlllliiiinnnnkkkkeeeerrrr
           ----zzzz ----XXXXlllliiiinnnnkkkkeeeerrrr ddddeeeeffffssss).  Only a few systems support this
           option.

       ----XXXXlllliiiinnnnkkkkeeeerrrr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  You can use
           this to supply system-specific linker options which
           GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use ----XXXXlllliiiinnnnkkkkeeeerrrr twice, once for the option and
           once for the argument.  For example, to pass ----aaaasssssssseeeerrrrtttt
           ddddeeeeffffiiiinnnniiiittttiiiioooonnnnssss, you must write ----XXXXlllliiiinnnnkkkkeeeerrrr ----aaaasssssssseeeerrrrtttt ----XXXXlllliiiinnnnkkkkeeeerrrr
           ddddeeeeffffiiiinnnniiiittttiiiioooonnnnssss.  It does not work to write ----XXXXlllliiiinnnnkkkkeeeerrrr
           """"----aaaasssssssseeeerrrrtttt ddddeeeeffffiiiinnnniiiittttiiiioooonnnnssss"""", because this passes the entire
           string as a single argument, which is not what the
           linker expects.

       ----WWWWllll,,,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.

       ----uuuu _s_y_m_b_o_l
           Pretend the symbol _s_y_m_b_o_l is undefined, to force
           linking of library modules to define it.  You can use
           ----uuuu multiple times with different symbols to force
           loading of additional library modules.

       OOOOppppttttiiiioooonnnnssss ffffoooorrrr DDDDiiiirrrreeeeccccttttoooorrrryyyy SSSSeeeeaaaarrrrcccchhhh

       These options specify directories to search for header
       files, for libraries and for parts of the compiler:

       ----IIII_d_i_r
           Add the directory _d_i_r to the head of the list of
           directories to be searched for header files.  This can
           be used to override a system header file, substituting
           your own version, since these directories are searched
           before the system header file directories.  However,
           you should not use this option to add directories that
           contain vendor-supplied system header files (use
           ----iiiissssyyyysssstttteeeemmmm for that).  If you use more than one ----IIII
           option, the directories are scanned in left-to-right
           order; the standard system directories come after.



2004-02-14                  gcc-3.3.3                          91





GCC(1)                         GNU                         GCC(1)


           If a standard system include directory, or a directory
           specified with ----iiiissssyyyysssstttteeeemmmm, is also specified with ----IIII,
           the ----IIII option will be ignored.  The directory will
           still be searched but as a system directory at its
           normal position in the system include chain.  This is
           to ensure that GCC's procedure to fix buggy system
           headers and the ordering for the include_next
           directive are not inadvertently changed.  If you
           really need to change the search order for system
           directories, use the ----nnnnoooossssttttddddiiiinnnncccc and/or ----iiiissssyyyysssstttteeeemmmm
           options.

       ----IIII---- Any directories you specify with ----IIII options before the
           ----IIII---- option are searched only for the case of ####iiiinnnncccclllluuuuddddeeee
           """"_f_i_l_e""""; they are not searched for ####iiiinnnncccclllluuuuddddeeee <<<<_f_i_l_e>>>>.

           If additional directories are specified with ----IIII
           options after the ----IIII----, these directories are searched
           for all ####iiiinnnncccclllluuuuddddeeee directives.  (Ordinarily _a_l_l ----IIII
           directories are used this way.)

           In addition, the ----IIII---- option inhibits the use of the
           current directory (where the current input file came
           from) as the first search directory for ####iiiinnnncccclllluuuuddddeeee
           """"_f_i_l_e"""".  There is no way to override this effect of
           ----IIII----.  With ----IIII.... you can specify searching the directory
           which was current when the compiler was invoked.  That
           is not exactly the same as what the preprocessor does
           by default, but it is often satisfactory.

           ----IIII---- does not inhibit the use of the standard system
           directories for header files.  Thus, ----IIII---- and ----nnnnoooossssttttddddiiiinnnncccc
           are independent.

       ----LLLL_d_i_r
           Add directory _d_i_r to the list of directories to be
           searched for ----llll.

       ----BBBB_p_r_e_f_i_x
           This option specifies where to find the executables,
           libraries, include files, and data files of the
           compiler itself.

           The compiler driver program runs one or more of the
           subprograms _c_p_p, _c_c_1, _a_s and _l_d.  It tries _p_r_e_f_i_x as a
           prefix for each program it tries to run, both with and
           without _m_a_c_h_i_n_e////_v_e_r_s_i_o_n////.

           For each subprogram to be run, the compiler driver
           first tries the ----BBBB prefix, if any.  If that name is
           not found, or if ----BBBB was not specified, the driver
           tries two standard prefixes, which are _/_u_s_r_/_l_i_b_/_g_c_c_/
           and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_-_l_i_b_/.  If neither of those
           results in a file name that is found, the unmodified



2004-02-14                  gcc-3.3.3                          92





GCC(1)                         GNU                         GCC(1)


           program name is searched for using the directories
           specified in your PPPPAAAATTTTHHHH environment variable.

           The compiler will check to see if the path provided by
           the ----BBBB refers to a directory, and if necessary it will
           add a directory separator character at the end of the
           path.

           ----BBBB prefixes that effectively specify directory names
           also apply to libraries in the linker, because the
           compiler translates these options into ----LLLL options for
           the linker.  They also apply to includes files in the
           preprocessor, because the compiler translates these
           options into ----iiiissssyyyysssstttteeeemmmm options for the preprocessor.
           In this case, the compiler appends iiiinnnncccclllluuuuddddeeee to the
           prefix.

           The run-time support file _l_i_b_g_c_c_._a can also be
           searched for using the ----BBBB prefix, if needed.  If it is
           not found there, the two standard prefixes above are
           tried, and that is all.  The file is left out of the
           link if it is not found by those means.

           Another way to specify a prefix much like the ----BBBB
           prefix is to use the environment variable
           GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX.

           As a special kludge, if the path provided by ----BBBB is
           _[_d_i_r_/_]_s_t_a_g_e_N_/, where _N is a number in the range 0 to
           9, then it will be replaced by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is
           to help with boot-strapping the compiler.

       ----ssssppppeeeeccccssss====_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard
           _s_p_e_c_s file, in order to override the defaults that the
           _g_c_c driver program uses when determining what switches
           to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d, etc.  More than one
           ----ssssppppeeeeccccssss====_f_i_l_e can be specified on the command line, and
           they are processed in order, from left to right.

       SSSSppppeeeecccciiiiffffyyyyiiiinnnngggg TTTTaaaarrrrggggeeeetttt MMMMaaaacccchhhhiiiinnnneeee aaaannnndddd CCCCoooommmmppppiiiilllleeeerrrr VVVVeeeerrrrssssiiiioooonnnn

       The usual way to run GCC is to run the executable called
       _g_c_c, or _<_m_a_c_h_i_n_e_>_-_g_c_c when cross-compiling, or
       _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> to run a version other than the
       one that was installed last.  Sometimes this is
       inconvenient, so GCC provides options that will switch to
       another cross-compiler or version.

       ----bbbb _m_a_c_h_i_n_e
           The argument _m_a_c_h_i_n_e specifies the target machine for
           compilation.

           The value to use for _m_a_c_h_i_n_e is the same as was



2004-02-14                  gcc-3.3.3                          93





GCC(1)                         GNU                         GCC(1)


           specified as the machine type when configuring GCC as
           a cross-compiler.  For example, if a cross-compiler
           was configured with ccccoooonnnnffffiiiigggguuuurrrreeee iiii333388886666vvvv, meaning to
           compile for an 80386 running System V, then you would
           specify ----bbbb iiii333388886666vvvv to run that cross compiler.

       ----VVVV _v_e_r_s_i_o_n
           The argument _v_e_r_s_i_o_n specifies which version of GCC to
           run.  This is useful when multiple versions are
           installed.  For example, _v_e_r_s_i_o_n might be 2222....0000, meaning
           to run GCC version 2.0.

       The ----VVVV and ----bbbb options work by running the
       _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> executable, so there's no real
       reason to use them if you can just run that directly.

       HHHHaaaarrrrddddwwwwaaaarrrreeee MMMMooooddddeeeellllssss aaaannnndddd CCCCoooonnnnffffiiiigggguuuurrrraaaattttiiiioooonnnnssss

       Earlier we discussed the standard option ----bbbb which chooses
       among different installed compilers for completely
       different target machines, such as VAX vs. 68000 vs.
       80386.

       In addition, each of these target machine types can have
       its own special options, starting with ----mmmm, to choose among
       various hardware models or configurations---for example,
       68010 vs 68020, floating coprocessor or none.  A single
       installed version of the compiler can compile for any
       model or configuration, according to the options
       specified.

       Some configurations of the compiler also support
       additional special options, usually for compatibility with
       other compilers on the same platform.

       These options are defined by the macro "TARGET_SWITCHES"
       in the machine description.  The default for the options
       is also defined by that macro, which enables you to change
       the defaults.

       _M_6_8_0_x_0 _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the 68000 series.
       The default values for these options depends on which
       style of 68000 was selected when the compiler was
       configured; the defaults for the most common choices are
       given below.

       ----mmmm66668888000000000000
       ----mmmmcccc66668888000000000000
           Generate output for a 68000.  This is the default when
           the compiler is configured for 68000-based systems.

           Use this option for microcontrollers with a 68000 or



2004-02-14                  gcc-3.3.3                          94





GCC(1)                         GNU                         GCC(1)


           EC000 core, including the 68008, 68302, 68306, 68307,
           68322, 68328 and 68356.

       ----mmmm66668888000022220000
       ----mmmmcccc66668888000022220000
           Generate output for a 68020.  This is the default when
           the compiler is configured for 68020-based systems.

       ----mmmm66668888888888881111
           Generate output containing 68881 instructions for
           floating point.  This is the default for most 68020
           systems unless --------nnnnffffpppp was specified when the compiler
           was configured.

       ----mmmm66668888000033330000
           Generate output for a 68030.  This is the default when
           the compiler is configured for 68030-based systems.

       ----mmmm66668888000044440000
           Generate output for a 68040.  This is the default when
           the compiler is configured for 68040-based systems.

           This option inhibits the use of 68881/68882
           instructions that have to be emulated by software on
           the 68040.  Use this option if your 68040 does not
           have code to emulate those instructions.

       ----mmmm66668888000066660000
           Generate output for a 68060.  This is the default when
           the compiler is configured for 68060-based systems.

           This option inhibits the use of 68020 and 68881/68882
           instructions that have to be emulated by software on
           the 68060.  Use this option if your 68060 does not
           have code to emulate those instructions.

       ----mmmmccccppppuuuu33332222
           Generate output for a CPU32.  This is the default when
           the compiler is configured for CPU32-based systems.

           Use this option for microcontrollers with a CPU32 or
           CPU32+ core, including the 68330, 68331, 68332, 68333,
           68334, 68336, 68340, 68341, 68349 and 68360.

       ----mmmm5555222200000000
           Generate output for a 520X ``coldfire'' family cpu.
           This is the default when the compiler is configured
           for 520X-based systems.

           Use this option for microcontroller with a 5200 core,
           including the MCF5202, MCF5203, MCF5204 and MCF5202.

       ----mmmm66668888000022220000----44440000
           Generate output for a 68040, without using any of the



2004-02-14                  gcc-3.3.3                          95





GCC(1)                         GNU                         GCC(1)


           new instructions.  This results in code which can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68040.

       ----mmmm66668888000022220000----66660000
           Generate output for a 68060, without using any of the
           new instructions.  This results in code which can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68060.

       ----mmmmffffppppaaaa
           Generate output containing Sun FPA instructions for
           floating point.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not
           available for all m68k targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this can't be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded targets mmmm66668888kkkk----****----aaaaoooouuuutttt and mmmm66668888kkkk----****----ccccooooffffffff do
           provide software floating point support.

       ----mmmmsssshhhhoooorrrrtttt
           Consider type "int" to be 16 bits wide, like "short
           int".

       ----mmmmnnnnoooobbbbiiiittttffffiiiieeeelllldddd
           Do not use the bit-field instructions.  The ----mmmm66668888000000000000,
           ----mmmmccccppppuuuu33332222 and ----mmmm5555222200000000 options imply ----mmmmnnnnoooobbbbiiiittttffffiiiieeeelllldddd.

       ----mmmmbbbbiiiittttffffiiiieeeelllldddd
           Do use the bit-field instructions.  The ----mmmm66668888000022220000 option
           implies ----mmmmbbbbiiiittttffffiiiieeeelllldddd.  This is the default if you use a
           configuration designed for a 68020.

       ----mmmmrrrrttttdddd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           with the "rtd" instruction, which pops their arguments
           while returning.  This saves one instruction in the
           caller since there is no need to pop the arguments
           there.

           This calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all



2004-02-14                  gcc-3.3.3                          96





GCC(1)                         GNU                         GCC(1)


           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

           The "rtd" instruction is supported by the 68010,
           68020, 68030, 68040, 68060 and CPU32 processors, but
           not by the 68000 or 5200.

       ----mmmmaaaalllliiiiggggnnnn----iiiinnnntttt
       ----mmmmnnnnoooo----aaaalllliiiiggggnnnn----iiiinnnntttt
           Control whether GCC aligns "int", "long", "long long",
           "float", "double", and "long double" variables on a
           32-bit boundary (----mmmmaaaalllliiiiggggnnnn----iiiinnnntttt) or a 16-bit boundary
           (----mmmmnnnnoooo----aaaalllliiiiggggnnnn----iiiinnnntttt).  Aligning variables on 32-bit
           boundaries produces code that runs somewhat faster on
           processors with 32-bit busses at the expense of more
           memory.

           WWWWaaaarrrrnnnniiiinnnngggg:::: if you use the ----mmmmaaaalllliiiiggggnnnn----iiiinnnntttt switch, GCC will
           align structures containing the above types
           differently than most published application binary
           interface specifications for the m68k.

       ----mmmmppppccccrrrreeeellll
           Use the pc-relative addressing mode of the 68000
           directly, instead of using a global offset table.  At
           present, this option implies ----ffffppppiiiicccc, allowing at most a
           16-bit offset for pc-relative addressing.  ----ffffPPPPIIIICCCC is
           not presently supported with ----mmmmppppccccrrrreeeellll, though this
           could be supported for 68020 and higher processors.

       ----mmmmnnnnoooo----ssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
       ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
           Do not (do) assume that unaligned memory references
           will be handled by the system.

       _M_6_8_h_c_1_x _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the 68hc11 and 68hc12
       microcontrollers.  The default values for these options
       depends on which style of microcontroller was selected
       when the compiler was configured; the defaults for the
       most common choices are given below.

       ----mmmm6666888811111111
       ----mmmm66668888hhhhcccc11111111
           Generate output for a 68HC11.  This is the default
           when the compiler is configured for 68HC11-based
           systems.




2004-02-14                  gcc-3.3.3                          97





GCC(1)                         GNU                         GCC(1)


       ----mmmm6666888811112222
       ----mmmm66668888hhhhcccc11112222
           Generate output for a 68HC12.  This is the default
           when the compiler is configured for 68HC12-based
           systems.

       ----mmmm66668888SSSS11112222
       ----mmmm66668888hhhhccccssss11112222
           Generate output for a 68HCS12.

       ----mmmmaaaauuuuttttoooo----iiiinnnnccccddddeeeecccc
           Enable the use of 68HC12 pre and post auto-increment
           and auto-decrement addressing modes.

       ----mmmmiiiinnnnmmmmaaaaxxxx
       ----nnnnoooommmmiiiinnnnmmmmaaaaxxxx
           Enable the use of 68HC12 min and max instructions.

       ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
       ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss
           Treat all calls as being far away (near).  If calls
           are assumed to be far away, the compiler will use the
           "call" instruction to call a function and the "rtc"
           instruction for returning.

       ----mmmmsssshhhhoooorrrrtttt
           Consider type "int" to be 16 bits wide, like "short
           int".

       ----mmmmssssoooofffftttt----rrrreeeegggg----ccccoooouuuunnnntttt====_c_o_u_n_t
           Specify the number of pseudo-soft registers which are
           used for the code generation.  The maximum number is
           32.  Using more pseudo-soft register may or may not
           result in better code depending on the program.  The
           default is 4 for 68HC11 and 2 for 68HC12.

       _V_A_X _O_p_t_i_o_n_s

       These ----mmmm options are defined for the VAX:

       ----mmmmuuuunnnniiiixxxx
           Do not output certain jump instructions ("aobleq" and
           so on) that the Unix assembler for the VAX cannot
           handle across long ranges.

       ----mmmmggggnnnnuuuu
           Do output those jump instructions, on the assumption
           that you will assemble with the GNU assembler.

       ----mmmmgggg Output code for g-format floating point numbers
           instead of d-format.

       _S_P_A_R_C _O_p_t_i_o_n_s




2004-02-14                  gcc-3.3.3                          98





GCC(1)                         GNU                         GCC(1)


       These ----mmmm switches are supported on the SPARC:

       ----mmmmnnnnoooo----aaaapppppppp----rrrreeeeggggssss
       ----mmmmaaaapppppppp----rrrreeeeggggssss
           Specify ----mmmmaaaapppppppp----rrrreeeeggggssss to generate output using the global
           registers 2 through 4, which the SPARC SVR4 ABI
           reserves for applications.  This is the default.

           To be fully SVR4 ABI compliant at the cost of some
           performance loss, specify ----mmmmnnnnoooo----aaaapppppppp----rrrreeeeggggssss.  You should
           compile libraries and system software with this
           option.

       ----mmmmffffppppuuuu
       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
           Generate output containing floating point
           instructions.  This is the default.

       ----mmmmnnnnoooo----ffffppppuuuu
       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not
           available for all SPARC targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded targets ssssppppaaaarrrrcccc----****----aaaaoooouuuutttt and ssssppppaaaarrrrcccclllliiiitttteeee----****----**** do
           provide software floating point support.

           ----mmmmssssoooofffftttt----ffffllllooooaaaatttt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with ----mmmmssssoooofffftttt----ffffllllooooaaaatttt in order for
           this to work.

       ----mmmmhhhhaaaarrrrdddd----qqqquuuuaaaadddd----ffffllllooooaaaatttt
           Generate output containing quad-word (long double)
           floating point instructions.

       ----mmmmssssoooofffftttt----qqqquuuuaaaadddd----ffffllllooooaaaatttt
           Generate output containing library calls for quad-word
           (long double) floating point instructions.  The
           functions called are those specified in the SPARC ABI.
           This is the default.

           As of this writing, there are no sparc implementations
           that have hardware support for the quad-word floating
           point instructions.  They all invoke a trap handler
           for one of these instructions, and then the trap
           handler emulates the effect of the instruction.
           Because of the trap handler overhead, this is much
           slower than calling the ABI library routines.  Thus



2004-02-14                  gcc-3.3.3                          99





GCC(1)                         GNU                         GCC(1)


           the ----mmmmssssoooofffftttt----qqqquuuuaaaadddd----ffffllllooooaaaatttt option is the default.

       ----mmmmnnnnoooo----ffffllllaaaatttt
       ----mmmmffffllllaaaatttt
           With ----mmmmffffllllaaaatttt, the compiler does not generate
           save/restore instructions and will use a ``flat'' or
           single register window calling convention.  This model
           uses %i7 as the frame pointer and is compatible with
           the normal register window model.  Code from either
           may be intermixed.  The local registers and the input
           registers (0--5) are still treated as ``call saved''
           registers and will be saved on the stack as necessary.

           With ----mmmmnnnnoooo----ffffllllaaaatttt (the default), the compiler emits
           save/restore instructions (except for leaf functions)
           and is the normal mode of operation.

       ----mmmmnnnnoooo----uuuunnnnaaaalllliiiiggggnnnneeeedddd----ddddoooouuuubbbblllleeeessss
       ----mmmmuuuunnnnaaaalllliiiiggggnnnneeeedddd----ddddoooouuuubbbblllleeeessss
           Assume that doubles have 8 byte alignment.  This is
           the default.

           With ----mmmmuuuunnnnaaaalllliiiiggggnnnneeeedddd----ddddoooouuuubbbblllleeeessss, GCC assumes that doubles
           have 8 byte alignment only if they are contained in
           another type, or if they have an absolute address.
           Otherwise, it assumes they have 4 byte alignment.
           Specifying this option avoids some rare compatibility
           problems with code generated by other compilers.  It
           is not the default because it results in a performance
           loss, especially for floating point code.

       ----mmmmnnnnoooo----ffffaaaasssstttteeeerrrr----ssssttttrrrruuuuccccttttssss
       ----mmmmffffaaaasssstttteeeerrrr----ssssttttrrrruuuuccccttttssss
           With ----mmmmffffaaaasssstttteeeerrrr----ssssttttrrrruuuuccccttttssss, the compiler assumes that
           structures should have 8 byte alignment.  This enables
           the use of pairs of "ldd" and "std" instructions for
           copies in structure assignment, in place of twice as
           many "ld" and "st" pairs.  However, the use of this
           changed alignment directly violates the SPARC ABI.
           Thus, it's intended only for use on targets where the
           developer acknowledges that their resulting code will
           not be directly in line with the rules of the ABI.

       ----mmmmiiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt
           ----mmmmiiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt, used in addition to ----sssshhhhaaaarrrreeeedddd, tells the
           compiler to not pass ----zzzz tttteeeexxxxtttt to the linker when
           linking a shared object.  Using this option, you can
           link position-dependent code into a shared object.

           ----mmmmiiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt suppresses the ``relocations remain
           against allocatable but non-writable sections'' linker
           error message.  However, the necessary relocations
           will trigger copy-on-write, and the shared object is
           not actually shared across processes.  Instead of



2004-02-14                  gcc-3.3.3                         100





GCC(1)                         GNU                         GCC(1)


           using ----mmmmiiiimmmmppppuuuurrrreeee----tttteeeexxxxtttt, you should compile all source
           code with ----ffffppppiiiicccc or ----ffffPPPPIIIICCCC.

           This option is only available on SunOS and Solaris.

       ----mmmmvvvv8888
       ----mmmmssssppppaaaarrrrcccclllliiiitttteeee
           These two options select variations on the SPARC
           architecture.

           By default (unless specifically configured for the
           Fujitsu SPARClite), GCC generates code for the v7
           variant of the SPARC architecture.

           ----mmmmvvvv8888 will give you SPARC v8 code.  The only difference
           from v7 code is that the compiler emits the integer
           multiply and integer divide instructions which exist
           in SPARC v8 but not in SPARC v7.

           ----mmmmssssppppaaaarrrrcccclllliiiitttteeee will give you SPARClite code.  This adds
           the integer multiply, integer divide step and scan
           ("ffs") instructions which exist in SPARClite but not
           in SPARC v7.

           These options are deprecated and will be deleted in a
           future GCC release.  They have been replaced with
           ----mmmmccccppppuuuu====xxxxxxxxxxxx.

       ----mmmmccccyyyypppprrrreeeessssssss
       ----mmmmssssuuuuppppeeeerrrrssssppppaaaarrrrcccc
           These two options select the processor for which the
           code is optimized.

           With ----mmmmccccyyyypppprrrreeeessssssss (the default), the compiler optimizes
           code for the Cypress CY7C602 chip, as used in the
           SPARCStation/SPARCServer 3xx series.  This is also
           appropriate for the older SPARCStation 1, 2, IPX etc.

           With ----mmmmssssuuuuppppeeeerrrrssssppppaaaarrrrcccc the compiler optimizes code for the
           SuperSPARC cpu, as used in the SPARCStation 10, 1000
           and 2000 series.  This flag also enables use of the
           full SPARC v8 instruction set.

           These options are deprecated and will be deleted in a
           future GCC release.  They have been replaced with
           ----mmmmccccppppuuuu====xxxxxxxxxxxx.

       ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction
           scheduling parameters for machine type _c_p_u___t_y_p_e.
           Supported values for _c_p_u___t_y_p_e are vvvv7777, ccccyyyypppprrrreeeessssssss, vvvv8888,
           ssssuuuuppppeeeerrrrssssppppaaaarrrrcccc, ssssppppaaaarrrrcccclllliiiitttteeee, hhhhyyyyppppeeeerrrrssssppppaaaarrrrcccc, ssssppppaaaarrrrcccclllliiiitttteeee88886666xxxx, ffff999933330000,
           ffff999933334444, ssssppppaaaarrrrcccclllleeeetttt, ttttsssscccc777700001111, vvvv9999, uuuullllttttrrrraaaassssppppaaaarrrrcccc, and
           uuuullllttttrrrraaaassssppppaaaarrrrcccc3333.



2004-02-14                  gcc-3.3.3                         101





GCC(1)                         GNU                         GCC(1)


           Default instruction scheduling parameters are used for
           values that select an architecture and not an
           implementation.  These are vvvv7777, vvvv8888, ssssppppaaaarrrrcccclllliiiitttteeee,
           ssssppppaaaarrrrcccclllleeeetttt, vvvv9999.

           Here is a list of each supported architecture and
           their supported implementations.

                       v7:             cypress
                       v8:             supersparc, hypersparc
                       sparclite:      f930, f934, sparclite86x
                       sparclet:       tsc701
                       v9:             ultrasparc, ultrasparc3


       ----mmmmttttuuuunnnneeee====_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the instruction set or
           register set that the option ----mmmmccccppppuuuu====_c_p_u___t_y_p_e would.

           The same values for ----mmmmccccppppuuuu====_c_p_u___t_y_p_e can be used for
           ----mmmmttttuuuunnnneeee====_c_p_u___t_y_p_e, but the only useful values are those
           that select a particular cpu implementation.  Those
           are ccccyyyypppprrrreeeessssssss, ssssuuuuppppeeeerrrrssssppppaaaarrrrcccc, hhhhyyyyppppeeeerrrrssssppppaaaarrrrcccc, ffff999933330000, ffff999933334444,
           ssssppppaaaarrrrcccclllliiiitttteeee88886666xxxx, ttttsssscccc777700001111, uuuullllttttrrrraaaassssppppaaaarrrrcccc, and uuuullllttttrrrraaaassssppppaaaarrrrcccc3333.

       These ----mmmm switches are supported in addition to the above
       on the SPARCLET processor.

       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           Generate code for a processor running in little-endian
           mode.

       ----mmmmlllliiiivvvveeee----gggg0000
           Treat register "%g0" as a normal register.  GCC will
           continue to clobber it as necessary but will not
           assume it always reads as 0.

       ----mmmmbbbbrrrrooookkkkeeeennnn----ssssaaaavvvveeeerrrreeeessssttttoooorrrreeee
           Generate code that does not use non-trivial forms of
           the "save" and "restore" instructions.  Early versions
           of the SPARCLET processor do not correctly handle
           "save" and "restore" instructions used with arguments.
           They correctly handle them used without arguments.  A
           "save" instruction used without arguments increments
           the current window pointer but does not allocate a new
           stack frame.  It is assumed that the window overflow
           trap handler will properly handle this case as will
           interrupt handlers.

       These ----mmmm switches are supported in addition to the above
       on SPARC V9 processors in 64-bit environments.





2004-02-14                  gcc-3.3.3                         102





GCC(1)                         GNU                         GCC(1)


       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           Generate code for a processor running in little-endian
           mode. It is only available for a few configurations
           and most notably not on Solaris.

       ----mmmm33332222
       ----mmmm66664444
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.

       ----mmmmccccmmmmooooddddeeeellll====mmmmeeeeddddlllloooowwww
           Generate code for the Medium/Low code model: the
           program must be linked in the low 32 bits of the
           address space.  Pointers are 64 bits.  Programs can be
           statically or dynamically linked.

       ----mmmmccccmmmmooooddddeeeellll====mmmmeeeeddddmmmmiiiidddd
           Generate code for the Medium/Middle code model: the
           program must be linked in the low 44 bits of the
           address space, the text segment must be less than 2G
           bytes, and data segment must be within 2G of the text
           segment.  Pointers are 64 bits.

       ----mmmmccccmmmmooooddddeeeellll====mmmmeeeeddddaaaannnnyyyy
           Generate code for the Medium/Anywhere code model: the
           program may be linked anywhere in the address space,
           the text segment must be less than 2G bytes, and data
           segment must be within 2G of the text segment.
           Pointers are 64 bits.

       ----mmmmccccmmmmooooddddeeeellll====eeeemmmmbbbbmmmmeeeeddddaaaannnnyyyy
           Generate code for the Medium/Anywhere code model for
           embedded systems: assume a 32-bit text and a 32-bit
           data segment, both starting anywhere (determined at
           link time).  Register %g4 points to the base of the
           data segment.  Pointers are still 64 bits.  Programs
           are statically linked, PIC is not supported.

       ----mmmmssssttttaaaacccckkkk----bbbbiiiiaaaassss
       ----mmmmnnnnoooo----ssssttttaaaacccckkkk----bbbbiiiiaaaassss
           With ----mmmmssssttttaaaacccckkkk----bbbbiiiiaaaassss, GCC assumes that the stack pointer,
           and frame pointer if present, are offset by -2047
           which must be added back when making stack frame
           references.  Otherwise, assume no such offset is
           present.

       _A_R_M _O_p_t_i_o_n_s

       These ----mmmm options are defined for Advanced RISC Machines
       (ARM) architectures:





2004-02-14                  gcc-3.3.3                         103





GCC(1)                         GNU                         GCC(1)


       ----mmmmaaaappppccccssss----ffffrrrraaaammmmeeee
           Generate a stack frame that is compliant with the ARM
           Procedure Call Standard for all functions, even if
           this is not strictly necessary for correct execution
           of the code.  Specifying ----ffffoooommmmiiiitttt----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr with
           this option will cause the stack frames not to be
           generated for leaf functions.  The default is ----mmmmnnnnoooo----
           aaaappppccccssss----ffffrrrraaaammmmeeee.

       ----mmmmaaaappppccccssss
           This is a synonym for ----mmmmaaaappppccccssss----ffffrrrraaaammmmeeee.

       ----mmmmaaaappppccccssss----22226666
           Generate code for a processor running with a 26-bit
           program counter, and conforming to the function
           calling standards for the APCS 26-bit option.  This
           option replaces the ----mmmm2222 and ----mmmm3333 options of previous
           releases of the compiler.

       ----mmmmaaaappppccccssss----33332222
           Generate code for a processor running with a 32-bit
           program counter, and conforming to the function
           calling standards for the APCS 32-bit option.  This
           option replaces the ----mmmm6666 option of previous releases of
           the compiler.

       ----mmmmtttthhhhuuuummmmbbbb----iiiinnnntttteeeerrrrwwwwoooorrrrkkkk
           Generate code which supports calling between the ARM
           and Thumb instruction sets.  Without this option the
           two instruction sets cannot be reliably used inside
           one program.  The default is ----mmmmnnnnoooo----tttthhhhuuuummmmbbbb----iiiinnnntttteeeerrrrwwwwoooorrrrkkkk,
           since slightly larger code is generated when ----mmmmtttthhhhuuuummmmbbbb----
           iiiinnnntttteeeerrrrwwwwoooorrrrkkkk is specified.

       ----mmmmnnnnoooo----sssscccchhhheeeedddd----pppprrrroooolllloooogggg
           Prevent the reordering of instructions in the function
           prolog, or the merging of those instruction with the
           instructions in the function's body.  This means that
           all functions will start with a recognizable set of
           instructions (or in fact one of a choice from a small
           set of different function prologues), and this
           information can be used to locate the start if
           functions inside an executable piece of code.  The
           default is ----mmmmsssscccchhhheeeedddd----pppprrrroooolllloooogggg.

       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
           Generate output containing floating point
           instructions.  This is the default.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not
           available for all ARM targets.  Normally the
           facilities of the machine's usual C compiler are used,



2004-02-14                  gcc-3.3.3                         104





GCC(1)                         GNU                         GCC(1)


           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.

           ----mmmmssssoooofffftttt----ffffllllooooaaaatttt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with ----mmmmssssoooofffftttt----ffffllllooooaaaatttt in order for
           this to work.

       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           Generate code for a processor running in little-endian
           mode.  This is the default for all standard
           configurations.

       ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn
           Generate code for a processor running in big-endian
           mode; the default is to compile code for a little-
           endian processor.

       ----mmmmwwwwoooorrrrddddssss----lllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           This option only applies when generating code for big-
           endian processors.  Generate code for a little-endian
           word order but a big-endian byte order.  That is, a
           byte order of the form 33332222111100007777666655554444.  Note: this option
           should only be used if you require compatibility with
           code for big-endian ARM processors generated by
           versions of the compiler prior to 2.8.

       ----mmmmaaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss
           Generate code that will not trap if the MMU has
           alignment traps enabled.  On ARM architectures prior
           to ARMv4, there were no instructions to access half-
           word objects stored in memory.  However, when reading
           from memory a feature of the ARM architecture allows a
           word load to be used, even if the address is
           unaligned, and the processor core will rotate the data
           as it is being loaded.  This option tells the compiler
           that such misaligned accesses will cause a MMU trap
           and that it should instead synthesize the access as a
           series of byte accesses.  The compiler can still use
           word accesses to load half-word data if it knows that
           the address is aligned to a word boundary.

           This option is ignored when compiling for ARM
           architecture 4 or later, since these processors have
           instructions to directly access half-word objects in
           memory.

       ----mmmmnnnnoooo----aaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss
           Generate code that assumes that the MMU will not trap
           unaligned accesses.  This produces better code when
           the target instruction set does not have half-word



2004-02-14                  gcc-3.3.3                         105





GCC(1)                         GNU                         GCC(1)


           memory operations (i.e. implementations prior to
           ARMv4).

           Note that you cannot use this option to access
           unaligned word objects, since the processor will only
           fetch one 32-bit aligned object from memory.

           The default setting for most targets is ----mmmmnnnnoooo----
           aaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss, since this produces better code when
           there are no half-word memory instructions available.

       ----mmmmsssshhhhoooorrrrtttt----llllooooaaaadddd----bbbbyyyytttteeeessss
       ----mmmmnnnnoooo----sssshhhhoooorrrrtttt----llllooooaaaadddd----wwwwoooorrrrddddssss
           These are deprecated aliases for ----mmmmaaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss.

       ----mmmmnnnnoooo----sssshhhhoooorrrrtttt----llllooooaaaadddd----bbbbyyyytttteeeessss
       ----mmmmsssshhhhoooorrrrtttt----llllooooaaaadddd----wwwwoooorrrrddddssss
           This are deprecated aliases for ----mmmmnnnnoooo----aaaalllliiiiggggnnnnmmmmeeeennnntttt----ttttrrrraaaappppssss.

       ----mmmmccccppppuuuu====_n_a_m_e
           This specifies the name of the target ARM processor.
           GCC uses this name to determine what kind of
           instructions it can emit when generating assembly
           code.  Permissible names are: aaaarrrrmmmm2222, aaaarrrrmmmm222255550000, aaaarrrrmmmm3333,
           aaaarrrrmmmm6666, aaaarrrrmmmm66660000, aaaarrrrmmmm666600000000, aaaarrrrmmmm666611110000, aaaarrrrmmmm666622220000, aaaarrrrmmmm7777, aaaarrrrmmmm7777mmmm,
           aaaarrrrmmmm7777dddd, aaaarrrrmmmm7777ddddmmmm, aaaarrrrmmmm7777ddddiiii, aaaarrrrmmmm7777ddddmmmmiiii, aaaarrrrmmmm77770000, aaaarrrrmmmm777700000000,
           aaaarrrrmmmm777700000000iiii, aaaarrrrmmmm777711110000, aaaarrrrmmmm777711110000cccc, aaaarrrrmmmm7777111100000000, aaaarrrrmmmm7777555500000000, aaaarrrrmmmm7777555500000000ffffeeee,
           aaaarrrrmmmm7777ttttddddmmmmiiii, aaaarrrrmmmm8888, ssssttttrrrroooonnnnggggaaaarrrrmmmm, ssssttttrrrroooonnnnggggaaaarrrrmmmm111111110000,
           ssssttttrrrroooonnnnggggaaaarrrrmmmm1111111100000000, aaaarrrrmmmm8888, aaaarrrrmmmm888811110000, aaaarrrrmmmm9999, aaaarrrrmmmm9999eeee, aaaarrrrmmmm999922220000,
           aaaarrrrmmmm999922220000tttt, aaaarrrrmmmm999944440000tttt, aaaarrrrmmmm9999ttttddddmmmmiiii, aaaarrrrmmmm11110000ttttddddmmmmiiii, aaaarrrrmmmm1111000022220000tttt,
           xxxxssssccccaaaalllleeee.

       ----mmmmttttuuuunnnneeee====_n_a_m_e
           This option is very similar to the ----mmmmccccppppuuuu==== option,
           except that instead of specifying the actual target
           processor type, and hence restricting which
           instructions can be used, it specifies that GCC should
           tune the performance of the code as if the target were
           of the type specified in this option, but still
           choosing the instructions that it will generate based
           on the cpu specified by a ----mmmmccccppppuuuu==== option.  For some ARM
           implementations better performance can be obtained by
           using this option.

       ----mmmmaaaarrrrcccchhhh====_n_a_m_e
           This specifies the name of the target ARM
           architecture.  GCC uses this name to determine what
           kind of instructions it can emit when generating
           assembly code.  This option can be used in conjunction
           with or instead of the ----mmmmccccppppuuuu==== option.  Permissible
           names are: aaaarrrrmmmmvvvv2222, aaaarrrrmmmmvvvv2222aaaa, aaaarrrrmmmmvvvv3333, aaaarrrrmmmmvvvv3333mmmm, aaaarrrrmmmmvvvv4444,
           aaaarrrrmmmmvvvv4444tttt, aaaarrrrmmmmvvvv5555, aaaarrrrmmmmvvvv5555tttt, aaaarrrrmmmmvvvv5555tttteeee.





2004-02-14                  gcc-3.3.3                         106





GCC(1)                         GNU                         GCC(1)


       ----mmmmffffppppeeee====_n_u_m_b_e_r
       ----mmmmffffpppp====_n_u_m_b_e_r
           This specifies the version of the floating point
           emulation available on the target.  Permissible values
           are 2 and 3.  ----mmmmffffpppp==== is a synonym for ----mmmmffffppppeeee====, for
           compatibility with older versions of GCC.

       ----mmmmssssttttrrrruuuuccccttttuuuurrrreeee----ssssiiiizzzzeeee----bbbboooouuuunnnnddddaaaarrrryyyy====_n
           The size of all structures and unions will be rounded
           up to a multiple of the number of bits set by this
           option.  Permissible values are 8 and 32.  The default
           value varies for different toolchains.  For the COFF
           targeted toolchain the default value is 8.  Specifying
           the larger number can produce faster, more efficient
           code, but can also increase the size of the program.
           The two values are potentially incompatible.  Code
           compiled with one value cannot necessarily expect to
           work with code or libraries compiled with the other
           value, if they exchange information using structures
           or unions.

       ----mmmmaaaabbbboooorrrrtttt----oooonnnn----nnnnoooorrrreeeettttuuuurrrrnnnn
           Generate a call to the function "abort" at the end of
           a "noreturn" function.  It will be executed if the
           function tries to return.

       ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
       ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss
           Tells the compiler to perform function calls by first
           loading the address of the function into a register
           and then performing a subroutine call on this
           register.  This switch is needed if the target
           function will lie outside of the 64 megabyte
           addressing range of the offset based version of
           subroutine call instruction.

           Even if this switch is enabled, not all function calls
           will be turned into long calls.  The heuristic is that
           static functions, functions which have the sssshhhhoooorrrrtttt----ccccaaaallllllll
           attribute, functions that are inside the scope of a
           ####pppprrrraaaaggggmmmmaaaa nnnnoooo____lllloooonnnngggg____ccccaaaallllllllssss directive and functions whose
           definitions have already been compiled within the
           current compilation unit, will not be turned into long
           calls.  The exception to this rule is that weak
           function definitions, functions with the lllloooonnnngggg----ccccaaaallllllll
           attribute or the sssseeeeccccttttiiiioooonnnn attribute, and functions that
           are within the scope of a ####pppprrrraaaaggggmmmmaaaa lllloooonnnngggg____ccccaaaallllllllssss
           directive, will always be turned into long calls.

           This feature is not enabled by default.  Specifying
           ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss will restore the default behavior, as
           will placing the function calls within the scope of a
           ####pppprrrraaaaggggmmmmaaaa lllloooonnnngggg____ccccaaaallllllllssss____ooooffffffff directive.  Note these switches
           have no effect on how the compiler generates code to



2004-02-14                  gcc-3.3.3                         107





GCC(1)                         GNU                         GCC(1)


           handle function calls via function pointers.

       ----mmmmnnnnoooopppp----ffffuuuunnnn----ddddlllllllliiiimmmmppppoooorrrrtttt
           Disable support for the "dllimport" attribute.

       ----mmmmssssiiiinnnngggglllleeee----ppppiiiicccc----bbbbaaaasssseeee
           Treat the register used for PIC addressing as read-
           only, rather than loading it in the prologue for each
           function.  The run-time system is responsible for
           initializing this register with an appropriate value
           before execution begins.

       ----mmmmppppiiiicccc----rrrreeeeggggiiiisssstttteeeerrrr====_r_e_g
           Specify the register to be used for PIC addressing.
           The default is R10 unless stack-checking is enabled,
           when R9 is used.

       ----mmmmppppooookkkkeeee----ffffuuuunnnnccccttttiiiioooonnnn----nnnnaaaammmmeeee
           Write the name of each function into the text section,
           directly preceding the function prologue.  The
           generated code is similar to this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4

           When performing a stack backtrace, code can inspect
           the value of "pc" stored at "fp + 0".  If the trace
           function then looks at location "pc - 12" and the top
           8 bits are set, then we know that there is a function
           name embedded immediately preceding this location and
           has length "((pc[-3]) & 0xff000000)".

       ----mmmmtttthhhhuuuummmmbbbb
           Generate code for the 16-bit Thumb instruction set.
           The default is to use the 32-bit ARM instruction set.

       ----mmmmttttppppccccssss----ffffrrrraaaammmmeeee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all non-leaf
           functions.  (A leaf function is one that does not call
           any other functions.)  The default is ----mmmmnnnnoooo----ttttppppccccssss----ffffrrrraaaammmmeeee.

       ----mmmmttttppppccccssss----lllleeeeaaaaffff----ffffrrrraaaammmmeeee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all leaf functions.
           (A leaf function is one that does not call any other
           functions.)  The default is ----mmmmnnnnoooo----aaaappppccccssss----lllleeeeaaaaffff----ffffrrrraaaammmmeeee.



2004-02-14                  gcc-3.3.3                         108





GCC(1)                         GNU                         GCC(1)


       ----mmmmccccaaaalllllllleeeeeeee----ssssuuuuppppeeeerrrr----iiiinnnntttteeeerrrrwwwwoooorrrrkkkkiiiinnnngggg
           Gives all externally visible functions in the file
           being compiled an ARM instruction set header which
           switches to Thumb mode before executing the rest of
           the function.  This allows these functions to be
           called from non-interworking code.

       ----mmmmccccaaaalllllllleeeerrrr----ssssuuuuppppeeeerrrr----iiiinnnntttteeeerrrrwwwwoooorrrrkkkkiiiinnnngggg
           Allows calls via function pointers (including virtual
           functions) to execute correctly regardless of whether
           the target code has been compiled for interworking or
           not.  There is a small overhead in the cost of
           executing a function pointer if this option is
           enabled.

       _M_N_1_0_2_0_0 _O_p_t_i_o_n_s

       These ----mmmm options are defined for Matsushita MN10200
       architectures:

       ----mmmmrrrreeeellllaaaaxxxx
           Indicate to the linker that it should perform a
           relaxation optimization pass to shorten branches,
           calls and absolute memory addresses.  This option only
           has an effect when used on the command line for the
           final link step.

           This option makes symbolic debugging impossible.

       _M_N_1_0_3_0_0 _O_p_t_i_o_n_s

       These ----mmmm options are defined for Matsushita MN10300
       architectures:

       ----mmmmmmmmuuuulllltttt----bbbbuuuugggg
           Generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.  This is the
           default.

       ----mmmmnnnnoooo----mmmmuuuulllltttt----bbbbuuuugggg
           Do not generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.

       ----mmmmaaaammmm33333333
           Generate code which uses features specific to the AM33
           processor.

       ----mmmmnnnnoooo----aaaammmm33333333
           Do not generate code which uses features specific to
           the AM33 processor.  This is the default.

       ----mmmmnnnnoooo----ccccrrrrtttt0000
           Do not link in the C run-time initialization object
           file.



2004-02-14                  gcc-3.3.3                         109





GCC(1)                         GNU                         GCC(1)


       ----mmmmrrrreeeellllaaaaxxxx
           Indicate to the linker that it should perform a
           relaxation optimization pass to shorten branches,
           calls and absolute memory addresses.  This option only
           has an effect when used on the command line for the
           final link step.

           This option makes symbolic debugging impossible.

       _M_3_2_R_/_D _O_p_t_i_o_n_s

       These ----mmmm options are defined for Mitsubishi M32R/D
       architectures:

       ----mmmm33332222rrrrxxxx
           Generate code for the M32R/X.

       ----mmmm33332222rrrr
           Generate code for the M32R.  This is the default.

       ----mmmmccccooooddddeeee----mmmmooooddddeeeellll====ssssmmmmaaaallllllll
           Assume all objects live in the lower 16MB of memory
           (so that their addresses can be loaded with the "ld24"
           instruction), and assume all subroutines are reachable
           with the "bl" instruction.  This is the default.

           The addressability of a particular object can be set
           with the "model" attribute.

       ----mmmmccccooooddddeeee----mmmmooooddddeeeellll====mmmmeeeeddddiiiiuuuummmm
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume all
           subroutines are reachable with the "bl" instruction.

       ----mmmmccccooooddddeeee----mmmmooooddddeeeellll====llllaaaarrrrggggeeee
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume
           subroutines may not be reachable with the "bl"
           instruction (the compiler will generate the much
           slower "seth/add3/jl" instruction sequence).

       ----mmmmssssddddaaaattttaaaa====nnnnoooonnnneeee
           Disable use of the small data area.  Variables will be
           put into one of ....ddddaaaattttaaaa, bbbbssssssss, or ....rrrrooooddddaaaattttaaaa (unless the
           "section" attribute has been specified).  This is the
           default.

           The small data area consists of sections ....ssssddddaaaattttaaaa and
           ....ssssbbbbssssssss.  Objects may be explicitly put in the small
           data area with the "section" attribute using one of
           these sections.




2004-02-14                  gcc-3.3.3                         110





GCC(1)                         GNU                         GCC(1)


       ----mmmmssssddddaaaattttaaaa====ssssddddaaaattttaaaa
           Put small global and static data in the small data
           area, but do not generate special code to reference
           them.

       ----mmmmssssddddaaaattttaaaa====uuuusssseeee
           Put small global and static data in the small data
           area, and generate special instructions to reference
           them.

       ----GGGG _n_u_m
           Put global and static objects less than or equal to
           _n_u_m bytes into the small data or bss sections instead
           of the normal data or bss sections.  The default value
           of _n_u_m is 8.  The ----mmmmssssddddaaaattttaaaa option must be set to one of
           ssssddddaaaattttaaaa or uuuusssseeee for this option to have any effect.

           All modules should be compiled with the same ----GGGG _n_u_m
           value.  Compiling with different values of _n_u_m may or
           may not work; if it doesn't the linker will give an
           error message---incorrect code will not be generated.

       _M_8_8_K _O_p_t_i_o_n_s

       These ----mmmm options are defined for Motorola 88k
       architectures:

       ----mmmm88888888000000000000
           Generate code that works well on both the m88100 and
           the m88110.

       ----mmmm88888888111100000000
           Generate code that works best for the m88100, but that
           also runs on the m88110.

       ----mmmm88888888111111110000
           Generate code that works best for the m88110, and may
           not run on the m88100.

       ----mmmmbbbbiiiigggg----ppppiiiicccc
           Obsolete option to be removed from the next revision.
           Use ----ffffPPPPIIIICCCC.

       ----mmmmiiiiddddeeeennnnttttiiiiffffyyyy----rrrreeeevvvviiiissssiiiioooonnnn
           Include an "ident" directive in the assembler output
           recording the source file name, compiler name and
           version, timestamp, and compilation flags used.

       ----mmmmnnnnoooo----uuuunnnnddddeeeerrrrssssccccoooorrrreeeessss
           In assembler output, emit symbol names without adding
           an underscore character at the beginning of each name.
           The default is to use an underscore as prefix on each
           name.




2004-02-14                  gcc-3.3.3                         111





GCC(1)                         GNU                         GCC(1)


       ----mmmmooooccccssss----ddddeeeebbbbuuuugggg----iiiinnnnffffoooo
       ----mmmmnnnnoooo----ooooccccssss----ddddeeeebbbbuuuugggg----iiiinnnnffffoooo
           Include (or omit) additional debugging information
           (about registers used in each stack frame) as
           specified in the 88open Object Compatibility Standard,
           ``OCS''.  This extra information allows debugging of
           code that has had the frame pointer eliminated.  The
           default for SVr4 and Delta 88 SVr3.2 is to include
           this information; other 88k configurations omit this
           information by default.

       ----mmmmooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn
           When emitting COFF debugging information for automatic
           variables and parameters stored on the stack, use the
           offset from the canonical frame address, which is the
           stack pointer (register 31) on entry to the function.
           The SVr4 and Delta88 SVr3.2, and BCS configurations
           use ----mmmmooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn; other 88k configurations
           have the default ----mmmmnnnnoooo----ooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn.

       ----mmmmnnnnoooo----ooooccccssss----ffffrrrraaaammmmeeee----ppppoooossssiiiittttiiiioooonnnn
           When emitting COFF debugging information for automatic
           variables and parameters stored on the stack, use the
           offset from the frame pointer register (register 30).
           When this option is in effect, the frame pointer is
           not eliminated when debugging information is selected
           by the -g switch.

       ----mmmmooooppppttttiiiimmmmiiiizzzzeeee----aaaarrrrgggg----aaaarrrreeeeaaaa
           Save space by reorganizing the stack frame.  This
           option generates code that does not agree with the
           88open specifications, but uses less memory.

       ----mmmmnnnnoooo----ooooppppttttiiiimmmmiiiizzzzeeee----aaaarrrrgggg----aaaarrrreeeeaaaa
           Do not reorganize the stack frame to save space.  This
           is the default.  The generated conforms to the
           specification, but uses more memory.

       ----mmmmsssshhhhoooorrrrtttt----ddddaaaattttaaaa----_n_u_m
           Generate smaller data references by making them
           relative to "r0", which allows loading a value using a
           single instruction (rather than the usual two).  You
           control which data references are affected by
           specifying _n_u_m with this option.  For example, if you
           specify ----mmmmsssshhhhoooorrrrtttt----ddddaaaattttaaaa----555511112222, then the data references
           affected are those involving displacements of less
           than 512 bytes.  ----mmmmsssshhhhoooorrrrtttt----ddddaaaattttaaaa----_n_u_m is not effective for
           _n_u_m greater than 64k.

       ----mmmmsssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee
       ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee
           Do, or don't, generate code to guarantee sequential
           consistency of volatile memory references.  By
           default, consistency is guaranteed.



2004-02-14                  gcc-3.3.3                         112





GCC(1)                         GNU                         GCC(1)


           The order of memory references made by the MC88110
           processor does not always match the order of the
           instructions requesting those references.  In
           particular, a load instruction may execute before a
           preceding store instruction.  Such reordering violates
           sequential consistency of volatile memory references,
           when there are multiple processors.   When consistency
           must be guaranteed, GCC generates special
           instructions, as needed, to force execution in the
           proper order.

           The MC88100 processor does not reorder memory
           references and so always provides sequential
           consistency.  However, by default, GCC generates the
           special instructions to guarantee consistency even
           when you use ----mmmm88888888111100000000, so that the code may be run on
           an MC88110 processor.  If you intend to run your code
           only on the MC88100 processor, you may use ----mmmmnnnnoooo----
           sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee.

           The extra code generated to guarantee consistency may
           affect the performance of your application.  If you
           know that you can safely forgo this guarantee, you may
           use ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee.

       ----mmmmssssvvvvrrrr4444
       ----mmmmssssvvvvrrrr3333
           Turn on (----mmmmssssvvvvrrrr4444) or off (----mmmmssssvvvvrrrr3333) compiler extensions
           related to System V release 4 (SVr4).  This controls
           the following:

           1.  Which variant of the assembler syntax to emit.

           2.  ----mmmmssssvvvvrrrr4444 makes the C preprocessor recognize ####pppprrrraaaaggggmmmmaaaa
               wwwweeeeaaaakkkk that is used on System V release 4.

           3.  ----mmmmssssvvvvrrrr4444 makes GCC issue additional declaration
               directives used in SVr4.

           ----mmmmssssvvvvrrrr4444 is the default for the m88k-motorola-sysv4
           configuration.  ----mmmmssssvvvvrrrr3333 is the default for all other
           m88k configurations.

       ----mmmmvvvveeeerrrrssssiiiioooonnnn----00003333....00000000
           This option is obsolete, and is ignored.

       ----mmmmnnnnoooo----cccchhhheeeecccckkkk----zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn
       ----mmmmcccchhhheeeecccckkkk----zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn
           Do, or don't, generate code to guarantee that integer
           division by zero will be detected.  By default,
           detection is guaranteed.

           Some models of the MC88100 processor fail to trap upon
           integer division by zero under certain conditions.  By



2004-02-14                  gcc-3.3.3                         113





GCC(1)                         GNU                         GCC(1)


           default, when compiling code that might be run on such
           a processor, GCC generates code that explicitly checks
           for zero-valued divisors and traps with exception
           number 503 when one is detected.  Use of ----mmmmnnnnoooo----cccchhhheeeecccckkkk----
           zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn suppresses such checking for code
           generated to run on an MC88100 processor.

           GCC assumes that the MC88110 processor correctly
           detects all instances of integer division by zero.
           When ----mmmm88888888111111110000 is specified, no explicit checks for
           zero-valued divisors are generated, and both ----mmmmcccchhhheeeecccckkkk----
           zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn and ----mmmmnnnnoooo----cccchhhheeeecccckkkk----zzzzeeeerrrroooo----ddddiiiivvvviiiissssiiiioooonnnn are
           ignored.

       ----mmmmuuuusssseeee----ddddiiiivvvv----iiiinnnnssssttttrrrruuuuccccttttiiiioooonnnn
           Use the div instruction for signed integer division on
           the MC88100 processor.  By default, the div
           instruction is not used.

           On the MC88100 processor the signed integer division
           instruction div) traps to the operating system on a
           negative operand.  The operating system transparently
           completes the operation, but at a large cost in
           execution time.  By default, when compiling code that
           might be run on an MC88100 processor, GCC emulates
           signed integer division using the unsigned integer
           division instruction divu), thereby avoiding the large
           penalty of a trap to the operating system.  Such
           emulation has its own, smaller, execution cost in both
           time and space.  To the extent that your code's
           important signed integer division operations are
           performed on two nonnegative operands, it may be
           desirable to use the div instruction directly.

           On the MC88110 processor the div instruction (also
           known as the divs instruction) processes negative
           operands without trapping to the operating system.
           When ----mmmm88888888111111110000 is specified, ----mmmmuuuusssseeee----ddddiiiivvvv----iiiinnnnssssttttrrrruuuuccccttttiiiioooonnnn is
           ignored, and the div instruction is used for signed
           integer division.

           Note that the result of dividing "INT_MIN" by -1 is
           undefined.  In particular, the behavior of such a
           division with and without ----mmmmuuuusssseeee----ddddiiiivvvv----iiiinnnnssssttttrrrruuuuccccttttiiiioooonnnn may
           differ.

       ----mmmmttttrrrraaaapppp----llllaaaarrrrggggeeee----sssshhhhiiiifffftttt
       ----mmmmhhhhaaaannnnddddlllleeee----llllaaaarrrrggggeeee----sssshhhhiiiifffftttt
           Include code to detect bit-shifts of more than 31
           bits; respectively, trap such shifts or emit code to
           handle them properly.  By default GCC makes no special
           provision for large bit shifts.





2004-02-14                  gcc-3.3.3                         114





GCC(1)                         GNU                         GCC(1)


       ----mmmmwwwwaaaarrrrnnnn----ppppaaaasssssssseeeedddd----ssssttttrrrruuuuccccttttssss
           Warn when a function passes a struct as an argument or
           result.  Structure-passing conventions have changed
           during the evolution of the C language, and are often
           the source of portability problems.  By default, GCC
           issues no such warning.

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These ----mmmm options are defined for the IBM RS/6000 and
       PowerPC:

       ----mmmmppppoooowwwweeeerrrr
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrr
       ----mmmmppppoooowwwweeeerrrr2222
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrr2222
       ----mmmmppppoooowwwweeeerrrrppppcccc
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc
       ----mmmmppppoooowwwweeeerrrrppppcccc----ggggppppoooopppptttt
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc----ggggppppoooopppptttt
       ----mmmmppppoooowwwweeeerrrrppppcccc----ggggffffxxxxoooopppptttt
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc----ggggffffxxxxoooopppptttt
       ----mmmmppppoooowwwweeeerrrrppppcccc66664444
       ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc66664444
           GCC supports two related instruction set architectures
           for the RS/6000 and PowerPC.  The _P_O_W_E_R instruction
           set are those instructions supported by the rrrriiiioooossss chip
           set used in the original RS/6000 systems and the
           _P_o_w_e_r_P_C instruction set is the architecture of the
           Motorola MPC5xx, MPC6xx, MPC8xx microprocessors, and
           the IBM 4xx microprocessors.

           Neither architecture is a subset of the other.
           However there is a large common subset of instructions
           supported by both.  An MQ register is included in
           processors supporting the POWER architecture.

           You use these options to specify which instructions
           are available on the processor you are using.  The
           default value of these options is determined when
           configuring GCC.  Specifying the ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           overrides the specification of these options.  We
           recommend you use the ----mmmmccccppppuuuu====_c_p_u___t_y_p_e option rather
           than the options listed above.

           The ----mmmmppppoooowwwweeeerrrr option allows GCC to generate instructions
           that are found only in the POWER architecture and to
           use the MQ register.  Specifying ----mmmmppppoooowwwweeeerrrr2222 implies
           ----ppppoooowwwweeeerrrr and also allows GCC to generate instructions
           that are present in the POWER2 architecture but not
           the original POWER architecture.

           The ----mmmmppppoooowwwweeeerrrrppppcccc option allows GCC to generate
           instructions that are found only in the 32-bit subset



2004-02-14                  gcc-3.3.3                         115





GCC(1)                         GNU                         GCC(1)


           of the PowerPC architecture.  Specifying ----mmmmppppoooowwwweeeerrrrppppcccc----
           ggggppppoooopppptttt implies ----mmmmppppoooowwwweeeerrrrppppcccc and also allows GCC to use the
           optional PowerPC architecture instructions in the
           General Purpose group, including floating-point square
           root.  Specifying ----mmmmppppoooowwwweeeerrrrppppcccc----ggggffffxxxxoooopppptttt implies ----mmmmppppoooowwwweeeerrrrppppcccc
           and also allows GCC to use the optional PowerPC
           architecture instructions in the Graphics group,
           including floating-point select.

           The ----mmmmppppoooowwwweeeerrrrppppcccc66664444 option allows GCC to generate the
           additional 64-bit instructions that are found in the
           full PowerPC64 architecture and to treat GPRs as
           64-bit, doubleword quantities.  GCC defaults to ----mmmmnnnnoooo----
           ppppoooowwwweeeerrrrppppcccc66664444.

           If you specify both ----mmmmnnnnoooo----ppppoooowwwweeeerrrr and ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc, GCC
           will use only the instructions in the common subset of
           both architectures plus some special AIX common-mode
           calls, and will not use the MQ register.  Specifying
           both ----mmmmppppoooowwwweeeerrrr and ----mmmmppppoooowwwweeeerrrrppppcccc permits GCC to use any
           instruction from either architecture and to allow use
           of the MQ register; specify this for the Motorola
           MPC601.

       ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss
       ----mmmmoooolllldddd----mmmmnnnneeeemmmmoooonnnniiiiccccssss
           Select which mnemonics to use in the generated
           assembler code.  With ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss, GCC uses the
           assembler mnemonics defined for the PowerPC
           architecture.  With ----mmmmoooolllldddd----mmmmnnnneeeemmmmoooonnnniiiiccccssss it uses the
           assembler mnemonics defined for the POWER
           architecture.  Instructions defined in only one
           architecture have only one mnemonic; GCC uses that
           mnemonic irrespective of which of these options is
           specified.

           GCC defaults to the mnemonics appropriate for the
           architecture in use.  Specifying ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           sometimes overrides the value of these option.  Unless
           you are building a cross-compiler, you should normally
           not specify either ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss or ----mmmmoooolllldddd----mmmmnnnneeeemmmmoooonnnniiiiccccssss,
           but should instead accept the default.

       ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           Set architecture type, register usage, choice of
           mnemonics, and instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  Supported values for _c_p_u___t_y_p_e
           are rrrriiiioooossss, rrrriiiioooossss1111, rrrrsssscccc, rrrriiiioooossss2222, rrrrssss66664444aaaa, 666600001111, 666600002222, 666600003333,
           666600003333eeee, 666600004444, 666600004444eeee, 666622220000, 666633330000, 777744440000, 7777444400000000, 7777444455550000, 777755550000,
           ppppoooowwwweeeerrrr, ppppoooowwwweeeerrrr2222, ppppoooowwwweeeerrrrppppcccc, 444400003333, 555500005555, 888800001111, 888822221111, 888822223333, and
           888866660000 and ccccoooommmmmmmmoooonnnn.

           ----mmmmccccppppuuuu====ccccoooommmmmmmmoooonnnn selects a completely generic processor.
           Code generated under this option will run on any POWER



2004-02-14                  gcc-3.3.3                         116





GCC(1)                         GNU                         GCC(1)


           or PowerPC processor.  GCC will use only the
           instructions in the common subset of both
           architectures, and will not use the MQ register.  GCC
           assumes a generic processor model for scheduling
           purposes.

           ----mmmmccccppppuuuu====ppppoooowwwweeeerrrr, ----mmmmccccppppuuuu====ppppoooowwwweeeerrrr2222, ----mmmmccccppppuuuu====ppppoooowwwweeeerrrrppppcccc, and
           ----mmmmccccppppuuuu====ppppoooowwwweeeerrrrppppcccc66664444 specify generic POWER, POWER2, pure
           32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC
           architecture machine types, with an appropriate,
           generic processor model assumed for scheduling
           purposes.

           The other options specify a specific processor.  Code
           generated under those options will run best on that
           processor, and may not run at all on others.

           The ----mmmmccccppppuuuu options automatically enable or disable
           other ----mmmm options as follows:

           ccccoooommmmmmmmoooonnnn
               ----mmmmnnnnoooo----ppppoooowwwweeeerrrr, ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc

           ppppoooowwwweeeerrrr
           ppppoooowwwweeeerrrr2222
           rrrriiiioooossss1111
           rrrriiiioooossss2222
           rrrrsssscccc ----mmmmppppoooowwwweeeerrrr, ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc, ----mmmmnnnnoooo----nnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss

           ppppoooowwwweeeerrrrppppcccc
           rrrrssss66664444aaaa
           666600002222
           666600003333
           666600003333eeee
           666600004444
           666622220000
           666633330000
           777744440000
           7777444400000000
           7777444455550000
           777755550000
           555500005555 ----mmmmnnnnoooo----ppppoooowwwweeeerrrr, ----mmmmppppoooowwwweeeerrrrppppcccc, ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss

           666600001111 ----mmmmppppoooowwwweeeerrrr, ----mmmmppppoooowwwweeeerrrrppppcccc, ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss

           444400003333
           888822221111
           888866660000 ----mmmmnnnnoooo----ppppoooowwwweeeerrrr, ----mmmmppppoooowwwweeeerrrrppppcccc, ----mmmmnnnneeeewwww----mmmmnnnneeeemmmmoooonnnniiiiccccssss, ----mmmmssssoooofffftttt----
               ffffllllooooaaaatttt

       ----mmmmttttuuuunnnneeee====_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the architecture type,
           register usage, or choice of mnemonics, as



2004-02-14                  gcc-3.3.3                         117





GCC(1)                         GNU                         GCC(1)


           ----mmmmccccppppuuuu====_c_p_u___t_y_p_e would.  The same values for _c_p_u___t_y_p_e
           are used for ----mmmmttttuuuunnnneeee as for ----mmmmccccppppuuuu.  If both are
           specified, the code generated will use the
           architecture, registers, and mnemonics set by ----mmmmccccppppuuuu,
           but the scheduling parameters set by ----mmmmttttuuuunnnneeee.

       ----mmmmaaaallllttttiiiivvvveeeecccc
       ----mmmmnnnnoooo----aaaallllttttiiiivvvveeeecccc
           These switches enable or disable the use of built-in
           functions that allow access to the AltiVec instruction
           set.  You may also need to set ----mmmmaaaabbbbiiii====aaaallllttttiiiivvvveeeecccc to adjust
           the current ABI with AltiVec ABI enhancements.

       ----mmmmaaaabbbbiiii====ssssppppeeee
           Extend the current ABI with SPE ABI extensions.  This
           does not change the default ABI, instead it adds the
           SPE ABI extensions to the current ABI.

       ----mmmmaaaabbbbiiii====nnnnoooo----ssssppppeeee
           Disable Booke SPE ABI extensions for the current ABI.

       ----mmmmiiiisssseeeellll====_y_e_s_/_n_o
       ----mmmmiiiisssseeeellll
           This switch enables or disables the generation of ISEL
           instructions.

       ----mmmmffffuuuullllllll----ttttoooocccc
       ----mmmmnnnnoooo----ffffpppp----iiiinnnn----ttttoooocccc
       ----mmmmnnnnoooo----ssssuuuummmm----iiiinnnn----ttttoooocccc
       ----mmmmmmmmiiiinnnniiiimmmmaaaallll----ttttoooocccc
           Modify generation of the TOC (Table Of Contents),
           which is created for every executable file.  The
           ----mmmmffffuuuullllllll----ttttoooocccc option is selected by default.  In that
           case, GCC will allocate at least one TOC entry for
           each unique non-automatic variable reference in your
           program.  GCC will also place floating-point constants
           in the TOC.  However, only 16,384 entries are
           available in the TOC.

           If you receive a linker error message that saying you
           have overflowed the available TOC space, you can
           reduce the amount of TOC space used with the ----mmmmnnnnoooo----ffffpppp----
           iiiinnnn----ttttoooocccc and ----mmmmnnnnoooo----ssssuuuummmm----iiiinnnn----ttttoooocccc options.  ----mmmmnnnnoooo----ffffpppp----iiiinnnn----ttttoooocccc
           prevents GCC from putting floating-point constants in
           the TOC and ----mmmmnnnnoooo----ssssuuuummmm----iiiinnnn----ttttoooocccc forces GCC to generate
           code to calculate the sum of an address and a constant
           at run-time instead of putting that sum into the TOC.
           You may specify one or both of these options.  Each
           causes GCC to produce very slightly slower and larger
           code at the expense of conserving TOC space.

           If you still run out of space in the TOC even when you
           specify both of these options, specify ----mmmmmmmmiiiinnnniiiimmmmaaaallll----ttttoooocccc
           instead.  This option causes GCC to make only one TOC



2004-02-14                  gcc-3.3.3                         118





GCC(1)                         GNU                         GCC(1)


           entry for every file.  When you specify this option,
           GCC will produce code that is slower and larger but
           which uses extremely little TOC space.  You may wish
           to use this option only on files that contain less
           frequently executed code.

       ----mmmmaaaaiiiixxxx66664444
       ----mmmmaaaaiiiixxxx33332222
           Enable 64-bit AIX ABI and calling convention: 64-bit
           pointers, 64-bit "long" type, and the infrastructure
           needed to support them.  Specifying ----mmmmaaaaiiiixxxx66664444 implies
           ----mmmmppppoooowwwweeeerrrrppppcccc66664444 and ----mmmmppppoooowwwweeeerrrrppppcccc, while ----mmmmaaaaiiiixxxx33332222 disables the
           64-bit ABI and implies ----mmmmnnnnoooo----ppppoooowwwweeeerrrrppppcccc66664444.  GCC defaults
           to ----mmmmaaaaiiiixxxx33332222.

       ----mmmmxxxxllll----ccccaaaallllllll
       ----mmmmnnnnoooo----xxxxllll----ccccaaaallllllll
           On AIX, pass floating-point arguments to prototyped
           functions beyond the register save area (RSA) on the
           stack in addition to argument FPRs.  The AIX calling
           convention was extended but not initially documented
           to handle an obscure K&R C case of calling a function
           that takes the address of its arguments with fewer
           arguments than declared.  AIX XL compilers access
           floating point arguments which do not fit in the RSA
           from the stack when a subroutine is compiled without
           optimization.  Because always storing floating-point
           arguments on the stack is inefficient and rarely
           needed, this option is not enabled by default and only
           is necessary when calling subroutines compiled by AIX
           XL compilers without optimization.

       ----mmmmppppeeee
           Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).
           Link an application written to use message passing
           with special startup code to enable the application to
           run.  The system must have PE installed in the
           standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the _s_p_e_c_s
           file must be overridden with the ----ssssppppeeeeccccssss==== option to
           specify the appropriate directory location.  The
           Parallel Environment does not support threads, so the
           ----mmmmppppeeee option and the ----pppptttthhhhrrrreeeeaaaadddd option are incompatible.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
           Generate code that does not use (uses) the floating-
           point register set.  Software floating point emulation
           is provided if you use the ----mmmmssssoooofffftttt----ffffllllooooaaaatttt option, and
           pass the option to GCC when linking.

       ----mmmmmmmmuuuullllttttiiiipppplllleeee
       ----mmmmnnnnoooo----mmmmuuuullllttttiiiipppplllleeee
           Generate code that uses (does not use) the load
           multiple word instructions and the store multiple word



2004-02-14                  gcc-3.3.3                         119





GCC(1)                         GNU                         GCC(1)


           instructions.  These instructions are generated by
           default on POWER systems, and not generated on PowerPC
           systems.  Do not use ----mmmmmmmmuuuullllttttiiiipppplllleeee on little endian
           PowerPC systems, since those instructions do not work
           when the processor is in little endian mode.  The
           exceptions are PPC740 and PPC750 which permit the
           instructions usage in little endian mode.

       ----mmmmssssttttrrrriiiinnnngggg
       ----mmmmnnnnoooo----ssssttttrrrriiiinnnngggg
           Generate code that uses (does not use) the load string
           instructions and the store string word instructions to
           save multiple registers and do small block moves.
           These instructions are generated by default on POWER
           systems, and not generated on PowerPC systems.  Do not
           use ----mmmmssssttttrrrriiiinnnngggg on little endian PowerPC systems, since
           those instructions do not work when the processor is
           in little endian mode.  The exceptions are PPC740 and
           PPC750 which permit the instructions usage in little
           endian mode.

       ----mmmmuuuuppppddddaaaatttteeee
       ----mmmmnnnnoooo----uuuuppppddddaaaatttteeee
           Generate code that uses (does not use) the load or
           store instructions that update the base register to
           the address of the calculated memory location.  These
           instructions are generated by default.  If you use
           ----mmmmnnnnoooo----uuuuppppddddaaaatttteeee, there is a small window between the time
           that the stack pointer is updated and the address of
           the previous frame is stored, which means code that
           walks the stack frame across interrupts or signals may
           get corrupted data.

       ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd
       ----mmmmnnnnoooo----ffffuuuusssseeeedddd----mmmmaaaadddddddd
           Generate code that uses (does not use) the floating
           point multiply and accumulate instructions.  These
           instructions are generated by default if hardware
           floating is used.

       ----mmmmnnnnoooo----bbbbiiiitttt----aaaalllliiiiggggnnnn
       ----mmmmbbbbiiiitttt----aaaalllliiiiggggnnnn
           On System V.4 and embedded PowerPC systems do not (do)
           force structures and unions that contain bit-fields to
           be aligned to the base type of the bit-field.

           For example, by default a structure containing nothing
           but 8 "unsigned" bit-fields of length 1 would be
           aligned to a 4 byte boundary and have a size of 4
           bytes.  By using ----mmmmnnnnoooo----bbbbiiiitttt----aaaalllliiiiggggnnnn, the structure would
           be aligned to a 1 byte boundary and be one byte in
           size.





2004-02-14                  gcc-3.3.3                         120





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----ssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
       ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
           On System V.4 and embedded PowerPC systems do not (do)
           assume that unaligned memory references will be
           handled by the system.

       ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee
       ----mmmmnnnnoooo----rrrreeeellllooooccccaaaattttaaaabbbblllleeee
           On embedded PowerPC systems generate code that allows
           (does not allow) the program to be relocated to a
           different address at runtime.  If you use
           ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee on any module, all objects linked
           together must be compiled with ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee or
           ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb.

       ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb
       ----mmmmnnnnoooo----rrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb
           On embedded PowerPC systems generate code that allows
           (does not allow) the program to be relocated to a
           different address at runtime.  Modules compiled with
           ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb can be linked with either modules
           compiled without ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee and ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee----lllliiiibbbb
           or with modules compiled with the ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee
           options.

       ----mmmmnnnnoooo----ttttoooocccc
       ----mmmmttttoooocccc
           On System V.4 and embedded PowerPC systems do not (do)
           assume that register 2 contains a pointer to a global
           area pointing to the addresses used in the program.

       ----mmmmlllliiiittttttttlllleeee
       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           On System V.4 and embedded PowerPC systems compile
           code for the processor in little endian mode.  The
           ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn option is the same as ----mmmmlllliiiittttttttlllleeee.

       ----mmmmbbbbiiiigggg
       ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn
           On System V.4 and embedded PowerPC systems compile
           code for the processor in big endian mode.  The ----mmmmbbbbiiiigggg----
           eeeennnnddddiiiiaaaannnn option is the same as ----mmmmbbbbiiiigggg.

       ----mmmmccccaaaallllllll----ssssyyyyssssvvvv
           On System V.4 and embedded PowerPC systems compile
           code using calling conventions that adheres to the
           March 1995 draft of the System V Application Binary
           Interface, PowerPC processor supplement.  This is the
           default unless you configured GCC using
           ppppoooowwwweeeerrrrppppcccc----****----eeeeaaaabbbbiiiiaaaaiiiixxxx.

       ----mmmmccccaaaallllllll----ssssyyyyssssvvvv----eeeeaaaabbbbiiii
           Specify both ----mmmmccccaaaallllllll----ssssyyyyssssvvvv and ----mmmmeeeeaaaabbbbiiii options.




2004-02-14                  gcc-3.3.3                         121





GCC(1)                         GNU                         GCC(1)


       ----mmmmccccaaaallllllll----ssssyyyyssssvvvv----nnnnooooeeeeaaaabbbbiiii
           Specify both ----mmmmccccaaaallllllll----ssssyyyyssssvvvv and ----mmmmnnnnoooo----eeeeaaaabbbbiiii options.

       ----mmmmccccaaaallllllll----aaaaiiiixxxx
           On System V.4 and embedded PowerPC systems compile
           code using calling conventions that are similar to
           those used on AIX.  This is the default if you
           configured GCC using ppppoooowwwweeeerrrrppppcccc----****----eeeeaaaabbbbiiiiaaaaiiiixxxx.

       ----mmmmccccaaaallllllll----ssssoooollllaaaarrrriiiissss
           On System V.4 and embedded PowerPC systems compile
           code for the Solaris operating system.

       ----mmmmccccaaaallllllll----lllliiiinnnnuuuuxxxx
           On System V.4 and embedded PowerPC systems compile
           code for the Linux-based GNU system.

       ----mmmmccccaaaallllllll----ggggnnnnuuuu
           On System V.4 and embedded PowerPC systems compile
           code for the Hurd-based GNU system.

       ----mmmmccccaaaallllllll----nnnneeeettttbbbbssssdddd
           On System V.4 and embedded PowerPC systems compile
           code for the NetBSD operating system.

       ----mmmmaaaaiiiixxxx----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return all structures in memory (as specified by the
           AIX ABI).

       ----mmmmssssvvvvrrrr4444----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return structures smaller than 8 bytes in registers
           (as specified by the SVR4 ABI).

       ----mmmmaaaabbbbiiii====aaaallllttttiiiivvvveeeecccc
           Extend the current ABI with AltiVec ABI extensions.
           This does not change the default ABI, instead it adds
           the AltiVec ABI extensions to the current ABI.

       ----mmmmaaaabbbbiiii====nnnnoooo----aaaallllttttiiiivvvveeeecccc
           Disable AltiVec ABI extensions for the current ABI.

       ----mmmmpppprrrroooottttoooottttyyyyppppeeee
       ----mmmmnnnnoooo----pppprrrroooottttoooottttyyyyppppeeee
           On System V.4 and embedded PowerPC systems assume that
           all calls to variable argument functions are properly
           prototyped.  Otherwise, the compiler must insert an
           instruction before every non prototyped call to set or
           clear bit 6 of the condition code register (_C_R) to
           indicate whether floating point values were passed in
           the floating point registers in case the function
           takes a variable arguments.  With ----mmmmpppprrrroooottttoooottttyyyyppppeeee, only
           calls to prototyped variable argument functions will
           set or clear the bit.




2004-02-14                  gcc-3.3.3                         122





GCC(1)                         GNU                         GCC(1)


       ----mmmmssssiiiimmmm
           On embedded PowerPC systems, assume that the startup
           module is called _s_i_m_-_c_r_t_0_._o and that the standard C
           libraries are _l_i_b_s_i_m_._a and _l_i_b_c_._a.  This is the
           default for ppppoooowwwweeeerrrrppppcccc----****----eeeeaaaabbbbiiiissssiiiimmmm.  configurations.

       ----mmmmmmmmvvvvmmmmeeee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_m_v_m_e_._a and _l_i_b_c_._a.

       ----mmmmaaaaddddssss
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       ----mmmmyyyyeeeelllllllloooowwwwkkkknnnniiiiffffeeee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_y_k_._a and _l_i_b_c_._a.

       ----mmmmvvvvxxxxwwwwoooorrrrkkkkssss
           On System V.4 and embedded PowerPC systems, specify
           that you are compiling for a VxWorks system.

       ----mmmmwwwwiiiinnnnddddiiiissssssss
           Specify that you are compiling for the WindISS
           simulation environment.

       ----mmmmeeeemmmmbbbb
           On embedded PowerPC systems, set the _P_P_C___E_M_B bit in
           the ELF flags header to indicate that eeeeaaaabbbbiiii extended
           relocations are used.

       ----mmmmeeeeaaaabbbbiiii
       ----mmmmnnnnoooo----eeeeaaaabbbbiiii
           On System V.4 and embedded PowerPC systems do (do not)
           adhere to the Embedded Applications Binary Interface
           (eabi) which is a set of modifications to the System
           V.4 specifications.  Selecting ----mmmmeeeeaaaabbbbiiii means that the
           stack is aligned to an 8 byte boundary, a function
           "__eabi" is called to from "main" to set up the eabi
           environment, and the ----mmmmssssddddaaaattttaaaa option can use both "r2"
           and "r13" to point to two separate small data areas.
           Selecting ----mmmmnnnnoooo----eeeeaaaabbbbiiii means that the stack is aligned to
           a 16 byte boundary, do not call an initialization
           function from "main", and the ----mmmmssssddddaaaattttaaaa option will only
           use "r13" to point to a single small data area.  The
           ----mmmmeeeeaaaabbbbiiii option is on by default if you configured GCC
           using one of the ppppoooowwwweeeerrrrppppcccc****----****----eeeeaaaabbbbiiii**** options.

       ----mmmmssssddddaaaattttaaaa====eeeeaaaabbbbiiii
           On System V.4 and embedded PowerPC systems, put small
           initialized "const" global and static data in the



2004-02-14                  gcc-3.3.3                         123





GCC(1)                         GNU                         GCC(1)


           ....ssssddddaaaattttaaaa2222 section, which is pointed to by register "r2".
           Put small initialized non-"const" global and static
           data in the ....ssssddddaaaattttaaaa section, which is pointed to by
           register "r13".  Put small uninitialized global and
           static data in the ....ssssbbbbssssssss section, which is adjacent to
           the ....ssssddddaaaattttaaaa section.  The ----mmmmssssddddaaaattttaaaa====eeeeaaaabbbbiiii option is
           incompatible with the ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee option.  The
           ----mmmmssssddddaaaattttaaaa====eeeeaaaabbbbiiii option also sets the ----mmmmeeeemmmmbbbb option.

       ----mmmmssssddddaaaattttaaaa====ssssyyyyssssvvvv
           On System V.4 and embedded PowerPC systems, put small
           global and static data in the ....ssssddddaaaattttaaaa section, which is
           pointed to by register "r13".  Put small uninitialized
           global and static data in the ....ssssbbbbssssssss section, which is
           adjacent to the ....ssssddddaaaattttaaaa section.  The ----mmmmssssddddaaaattttaaaa====ssssyyyyssssvvvv
           option is incompatible with the ----mmmmrrrreeeellllooooccccaaaattttaaaabbbblllleeee option.

       ----mmmmssssddddaaaattttaaaa====ddddeeeeffffaaaauuuulllltttt
       ----mmmmssssddddaaaattttaaaa
           On System V.4 and embedded PowerPC systems, if ----mmmmeeeeaaaabbbbiiii
           is used, compile code the same as ----mmmmssssddddaaaattttaaaa====eeeeaaaabbbbiiii,
           otherwise compile code the same as ----mmmmssssddddaaaattttaaaa====ssssyyyyssssvvvv.

       ----mmmmssssddddaaaattttaaaa----ddddaaaattttaaaa
           On System V.4 and embedded PowerPC systems, put small
           global and static data in the ....ssssddddaaaattttaaaa section.  Put
           small uninitialized global and static data in the
           ....ssssbbbbssssssss section.  Do not use register "r13" to address
           small data however.  This is the default behavior
           unless other ----mmmmssssddddaaaattttaaaa options are used.

       ----mmmmssssddddaaaattttaaaa====nnnnoooonnnneeee
       ----mmmmnnnnoooo----ssssddddaaaattttaaaa
           On embedded PowerPC systems, put all initialized
           global and static data in the ....ddddaaaattttaaaa section, and all
           uninitialized data in the ....bbbbssssssss section.

       ----GGGG _n_u_m
           On embedded PowerPC systems, put global and static
           items less than or equal to _n_u_m bytes into the small
           data or bss sections instead of the normal data or bss
           section.  By default, _n_u_m is 8.  The ----GGGG _n_u_m switch is
           also passed to the linker.  All modules should be
           compiled with the same ----GGGG _n_u_m value.

       ----mmmmrrrreeeeggggnnnnaaaammmmeeeessss
       ----mmmmnnnnoooo----rrrreeeeggggnnnnaaaammmmeeeessss
           On System V.4 and embedded PowerPC systems do (do not)
           emit register names in the assembly language output
           using symbolic forms.

       ----mmmmlllloooonnnnggggccccaaaallllllll





2004-02-14                  gcc-3.3.3                         124





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----lllloooonnnnggggccccaaaallllllll
           Default to making all function calls via pointers, so
           that functions which reside further than 64 megabytes
           (67,108,864 bytes) from the current location can be
           called.  This setting can be overridden by the
           "shortcall" function attribute, or by "#pragma
           longcall(0)".

           Some linkers are capable of detecting out-of-range
           calls and generating glue code on the fly.  On these
           systems, long calls are unnecessary and generate
           slower code.  As of this writing, the AIX linker can
           do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for
           32-bit PowerPC systems as well.

           In the future, we may cause GCC to ignore all longcall
           specifications when the linker is known to generate
           glue.

       ----pppptttthhhhrrrreeeeaaaadddd
           Adds support for multithreading with the _p_t_h_r_e_a_d_s
           library.  This option sets flags for both the
           preprocessor and linker.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       These options are defined for all architectures running
       the Darwin operating system.  They are useful for
       compatibility with other Mac OS compilers.

       ----aaaallllllll____llllooooaaaadddd
           Loads all members of static archive libraries.  See
           man _l_d(1) for more information.

       ----aaaarrrrcccchhhh____eeeerrrrrrrroooorrrrssss____ffffaaaattttaaaallll
           Cause the errors having to do with files that have the
           wrong architecture to be fatal.

       ----bbbbiiiinnnndddd____aaaatttt____llllooooaaaadddd
           Causes the output file to be marked such that the
           dynamic linker will bind all undefined references when
           the file is loaded or launched.

       ----bbbbuuuunnnnddddlllleeee
           Produce a Mach-o bundle format file.  See man _l_d(1)
           for more information.

       ----bbbbuuuunnnnddddlllleeee____llllooooaaaaddddeeeerrrr _e_x_e_c_u_t_a_b_l_e
           This specifies the _e_x_e_c_u_t_a_b_l_e that will be loading the
           build output file being linked. See man _l_d(1) for more
           information.





2004-02-14                  gcc-3.3.3                         125





GCC(1)                         GNU                         GCC(1)


       ----aaaalllllllloooowwwwaaaabbbblllleeee____cccclllliiiieeeennnntttt  _c_l_i_e_n_t___n_a_m_e
       ----aaaarrrrcccchhhh____oooonnnnllllyyyy
       ----cccclllliiiieeeennnntttt____nnnnaaaammmmeeee
       ----ccccoooommmmppppaaaattttiiiibbbbiiiilllliiiittttyyyy____vvvveeeerrrrssssiiiioooonnnn
       ----ccccuuuurrrrrrrreeeennnntttt____vvvveeeerrrrssssiiiioooonnnn
       ----ddddeeeeppppeeeennnnddddeeeennnnccccyyyy----ffffiiiilllleeee
       ----ddddyyyylllliiiibbbb____ffffiiiilllleeee
       ----ddddyyyylllliiiinnnnkkkkeeeerrrr____iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeee
       ----ddddyyyynnnnaaaammmmiiiicccc
       ----ddddyyyynnnnaaaammmmiiiicccclllliiiibbbb
       ----eeeexxxxppppoooorrrrtttteeeedddd____ssssyyyymmmmbbbboooollllssss____lllliiiisssstttt
       ----ffffiiiilllleeeelllliiiisssstttt
       ----ffffllllaaaatttt____nnnnaaaammmmeeeessssppppaaaacccceeee
       ----ffffoooorrrrcccceeee____ccccppppuuuussssuuuubbbbttttyyyyppppeeee____AAAALLLLLLLL
       ----ffffoooorrrrcccceeee____ffffllllaaaatttt____nnnnaaaammmmeeeessssppppaaaacccceeee
       ----hhhheeeeaaaaddddeeeerrrrppppaaaadddd____mmmmaaaaxxxx____iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeeessss
       ----iiiimmmmaaaaggggeeee____bbbbaaaasssseeee
       ----iiiinnnniiiitttt
       ----iiiinnnnssssttttaaaallllllll____nnnnaaaammmmeeee
       ----kkkkeeeeeeeepppp____pppprrrriiiivvvvaaaatttteeee____eeeexxxxtttteeeerrrrnnnnssss
       ----mmmmuuuullllttttiiii____mmmmoooodddduuuulllleeee
       ----mmmmuuuullllttttiiiippppllllyyyy____ddddeeeeffffiiiinnnneeeedddd
       ----mmmmuuuullllttttiiiippppllllyyyy____ddddeeeeffffiiiinnnneeeedddd____uuuunnnnuuuusssseeeedddd
       ----nnnnooooaaaallllllll____llllooooaaaadddd
       ----nnnnoooommmmuuuullllttttiiiiddddeeeeffffssss
       ----nnnnoooopppprrrreeeebbbbiiiinnnndddd
       ----nnnnoooosssseeeegggglllliiiinnnnkkkkeeeeddddiiiitttt
       ----ppppaaaaggggeeeezzzzeeeerrrroooo____ssssiiiizzzzeeee
       ----pppprrrreeeebbbbiiiinnnndddd
       ----pppprrrreeeebbbbiiiinnnndddd____aaaallllllll____ttttwwwwoooolllleeeevvvveeeellll____mmmmoooodddduuuulllleeeessss
       ----pppprrrriiiivvvvaaaatttteeee____bbbbuuuunnnnddddlllleeee
       ----rrrreeeeaaaadddd____oooonnnnllllyyyy____rrrreeeellllooooccccssss
       ----sssseeeeccccttttaaaalllliiiiggggnnnn
       ----sssseeeeccccttttoooobbbbjjjjeeeeccccttttssssyyyymmmmbbbboooollllssss
       ----wwwwhhhhyyyyllllooooaaaadddd
       ----sssseeeegggg1111aaaaddddddddrrrr
       ----sssseeeeccccttttccccrrrreeeeaaaatttteeee
       ----sssseeeeccccttttoooobbbbjjjjeeeeccccttttssssyyyymmmmbbbboooollllssss
       ----sssseeeeccccttttoooorrrrddddeeeerrrr
       ----sssseeeegggg____aaaaddddddddrrrr____ttttaaaabbbblllleeee
       ----sssseeeegggg____aaaaddddddddrrrr____ttttaaaabbbblllleeee____ffffiiiilllleeeennnnaaaammmmeeee
       ----sssseeeegggglllliiiinnnnkkkkeeeeddddiiiitttt
       ----sssseeeeggggpppprrrrooootttt
       ----sssseeeeggggssss____rrrreeeeaaaadddd____oooonnnnllllyyyy____aaaaddddddddrrrr
       ----sssseeeeggggssss____rrrreeeeaaaadddd____wwwwrrrriiiitttteeee____aaaaddddddddrrrr
       ----ssssiiiinnnngggglllleeee____mmmmoooodddduuuulllleeee
       ----ssssttttaaaattttiiiicccc
       ----ssssuuuubbbb____lllliiiibbbbrrrraaaarrrryyyy
       ----ssssuuuubbbb____uuuummmmbbbbrrrreeeellllllllaaaa
       ----ttttwwwwoooolllleeeevvvveeeellll____nnnnaaaammmmeeeessssppppaaaacccceeee
       ----uuuummmmbbbbrrrreeeellllllllaaaa
       ----uuuunnnnddddeeeeffffiiiinnnneeeedddd





2004-02-14                  gcc-3.3.3                         126





GCC(1)                         GNU                         GCC(1)


       ----uuuunnnneeeexxxxppppoooorrrrtttteeeedddd____ssssyyyymmmmbbbboooollllssss____lllliiiisssstttt
       ----wwwweeeeaaaakkkk____rrrreeeeffffeeeerrrreeeennnncccceeee____mmmmiiiissssmmmmaaaattttcccchhhheeeessss
       ----wwwwhhhhaaaattttssssllllooooaaaaddddeeeedddd
           This options are available for Darwin linker. Darwin
           linker man page describes them in detail.

       _I_B_M _R_T _O_p_t_i_o_n_s

       These ----mmmm options are defined for the IBM RT PC:

       ----mmmmiiiinnnn----lllliiiinnnneeee----mmmmuuuullll
           Use an in-line code sequence for integer multiplies.
           This is the default.

       ----mmmmccccaaaallllllll----lllliiiibbbb----mmmmuuuullll
           Call "lmul$$" for integer multiples.

       ----mmmmffffuuuullllllll----ffffpppp----bbbblllloooocccckkkkssss
           Generate full-size floating point data blocks,
           including the minimum amount of scratch space
           recommended by IBM.  This is the default.

       ----mmmmmmmmiiiinnnniiiimmmmuuuummmm----ffffpppp----bbbblllloooocccckkkkssss
           Do not include extra scratch space in floating point
           data blocks.  This results in smaller code, but slower
           execution, since scratch space must be allocated
           dynamically.

       ----mmmmffffpppp----aaaarrrrgggg----iiiinnnn----ffffpppprrrreeeeggggssss
           Use a calling sequence incompatible with the IBM
           calling convention in which floating point arguments
           are passed in floating point registers.  Note that
           "stdarg.h" will not work with floating point operands
           if this option is specified.

       ----mmmmffffpppp----aaaarrrrgggg----iiiinnnn----ggggrrrreeeeggggssss
           Use the normal calling convention for floating point
           arguments.  This is the default.

       ----mmmmhhhhcccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return structures of more than one word in memory,
           rather than in a register.  This provides
           compatibility with the MetaWare HighC (hc) compiler.
           Use the option ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn for compatibility
           with the Portable C Compiler (pcc).

       ----mmmmnnnnoooohhhhcccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return some structures of more than one word in
           registers, when convenient.  This is the default.  For
           compatibility with the IBM-supplied compilers, use the
           option ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn or the option ----mmmmhhhhcccc----ssssttttrrrruuuucccctttt----
           rrrreeeettttuuuurrrrnnnn.

       _M_I_P_S _O_p_t_i_o_n_s



2004-02-14                  gcc-3.3.3                         127





GCC(1)                         GNU                         GCC(1)


       These ----mmmm options are defined for the MIPS family of
       computers:

       ----mmmmaaaarrrrcccchhhh====_a_r_c_h
           Generate code that will run on _a_r_c_h, which can be the
           name of a generic MIPS ISA, or the name of a
           particular processor.  The ISA names are: mmmmiiiippppssss1111,
           mmmmiiiippppssss2222, mmmmiiiippppssss3333, mmmmiiiippppssss4444, mmmmiiiippppssss33332222 and mmmmiiiippppssss66664444.  The processor
           names are: rrrr2222000000000000, rrrr3333000000000000, rrrr3333999900000000, rrrr4444000000000000, vvvvrrrr4444111100000000, vvvvrrrr4444333300000000,
           rrrr4444444400000000, rrrr4444666600000000, rrrr4444666655550000, vvvvrrrr5555000000000000, rrrr6666000000000000, rrrr8888000000000000, 4444kkkkcccc, 4444kkkkpppp,
           5555kkkkcccc, 22220000kkkkcccc, oooorrrriiiioooonnnn, and ssssbbbb1111.  The special value ffffrrrroooommmm----aaaabbbbiiii
           selects the most compatible architecture for the
           selected ABI (that is, mmmmiiiippppssss1111 for 32-bit ABIs and mmmmiiiippppssss3333
           for 64-bit ABIs).

           In processor names, a final 000000000000 can be abbreviated as
           kkkk (for example, ----mmmmaaaarrrrcccchhhh====rrrr2222kkkk).  Prefixes are optional,
           and vvvvrrrr may be written rrrr.

           GCC defines two macros based on the value of this
           option.  The first is ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH, which gives the name
           of target architecture, as a string.  The second has
           the form ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH_____f_o_o, where _f_o_o is the capitalized
           value of ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH.  For example, ----mmmmaaaarrrrcccchhhh====rrrr2222000000000000 will
           set ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH to """"rrrr2222000000000000"""" and define the macro
           ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH____RRRR2222000000000000.

           Note that the ____MMMMIIIIPPPPSSSS____AAAARRRRCCCCHHHH macro uses the processor
           names given above.  In other words, it will have the
           full prefix and will not abbreviate 000000000000 as kkkk.  In the
           case of ffffrrrroooommmm----aaaabbbbiiii, the macro names the resolved
           architecture (either """"mmmmiiiippppssss1111"""" or """"mmmmiiiippppssss3333"""").  It names
           the default architecture when no ----mmmmaaaarrrrcccchhhh option is
           given.

       ----mmmmttttuuuunnnneeee====_a_r_c_h
           Optimize for _a_r_c_h.  Among other things, this option
           controls the way instructions are scheduled, and the
           perceived cost of arithmetic operations.  The list of
           _a_r_c_h values is the same as for ----mmmmaaaarrrrcccchhhh.

           When this option is not used, GCC will optimize for
           the processor specified by ----mmmmaaaarrrrcccchhhh.  By using ----mmmmaaaarrrrcccchhhh
           and ----mmmmttttuuuunnnneeee together, it is possible to generate code
           that will run on a family of processors, but optimize
           the code for one particular member of that family.

           ----mmmmttttuuuunnnneeee defines the macros ____MMMMIIIIPPPPSSSS____TTTTUUUUNNNNEEEE and
           ____MMMMIIIIPPPPSSSS____TTTTUUUUNNNNEEEE_____f_o_o, which work in the same way as the
           ----mmmmaaaarrrrcccchhhh ones described above.

       ----mmmmiiiippppssss1111
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss1111.




2004-02-14                  gcc-3.3.3                         128





GCC(1)                         GNU                         GCC(1)


       ----mmmmiiiippppssss2222
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss2222.

       ----mmmmiiiippppssss3333
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss3333.

       ----mmmmiiiippppssss4444
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss4444.

       ----mmmmiiiippppssss33332222
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss33332222.

       ----mmmmiiiippppssss66664444
           Equivalent to ----mmmmaaaarrrrcccchhhh====mmmmiiiippppssss66664444.

       ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd
       ----mmmmnnnnoooo----ffffuuuusssseeeedddd----mmmmaaaadddddddd
           Generate code that uses (does not use) the floating
           point multiply and accumulate instructions, when they
           are available.  These instructions are generated by
           default if they are available, but this may be
           undesirable if the extra precision causes problems or
           on certain chips in the mode where denormals are
           rounded to zero where denormals generated by multiply
           and accumulate instructions cause exceptions anyway.

       ----mmmmffffpppp33332222
           Assume that floating point registers are 32 bits wide.

       ----mmmmffffpppp66664444
           Assume that floating point registers are 64 bits wide.

       ----mmmmggggpppp33332222
           Assume that general purpose registers are 32 bits
           wide.

       ----mmmmggggpppp66664444
           Assume that general purpose registers are 64 bits
           wide.

       ----mmmmiiiinnnntttt66664444
           Force int and long types to be 64 bits wide.  See
           ----mmmmlllloooonnnngggg33332222 for an explanation of the default, and the
           width of pointers.

       ----mmmmlllloooonnnngggg66664444
           Force long types to be 64 bits wide.  See ----mmmmlllloooonnnngggg33332222 for
           an explanation of the default, and the width of
           pointers.

       ----mmmmlllloooonnnngggg33332222
           Force long, int, and pointer types to be 32 bits wide.

           The default size of ints, longs and pointers depends



2004-02-14                  gcc-3.3.3                         129





GCC(1)                         GNU                         GCC(1)


           on the ABI.  All the supported ABIs use 32-bit ints.
           The n64 ABI uses 64-bit longs, as does the 64-bit
           Cygnus EABI; the others use 32-bit longs.  Pointers
           are the same size as longs, or the same size as
           integer registers, whichever is smaller.

       ----mmmmaaaabbbbiiii====33332222
       ----mmmmaaaabbbbiiii====oooo66664444
       ----mmmmaaaabbbbiiii====nnnn33332222
       ----mmmmaaaabbbbiiii====66664444
       ----mmmmaaaabbbbiiii====eeeeaaaabbbbiiii
       ----mmmmaaaabbbbiiii====mmmmeeeeaaaabbbbiiii
           Generate code for the given ABI.

           Note that there are two embedded ABIs: ----mmmmaaaabbbbiiii====eeeeaaaabbbbiiii
           selects the one defined by Cygnus while ----mmmmeeeeaaaabbbbiiii====mmmmeeeeaaaabbbbiiii
           selects the one defined by MIPS.  Both these ABIs have
           32-bit and 64-bit variants.  Normally, GCC will
           generate 64-bit code when you select a 64-bit
           architecture, but you can use ----mmmmggggpppp33332222 to get 32-bit
           code instead.

       ----mmmmmmmmiiiippppssss----aaaassss
           Generate code for the MIPS assembler, and invoke _m_i_p_s_-
           _t_f_i_l_e to add normal debug information.  This is the
           default for all platforms except for the OSF/1
           reference platform, using the OSF/rose object format.
           If the either of the ----ggggssssttttaaaabbbbssss or ----ggggssssttttaaaabbbbssss++++ switches are
           used, the _m_i_p_s_-_t_f_i_l_e program will encapsulate the
           stabs within MIPS ECOFF.

       ----mmmmggggaaaassss
           Generate code for the GNU assembler.  This is the
           default on the OSF/1 reference platform, using the
           OSF/rose object format.  Also, this is the default if
           the configure option --------wwwwiiiitttthhhh----ggggnnnnuuuu----aaaassss is used.

       ----mmmmsssspppplllliiiitttt----aaaaddddddddrrrreeeesssssssseeeessss
       ----mmmmnnnnoooo----sssspppplllliiiitttt----aaaaddddddddrrrreeeesssssssseeeessss
           Generate code to load the high and low parts of
           address constants separately.  This allows GCC to
           optimize away redundant loads of the high order bits
           of addresses.  This optimization requires GNU as and
           GNU ld.  This optimization is enabled by default for
           some embedded targets where GNU as and GNU ld are
           standard.

       ----mmmmrrrrnnnnaaaammmmeeeessss
       ----mmmmnnnnoooo----rrrrnnnnaaaammmmeeeessss
           The ----mmmmrrrrnnnnaaaammmmeeeessss switch says to output code using the MIPS
           software names for the registers, instead of the
           hardware names (ie, _a_0 instead of _$_4).  The only known
           assembler that supports this option is the
           Algorithmics assembler.



2004-02-14                  gcc-3.3.3                         130





GCC(1)                         GNU                         GCC(1)


       ----mmmmggggppppoooopppptttt
       ----mmmmnnnnoooo----ggggppppoooopppptttt
           The ----mmmmggggppppoooopppptttt switch says to write all of the data
           declarations before the instructions in the text
           section, this allows the MIPS assembler to generate
           one word memory references instead of using two words
           for short global or static data items.  This is on by
           default if optimization is selected.

       ----mmmmssssttttaaaattttssss
       ----mmmmnnnnoooo----ssssttttaaaattttssss
           For each non-inline function processed, the ----mmmmssssttttaaaattttssss
           switch causes the compiler to emit one line to the
           standard error file to print statistics about the
           program (number of registers saved, stack size, etc.).

       ----mmmmmmmmeeeemmmmccccppppyyyy
       ----mmmmnnnnoooo----mmmmeeeemmmmccccppppyyyy
           The ----mmmmmmmmeeeemmmmccccppppyyyy switch makes all block moves call the
           appropriate string function (mmmmeeeemmmmccccppppyyyy or bbbbccccooooppppyyyy) instead
           of possibly generating inline code.

       ----mmmmmmmmiiiippppssss----ttttffffiiiilllleeee
       ----mmmmnnnnoooo----mmmmiiiippppssss----ttttffffiiiilllleeee
           The ----mmmmnnnnoooo----mmmmiiiippppssss----ttttffffiiiilllleeee switch causes the compiler not
           postprocess the object file with the _m_i_p_s_-_t_f_i_l_e
           program, after the MIPS assembler has generated it to
           add debug support.  If _m_i_p_s_-_t_f_i_l_e is not run, then no
           local variables will be available to the debugger.  In
           addition, _s_t_a_g_e_2 and _s_t_a_g_e_3 objects will have the
           temporary file names passed to the assembler embedded
           in the object file, which means the objects will not
           compare the same.  The ----mmmmnnnnoooo----mmmmiiiippppssss----ttttffffiiiilllleeee switch should
           only be used when there are bugs in the _m_i_p_s_-_t_f_i_l_e
           program that prevents compilation.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not part
           of GCC.  Normally the facilities of the machine's
           usual C compiler are used, but this can't be done
           directly in cross-compilation.  You must make your own
           arrangements to provide suitable library functions for
           cross-compilation.

       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
           Generate output containing floating point
           instructions.  This is the default if you use the
           unmodified sources.

       ----mmmmaaaabbbbiiiiccccaaaallllllllssss
       ----mmmmnnnnoooo----aaaabbbbiiiiccccaaaallllllllssss
           Emit (or do not emit) the pseudo operations ....aaaabbbbiiiiccccaaaallllllllssss,
           ....ccccppppllllooooaaaadddd, and ....ccccpppprrrreeeessssttttoooorrrreeee that some System V.4 ports use



2004-02-14                  gcc-3.3.3                         131





GCC(1)                         GNU                         GCC(1)


           for position independent code.

       ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
       ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss
           Do all calls with the JJJJAAAALLLLRRRR instruction, which requires
           loading up a function's address into a register before
           the call.  You need to use this switch, if you call
           outside of the current 512 megabyte segment to
           functions that are not through pointers.

       ----mmmmhhhhaaaallllffff----ppppiiiicccc
       ----mmmmnnnnoooo----hhhhaaaallllffff----ppppiiiicccc
           Put pointers to extern references into the data
           section and load them up, rather than put the
           references in the text section.

       ----mmmmeeeemmmmbbbbeeeeddddddddeeeedddd----ppppiiiicccc
       ----mmmmnnnnoooo----eeeemmmmbbbbeeeeddddddddeeeedddd----ppppiiiicccc
           Generate PIC code suitable for some embedded systems.
           All calls are made using PC relative address, and all
           data is addressed using the $gp register.  No more
           than 65536 bytes of global data may be used.  This
           requires GNU as and GNU ld which do most of the work.
           This currently only works on targets which use ECOFF;
           it does not work with ELF.

       ----mmmmeeeemmmmbbbbeeeeddddddddeeeedddd----ddddaaaattttaaaa
       ----mmmmnnnnoooo----eeeemmmmbbbbeeeeddddddddeeeedddd----ddddaaaattttaaaa
           Allocate variables to the read-only data section first
           if possible, then next in the small data section if
           possible, otherwise in data.  This gives slightly
           slower code than the default, but reduces the amount
           of RAM required when executing, and thus may be
           preferred for some embedded systems.

       ----mmmmuuuunnnniiiinnnniiiitttt----ccccoooonnnnsssstttt----iiiinnnn----rrrrooooddddaaaattttaaaa
       ----mmmmnnnnoooo----uuuunnnniiiinnnniiiitttt----ccccoooonnnnsssstttt----iiiinnnn----rrrrooooddddaaaattttaaaa
           When used together with ----mmmmeeeemmmmbbbbeeeeddddddddeeeedddd----ddddaaaattttaaaa, it will
           always store uninitialized const variables in the
           read-only data section.

       ----mmmmssssiiiinnnngggglllleeee----ffffllllooooaaaatttt
       ----mmmmddddoooouuuubbbblllleeee----ffffllllooooaaaatttt
           The ----mmmmssssiiiinnnngggglllleeee----ffffllllooooaaaatttt switch tells gcc to assume that the
           floating point coprocessor only supports single
           precision operations, as on the rrrr4444666655550000 chip.  The
           ----mmmmddddoooouuuubbbblllleeee----ffffllllooooaaaatttt switch permits gcc to use double
           precision operations.  This is the default.

       ----mmmmmmmmaaaadddd
       ----mmmmnnnnoooo----mmmmaaaadddd
           Permit use of the mmmmaaaadddd, mmmmaaaadddduuuu and mmmmuuuullll instructions, as
           on the rrrr4444666655550000 chip.




2004-02-14                  gcc-3.3.3                         132





GCC(1)                         GNU                         GCC(1)


       ----mmmm4444666655550000
           Turns on ----mmmmssssiiiinnnngggglllleeee----ffffllllooooaaaatttt, ----mmmmmmmmaaaadddd, and, at least for now,
           ----mmmmccccppppuuuu====rrrr4444666655550000.

       ----mmmmiiiippppssss11116666
       ----mmmmnnnnoooo----mmmmiiiippppssss11116666
           Enable 16-bit instructions.

       ----mmmmeeeennnnttttrrrryyyy
           Use the entry and exit pseudo ops.  This option can
           only be used with ----mmmmiiiippppssss11116666.

       ----EEEELLLL Compile code for the processor in little endian mode.
           The requisite libraries are assumed to exist.

       ----EEEEBBBB Compile code for the processor in big endian mode.
           The requisite libraries are assumed to exist.

       ----GGGG _n_u_m
           Put global and static items less than or equal to _n_u_m
           bytes into the small data or bss sections instead of
           the normal data or bss section.  This allows the
           assembler to emit one word memory reference
           instructions based on the global pointer (_g_p or _$_2_8),
           instead of the normal two words used.  By default, _n_u_m
           is 8 when the MIPS assembler is used, and 0 when the
           GNU assembler is used.  The ----GGGG _n_u_m switch is also
           passed to the assembler and linker.  All modules
           should be compiled with the same ----GGGG _n_u_m value.

       ----nnnnooooccccpppppppp
           Tell the MIPS assembler to not run its preprocessor
           over user assembler files (with a ....ssss suffix) when
           assembling them.

       ----mmmmffffiiiixxxx7777000000000000
           Pass an option to gas which will cause nops to be
           inserted if the read of the destination register of an
           mfhi or mflo instruction occurs in the following two
           instructions.

       ----nnnnoooo----ccccrrrrtttt0000
           Do not include the default crt0.

       ----mmmmfffflllluuuusssshhhh----ffffuuuunnnncccc====_f_u_n_c
       ----mmmmnnnnoooo----fffflllluuuusssshhhh----ffffuuuunnnncccc
           Specifies the function to call to flush the I and D
           caches, or to not call any such function.  If called,
           the function must take the same arguments as the
           common "_flush_func()", that is, the address of the
           memory range for which the cache is being flushed, the
           size of the memory range, and the number 3 (to flush
           both caches).  The default depends on the target gcc
           was configured for, but commonly is either ____fffflllluuuusssshhhh____ffffuuuunnnncccc



2004-02-14                  gcc-3.3.3                         133





GCC(1)                         GNU                         GCC(1)


           or ________ccccppppuuuu____fffflllluuuusssshhhh.

       ----mmmmbbbbrrrraaaannnncccchhhh----lllliiiikkkkeeeellllyyyy
       ----mmmmnnnnoooo----bbbbrrrraaaannnncccchhhh----lllliiiikkkkeeeellllyyyy
           Enable or disable use of Branch Likely instructions,
           regardless of the default for the selected
           architecture.  By default, Branch Likely instructions
           may be generated if they are supported by the selected
           architecture.  An exception is for the MIPS32 and
           MIPS64 architectures and processors which implement
           those architectures; for those, Branch Likely
           instructions will not be generated by default because
           the MIPS32 and MIPS64 architectures specifically
           deprecate their use.

       _I_n_t_e_l _3_8_6 _a_n_d _A_M_D _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These ----mmmm options are defined for the i386 and x86-64
       family of computers:

       ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the
           generated code, except for the ABI and the set of
           available instructions.  The choices for _c_p_u_-_t_y_p_e are
           iiii333388886666, iiii444488886666, iiii555588886666, iiii666688886666, ppppeeeennnnttttiiiiuuuummmm, ppppeeeennnnttttiiiiuuuummmm----mmmmmmmmxxxx,
           ppppeeeennnnttttiiiiuuuummmmpppprrrroooo, ppppeeeennnnttttiiiiuuuummmm2222, ppppeeeennnnttttiiiiuuuummmm3333, ppppeeeennnnttttiiiiuuuummmm4444, kkkk6666, kkkk6666----2222,
           kkkk6666----3333, aaaatttthhhhlllloooonnnn, aaaatttthhhhlllloooonnnn----ttttbbbbiiiirrrrdddd, aaaatttthhhhlllloooonnnn----4444, aaaatttthhhhlllloooonnnn----xxxxpppp,
           aaaatttthhhhlllloooonnnn----mmmmpppp, wwwwiiiinnnncccchhhhiiiipppp----cccc6666, wwwwiiiinnnncccchhhhiiiipppp2222 and cccc3333.

           While picking a specific _c_p_u_-_t_y_p_e will schedule things
           appropriately for that particular chip, the compiler
           will not generate any code that does not run on the
           i386 without the ----mmmmaaaarrrrcccchhhh====_c_p_u_-_t_y_p_e option being used.
           iiii555588886666 is equivalent to ppppeeeennnnttttiiiiuuuummmm and iiii666688886666 is equivalent
           to ppppeeeennnnttttiiiiuuuummmmpppprrrroooo.  kkkk6666 and aaaatttthhhhlllloooonnnn are the AMD chips as
           opposed to the Intel ones.

       ----mmmmaaaarrrrcccchhhh====_c_p_u_-_t_y_p_e
           Generate instructions for the machine type _c_p_u_-_t_y_p_e.
           The choices for _c_p_u_-_t_y_p_e are the same as for ----mmmmccccppppuuuu.
           Moreover, specifying ----mmmmaaaarrrrcccchhhh====_c_p_u_-_t_y_p_e implies
           ----mmmmccccppppuuuu====_c_p_u_-_t_y_p_e.

       ----mmmm333388886666
       ----mmmm444488886666
       ----mmmmppppeeeennnnttttiiiiuuuummmm
       ----mmmmppppeeeennnnttttiiiiuuuummmmpppprrrroooo
           These options are synonyms for ----mmmmccccppppuuuu====iiii333388886666, ----mmmmccccppppuuuu====iiii444488886666,
           ----mmmmccccppppuuuu====ppppeeeennnnttttiiiiuuuummmm, and ----mmmmccccppppuuuu====ppppeeeennnnttttiiiiuuuummmmpppprrrroooo respectively.
           These synonyms are deprecated.

       ----mmmmffffppppmmmmaaaatttthhhh====_u_n_i_t
           Generate floating point arithmetics for selected unit
           _u_n_i_t.  The choices for _u_n_i_t are:



2004-02-14                  gcc-3.3.3                         134





GCC(1)                         GNU                         GCC(1)


           333388887777 Use the standard 387 floating point coprocessor
               present majority of chips and emulated otherwise.
               Code compiled with this option will run almost
               everywhere.  The temporary results are computed in
               80bit precision instead of precision specified by
               the type resulting in slightly different results
               compared to most of other chips. See ----ffffffffllllooooaaaatttt----ssssttttoooorrrreeee
               for more detailed description.

               This is the default choice for i386 compiler.

           sssssssseeee Use scalar floating point instructions present in
               the SSE instruction set.  This instruction set is
               supported by Pentium3 and newer chips, in the AMD
               line by Athlon-4, Athlon-xp and Athlon-mp chips.
               The earlier version of SSE instruction set
               supports only single precision arithmetics, thus
               the double and extended precision arithmetics is
               still done using 387.  Later version, present only
               in Pentium4 and the future AMD x86-64 chips
               supports double precision arithmetics too.

               For i387 you need to use ----mmmmaaaarrrrcccchhhh====_c_p_u_-_t_y_p_e, ----mmmmsssssssseeee or
               ----mmmmsssssssseeee2222 switches to enable SSE extensions and make
               this option effective.  For x86-64 compiler, these
               extensions are enabled by default.

               The resulting code should be considerably faster
               in the majority of cases and avoid the numerical
               instability problems of 387 code, but may break
               some existing code that expects temporaries to be
               80bit.

               This is the default choice for the x86-64
               compiler.

           sssssssseeee,,,,333388887777
               Attempt to utilize both instruction sets at once.
               This effectively double the amount of available
               registers and on chips with separate execution
               units for 387 and SSE the execution resources too.
               Use this option with care, as it is still
               experimental, because the gcc register allocator
               does not model separate functional units well.

       ----mmmmaaaassssmmmm====_d_i_a_l_e_c_t
           Output asm instructions using selected _d_i_a_l_e_c_t.
           Supported choices are iiiinnnntttteeeellll or aaaatttttttt (the default one).

       ----mmmmiiiieeeeeeeeeeee----ffffpppp
       ----mmmmnnnnoooo----iiiieeeeeeeeeeee----ffffpppp
           Control whether or not the compiler uses IEEE floating
           point comparisons.  These handle correctly the case
           where the result of a comparison is unordered.



2004-02-14                  gcc-3.3.3                         135





GCC(1)                         GNU                         GCC(1)


       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not part
           of GCC.  Normally the facilities of the machine's
           usual C compiler are used, but this can't be done
           directly in cross-compilation.  You must make your own
           arrangements to provide suitable library functions for
           cross-compilation.

           On machines where a function returns floating point
           results in the 80387 register stack, some floating
           point opcodes may be emitted even if ----mmmmssssoooofffftttt----ffffllllooooaaaatttt is
           used.

       ----mmmmnnnnoooo----ffffpppp----rrrreeeetttt----iiiinnnn----333388887777
           Do not use the FPU registers for return values of
           functions.

           The usual calling convention has functions return
           values of types "float" and "double" in an FPU
           register, even if there is no FPU.  The idea is that
           the operating system should emulate an FPU.

           The option ----mmmmnnnnoooo----ffffpppp----rrrreeeetttt----iiiinnnn----333388887777 causes such values to be
           returned in ordinary CPU registers instead.

       ----mmmmnnnnoooo----ffffaaaannnnccccyyyy----mmmmaaaatttthhhh----333388887777
           Some 387 emulators do not support the "sin", "cos" and
           "sqrt" instructions for the 387.  Specify this option
           to avoid generating those instructions.  This option
           is the default on FreeBSD, OpenBSD and NetBSD.  This
           option is overridden when ----mmmmaaaarrrrcccchhhh indicates that the
           target cpu will always have an FPU and so the
           instruction will not need emulation.  As of revision
           2.6.1, these instructions are not generated unless you
           also use the ----ffffuuuunnnnssssaaaaffffeeee----mmmmaaaatttthhhh----ooooppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnnssss switch.

       ----mmmmaaaalllliiiiggggnnnn----ddddoooouuuubbbblllleeee
       ----mmmmnnnnoooo----aaaalllliiiiggggnnnn----ddddoooouuuubbbblllleeee
           Control whether GCC aligns "double", "long double",
           and "long long" variables on a two word boundary or a
           one word boundary.  Aligning "double" variables on a
           two word boundary will produce code that runs somewhat
           faster on a PPPPeeeennnnttttiiiiuuuummmm at the expense of more memory.

           WWWWaaaarrrrnnnniiiinnnngggg:::: if you use the ----mmmmaaaalllliiiiggggnnnn----ddddoooouuuubbbblllleeee switch,
           structures containing the above types will be aligned
           differently than the published application binary
           interface specifications for the 386 and will not be
           binary compatible with structures in code compiled
           without that switch.

       ----mmmm99996666bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee




2004-02-14                  gcc-3.3.3                         136





GCC(1)                         GNU                         GCC(1)


       ----mmmm111122228888bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee
           These switches control the size of "long double" type.
           The i386 application binary interface specifies the
           size to be 96 bits, so ----mmmm99996666bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee is the
           default in 32 bit mode.

           Modern architectures (Pentium and newer) would prefer
           "long double" to be aligned to an 8 or 16 byte
           boundary.  In arrays or structures conforming to the
           ABI, this would not be possible.  So specifying a
           ----mmmm111122228888bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee will align "long double" to a 16
           byte boundary by padding the "long double" with an
           additional 32 bit zero.

           In the x86-64 compiler, ----mmmm111122228888bbbbiiiitttt----lllloooonnnngggg----ddddoooouuuubbbblllleeee is the
           default choice as its ABI specifies that "long double"
           is to be aligned on 16 byte boundary.

           Notice that neither of these options enable any extra
           precision over the x87 standard of 80 bits for a "long
           double".

           WWWWaaaarrrrnnnniiiinnnngggg:::: if you override the default value for your
           target ABI, the structures and arrays containing "long
           double" variables will change their size as well as
           function calling convention for function taking "long
           double" will be modified.  Hence they will not be
           binary compatible with arrays or structures in code
           compiled without that switch.

       ----mmmmssssvvvvrrrr3333----sssshhhhlllliiiibbbb
       ----mmmmnnnnoooo----ssssvvvvrrrr3333----sssshhhhlllliiiibbbb
           Control whether GCC places uninitialized local
           variables into the "bss" or "data" segments.
           ----mmmmssssvvvvrrrr3333----sssshhhhlllliiiibbbb places them into "bss".  These options
           are meaningful only on System V Release 3.

       ----mmmmrrrrttttdddd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           with the "ret" _n_u_m instruction, which pops their
           arguments while returning.  This saves one instruction
           in the caller since there is no need to pop the
           arguments there.

           You can specify that an individual function is called
           with this calling sequence with the function attribute
           ssssttttddddccccaaaallllllll.  You can also override the ----mmmmrrrrttttdddd option by
           using the function attribute ccccddddeeeeccccllll.

           WWWWaaaarrrrnnnniiiinnnngggg:::: this calling convention is incompatible with
           the one normally used on Unix, so you cannot use it if
           you need to call libraries compiled with the Unix
           compiler.



2004-02-14                  gcc-3.3.3                         137





GCC(1)                         GNU                         GCC(1)


           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

       ----mmmmrrrreeeeggggppppaaaarrrrmmmm====_n_u_m
           Control how many registers are used to pass integer
           arguments.  By default, no registers are used to pass
           arguments, and at most 3 registers can be used.  You
           can control this behavior for a specific function by
           using the function attribute rrrreeeeggggppppaaaarrrrmmmm.

           WWWWaaaarrrrnnnniiiinnnngggg:::: if you use this switch, and _n_u_m is nonzero,
           then you must build all modules with the same value,
           including any libraries.  This includes the system
           libraries and startup modules.

       ----mmmmpppprrrreeeeffffeeeerrrrrrrreeeedddd----ssssttttaaaacccckkkk----bbbboooouuuunnnnddddaaaarrrryyyy====_n_u_m
           Attempt to keep the stack boundary aligned to a 2
           raised to _n_u_m byte boundary.  If ----mmmmpppprrrreeeeffffeeeerrrrrrrreeeedddd----ssssttttaaaacccckkkk----
           bbbboooouuuunnnnddddaaaarrrryyyy is not specified, the default is 4 (16 bytes
           or 128 bits), except when optimizing for code size
           (----OOOOssss), in which case the default is the minimum
           correct alignment (4 bytes for x86, and 8 bytes for
           x86-64).

           On Pentium and PentiumPro, "double" and "long double"
           values should be aligned to an 8 byte boundary (see
           ----mmmmaaaalllliiiiggggnnnn----ddddoooouuuubbbblllleeee) or suffer significant run time
           performance penalties.  On Pentium III, the Streaming
           SIMD Extension (SSE) data type "__m128" suffers
           similar penalties if it is not 16 byte aligned.

           To ensure proper alignment of this values on the
           stack, the stack boundary must be as aligned as that
           required by any value stored on the stack.  Further,
           every function must be generated such that it keeps
           the stack aligned.  Thus calling a function compiled
           with a higher preferred stack boundary from a function
           compiled with a lower preferred stack boundary will
           most likely misalign the stack.  It is recommended
           that libraries that use callbacks always use the
           default setting.

           This extra alignment does consume extra stack space,
           and generally increases code size.  Code that is
           sensitive to stack space usage, such as embedded
           systems and operating system kernels, may want to
           reduce the preferred alignment to ----mmmmpppprrrreeeeffffeeeerrrrrrrreeeedddd----ssssttttaaaacccckkkk----
           bbbboooouuuunnnnddddaaaarrrryyyy====2222.



2004-02-14                  gcc-3.3.3                         138





GCC(1)                         GNU                         GCC(1)


       ----mmmmmmmmmmmmxxxx
       ----mmmmnnnnoooo----mmmmmmmmxxxx
       ----mmmmsssssssseeee
       ----mmmmnnnnoooo----sssssssseeee
       ----mmmmsssssssseeee2222
       ----mmmmnnnnoooo----sssssssseeee2222
       ----mmmmsssssssseeee3333
       ----mmmmnnnnoooo----sssssssseeee3333
       ----mmmm3333ddddnnnnoooowwww
       ----mmmmnnnnoooo----3333ddddnnnnoooowwww
           These switches enable or disable the use of built-in
           functions that allow direct access to the MMX, SSE,
           SSE2, SSE3 and 3Dnow extensions of the instruction
           set.

           To have SSE/SSE2 instructions generated automatically
           from floating-point code, see ----mmmmffffppppmmmmaaaatttthhhh====sssssssseeee.

       ----mmmmppppuuuusssshhhh----aaaarrrrggggssss
       ----mmmmnnnnoooo----ppppuuuusssshhhh----aaaarrrrggggssss
           Use PUSH operations to store outgoing parameters.
           This method is shorter and usually equally fast as
           method using SUB/MOV operations and is enabled by
           default.  In some cases disabling it may improve
           performance because of improved scheduling and reduced
           dependencies.

       ----mmmmaaaaccccccccuuuummmmuuuullllaaaatttteeee----oooouuuuttttggggooooiiiinnnngggg----aaaarrrrggggssss
           If enabled, the maximum amount of space required for
           outgoing arguments will be computed in the function
           prologue.  This is faster on most modern CPUs because
           of reduced dependencies, improved scheduling and
           reduced stack usage when preferred stack boundary is
           not equal to 2.  The drawback is a notable increase in
           code size.  This switch implies ----mmmmnnnnoooo----ppppuuuusssshhhh----aaaarrrrggggssss.

       ----mmmmtttthhhhrrrreeeeaaaaddddssss
           Support thread-safe exception handling on MMMMiiiinnnnggggwwww33332222.
           Code that relies on thread-safe exception handling
           must compile and link all code with the ----mmmmtttthhhhrrrreeeeaaaaddddssss
           option.  When compiling, ----mmmmtttthhhhrrrreeeeaaaaddddssss defines ----DDDD____MMMMTTTT; when
           linking, it links in a special thread helper library
           ----llllmmmmiiiinnnnggggwwwwtttthhhhrrrrdddd which cleans up per thread exception
           handling data.

       ----mmmmnnnnoooo----aaaalllliiiiggggnnnn----ssssttttrrrriiiinnnnggggooooppppssss
           Do not align destination of inlined string operations.
           This switch reduces code size and improves performance
           in case the destination is already aligned, but gcc
           don't know about it.

       ----mmmmiiiinnnnlllliiiinnnneeee----aaaallllllll----ssssttttrrrriiiinnnnggggooooppppssss
           By default GCC inlines string operations only when
           destination is known to be aligned at least to 4 byte



2004-02-14                  gcc-3.3.3                         139





GCC(1)                         GNU                         GCC(1)


           boundary.  This enables more inlining, increase code
           size, but may improve performance of code that depends
           on fast memcpy, strlen and memset for short lengths.

       ----mmmmoooommmmiiiitttt----lllleeeeaaaaffff----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr
           Don't keep the frame pointer in a register for leaf
           functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra
           register available in leaf functions.  The option
           ----ffffoooommmmiiiitttt----ffffrrrraaaammmmeeee----ppppooooiiiinnnntttteeeerrrr removes the frame pointer for all
           functions which might make debugging harder.

       These ----mmmm switches are supported in addition to the above
       on AMD x86-64 processors in 64-bit environments.

       ----mmmm33332222
       ----mmmm66664444
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits and generates code that runs on any i386 system.
           The 64-bit environment sets int to 32 bits and long
           and pointer to 64 bits and generates code for AMD's
           x86-64 architecture.

       ----mmmmnnnnoooo----rrrreeeedddd----zzzzoooonnnneeee
           Do not use a so called red zone for x86-64 code.  The
           red zone is mandated by the x86-64 ABI, it is a
           128-byte area beyond the location of the stack pointer
           that will not be modified by signal or interrupt
           handlers and therefore can be used for temporary data
           without adjusting the stack pointer.  The flag ----mmmmnnnnoooo----
           rrrreeeedddd----zzzzoooonnnneeee disables this red zone.

       ----mmmmccccmmmmooooddddeeeellll====ssssmmmmaaaallllllll
           Generate code for the small code model: the program
           and its symbols must be linked in the lower 2 GB of
           the address space.  Pointers are 64 bits.  Programs
           can be statically or dynamically linked.  This is the
           default code model.

       ----mmmmccccmmmmooooddddeeeellll====kkkkeeeerrrrnnnneeeellll
           Generate code for the kernel code model.  The kernel
           runs in the negative 2 GB of the address space.  This
           model has to be used for Linux kernel code.

       ----mmmmccccmmmmooooddddeeeellll====mmmmeeeeddddiiiiuuuummmm
           Generate code for the medium model: The program is
           linked in the lower 2 GB of the address space but
           symbols can be located anywhere in the address space.
           Programs can be statically or dynamically linked, but
           building of shared libraries are not supported with
           the medium model.





2004-02-14                  gcc-3.3.3                         140





GCC(1)                         GNU                         GCC(1)


       ----mmmmccccmmmmooooddddeeeellll====llllaaaarrrrggggeeee
           Generate code for the large model: This model makes no
           assumptions about addresses and sizes of sections.
           Currently GCC does not implement this model.

       _H_P_P_A _O_p_t_i_o_n_s

       These ----mmmm options are defined for the HPPA family of
       computers:

       ----mmmmaaaarrrrcccchhhh====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are 1111....0000 for PA 1.0, 1111....1111
           for PA 1.1, and 2222....0000 for PA 2.0 processors.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper architecture option for your machine.  Code
           compiled for lower numbered architectures will run on
           higher numbered architectures, but not the other way
           around.

           PA 2.0 support currently requires gas snapshot
           19990413 or later.  The next release of binutils
           (current is 2.9.1) will probably contain PA 2.0
           support.

       ----mmmmppppaaaa----rrrriiiisssscccc----1111----0000
       ----mmmmppppaaaa----rrrriiiisssscccc----1111----1111
       ----mmmmppppaaaa----rrrriiiisssscccc----2222----0000
           Synonyms for ----mmmmaaaarrrrcccchhhh====1111....0000, ----mmmmaaaarrrrcccchhhh====1111....1111, and ----mmmmaaaarrrrcccchhhh====2222....0000
           respectively.

       ----mmmmbbbbiiiigggg----sssswwwwiiiittttcccchhhh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.

       ----mmmmjjjjuuuummmmpppp----iiiinnnn----ddddeeeellllaaaayyyy
           Fill delay slots of function calls with unconditional
           jump instructions by modifying the return pointer for
           the function call to be the target of the conditional
           jump.

       ----mmmmddddiiiissssaaaabbbblllleeee----ffffpppprrrreeeeggggssss
           Prevent floating point registers from being used in
           any manner.  This is necessary for compiling kernels
           which perform lazy context switching of floating point
           registers.  If you use this option and attempt to
           perform floating point operations, the compiler will
           abort.

       ----mmmmddddiiiissssaaaabbbblllleeee----iiiinnnnddddeeeexxxxiiiinnnngggg
           Prevent the compiler from using indexing address
           modes.  This avoids some rather obscure problems when
           compiling MIG generated code under MACH.



2004-02-14                  gcc-3.3.3                         141





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----ssssppppaaaacccceeee----rrrreeeeggggssss
           Generate code that assumes the target has no space
           registers.  This allows GCC to generate faster
           indirect calls and use unscaled index address modes.

           Such code is suitable for level 0 PA systems and
           kernels.

       ----mmmmffffaaaasssstttt----iiiinnnnddddiiiirrrreeeecccctttt----ccccaaaallllllllssss
           Generate code that assumes calls never cross space
           boundaries.  This allows GCC to emit code which
           performs faster indirect calls.

           This option will not work in the presence of shared
           libraries or nested functions.

       ----mmmmlllloooonnnngggg----llllooooaaaadddd----ssssttttoooorrrreeee
           Generate 3-instruction load and store sequences as
           sometimes required by the HP-UX 10 linker.  This is
           equivalent to the ++++kkkk option to the HP compilers.

       ----mmmmppppoooorrrrttttaaaabbbblllleeee----rrrruuuunnnnttttiiiimmmmeeee
           Use the portable calling conventions proposed by HP
           for ELF systems.

       ----mmmmggggaaaassss
           Enable the use of assembler directives only GAS
           understands.

       ----mmmmsssscccchhhheeeedddduuuulllleeee====_c_p_u_-_t_y_p_e
           Schedule code according to the constraints for the
           machine type _c_p_u_-_t_y_p_e.  The choices for _c_p_u_-_t_y_p_e are
           777700000000 7777111100000000, 7777111100000000LLLLCCCC, 7777222200000000, 7777333300000000 and 8888000000000000.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper scheduling option for your machine.  The
           default scheduling is 8888000000000000.

       ----mmmmlllliiiinnnnkkkkeeeerrrr----oooopppptttt
           Enable the optimization pass in the HP-UX linker.
           Note this makes symbolic debugging impossible.  It
           also triggers a bug in the HP-UX 8 and HP-UX 9 linkers
           in which they give bogus error messages when linking
           some programs.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries are not
           available for all HPPA targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded target hhhhppppppppaaaa1111....1111----****----pppprrrroooo does provide software
           floating point support.



2004-02-14                  gcc-3.3.3                         142





GCC(1)                         GNU                         GCC(1)


           ----mmmmssssoooofffftttt----ffffllllooooaaaatttt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with ----mmmmssssoooofffftttt----ffffllllooooaaaatttt in order for
           this to work.

       ----mmmmssssiiiioooo
           Generate the predefine, "_SIO", for server IO.  The
           default is ----mmmmwwwwssssiiiioooo.  This generates the predefines,
           "__hp9000s700", "__hp9000s700__" and "_WSIO", for
           workstation IO.  These options are available under HP-
           UX and HI-UX.

       ----mmmmggggnnnnuuuu----lllldddd
           Use GNU ld specific options.  This passes ----sssshhhhaaaarrrreeeedddd to
           ld when building a shared library.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the GNU linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is
           determined by the --------wwwwiiiitttthhhh----lllldddd configure option, gcc's
           program search path, and finally by the user's PPPPAAAATTTTHHHH.
           The linker used by GCC can be printed using wwwwhhhhiiiicccchhhh ````ggggcccccccc
           ----pppprrrriiiinnnntttt----pppprrrroooogggg----nnnnaaaammmmeeee====lllldddd````.

       ----mmmmhhhhpppp----lllldddd
           Use HP ld specific options.  This passes ----bbbb to ld when
           building a shared library and passes ++++AAAAcccccccceeeepppptttt
           TTTTyyyyppppeeeeMMMMiiiissssmmmmaaaattttcccchhhh to ld on all links.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the HP linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is
           determined by the --------wwwwiiiitttthhhh----lllldddd configure option, gcc's
           program search path, and finally by the user's PPPPAAAATTTTHHHH.
           The linker used by GCC can be printed using wwwwhhhhiiiicccchhhh ````ggggcccccccc
           ----pppprrrriiiinnnntttt----pppprrrroooogggg----nnnnaaaammmmeeee====lllldddd````.

       ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
           Generate code that uses long call sequences.  This
           ensures that a call is always able to reach linker
           generated stubs.  The default is to generate long
           calls only when the distance from the call site to the
           beginning of the function or translation unit, as the
           case may be, exceeds a predefined limit set by the
           branch type being used.  The limits for normal calls
           are 7,600,000 and 240,000 bytes, respectively for the
           PA 2.0 and PA 1.X architectures.  Sibcalls are always
           limited at 240,000 bytes.

           Distances are measured from the beginning of functions
           when using the ----ffffffffuuuunnnnccccttttiiiioooonnnn----sssseeeeccccttttiiiioooonnnnssss option, or when
           using the ----mmmmggggaaaassss and ----mmmmnnnnoooo----ppppoooorrrrttttaaaabbbblllleeee----rrrruuuunnnnttttiiiimmmmeeee options



2004-02-14                  gcc-3.3.3                         143





GCC(1)                         GNU                         GCC(1)


           together under HP-UX with the SOM linker.

           It is normally not desirable to use this option as it
           will degrade performance.  However, it may be useful
           in large applications, particularly when partial
           linking is used to build the application.

           The types of long calls used depends on the
           capabilities of the assembler and linker, and the type
           of code being generated.  The impact on systems that
           support long absolute calls, and long pic symbol-
           difference or pc-relative calls should be relatively
           small.  However, an indirect call is used on 32-bit
           ELF systems in pic code and it is quite long.

       ----nnnnoooolllliiiibbbbddddlllldddd
           Suppress the generation of link options to search
           libdld.sl when the ----ssssttttaaaattttiiiicccc option is specified on HP-
           UX 10 and later.

       ----ssssttttaaaattttiiiicccc
           The HP-UX implementation of setlocale in libc has a
           dependency on libdld.sl.  There isn't an archive
           version of libdld.sl.  Thus, when the ----ssssttttaaaattttiiiicccc option
           is specified, special link options are needed to
           resolve this dependency.

           On HP-UX 10 and later, the GCC driver adds the
           necessary options to link with libdld.sl when the
           ----ssssttttaaaattttiiiicccc option is specified.  This causes the
           resulting binary to be dynamic.  On the 64-bit port,
           the linkers generate dynamic binaries by default in
           any case.  The ----nnnnoooolllliiiibbbbddddlllldddd option can be used to prevent
           the GCC driver from adding these link options.

       ----tttthhhhrrrreeeeaaaaddddssss
           Add support for multithreading with the _d_c_e _t_h_r_e_a_d
           library under HP-UX.  This option sets flags for both
           the preprocessor and linker.

       _I_n_t_e_l _9_6_0 _O_p_t_i_o_n_s

       These ----mmmm options are defined for the Intel 960
       implementations:

       ----mmmm_c_p_u_-_t_y_p_e
           Assume the defaults for the machine type _c_p_u_-_t_y_p_e for
           some of the other options, including instruction
           scheduling, floating point support, and addressing
           modes.  The choices for _c_p_u_-_t_y_p_e are kkkkaaaa, kkkkbbbb, mmmmcccc, ccccaaaa,
           ccccffff, ssssaaaa, and ssssbbbb.  The default is kkkkbbbb.

       ----mmmmnnnnuuuummmmeeeerrrriiiiccccssss




2004-02-14                  gcc-3.3.3                         144





GCC(1)                         GNU                         GCC(1)


       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           The ----mmmmnnnnuuuummmmeeeerrrriiiiccccssss option indicates that the processor
           does support floating-point instructions.  The ----mmmmssssoooofffftttt----
           ffffllllooooaaaatttt option indicates that floating-point support
           should not be assumed.

       ----mmmmlllleeeeaaaaffff----pppprrrroooocccceeeedddduuuurrrreeeessss
       ----mmmmnnnnoooo----lllleeeeaaaaffff----pppprrrroooocccceeeedddduuuurrrreeeessss
           Do (or do not) attempt to alter leaf procedures to be
           callable with the "bal" instruction as well as "call".
           This will result in more efficient code for explicit
           calls when the "bal" instruction can be substituted by
           the assembler or linker, but less efficient code in
           other cases, such as calls via function pointers, or
           using a linker that doesn't support this optimization.

       ----mmmmttttaaaaiiiillll----ccccaaaallllllll
       ----mmmmnnnnoooo----ttttaaaaiiiillll----ccccaaaallllllll
           Do (or do not) make additional attempts (beyond those
           of the machine-independent portions of the compiler)
           to optimize tail-recursive calls into branches.  You
           may not want to do this because the detection of cases
           where this is not valid is not totally complete.  The
           default is ----mmmmnnnnoooo----ttttaaaaiiiillll----ccccaaaallllllll.

       ----mmmmccccoooommmmpppplllleeeexxxx----aaaaddddddddrrrr
       ----mmmmnnnnoooo----ccccoooommmmpppplllleeeexxxx----aaaaddddddddrrrr
           Assume (or do not assume) that the use of a complex
           addressing mode is a win on this implementation of the
           i960.  Complex addressing modes may not be worthwhile
           on the K-series, but they definitely are on the C-
           series.  The default is currently ----mmmmccccoooommmmpppplllleeeexxxx----aaaaddddddddrrrr for
           all processors except the CB and CC.

       ----mmmmccccooooddddeeee----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ccccooooddddeeee----aaaalllliiiiggggnnnn
           Align code to 8-byte boundaries for faster fetching
           (or don't bother).  Currently turned on by default for
           C-series implementations only.

       ----mmmmiiiicccc----ccccoooommmmppppaaaatttt
       ----mmmmiiiicccc2222....0000----ccccoooommmmppppaaaatttt
       ----mmmmiiiicccc3333....0000----ccccoooommmmppppaaaatttt
           Enable compatibility with iC960 v2.0 or v3.0.

       ----mmmmaaaassssmmmm----ccccoooommmmppppaaaatttt
       ----mmmmiiiinnnntttteeeellll----aaaassssmmmm
           Enable compatibility with the iC960 assembler.

       ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn
           Do not permit (do permit) unaligned accesses.





2004-02-14                  gcc-3.3.3                         145





GCC(1)                         GNU                         GCC(1)


       ----mmmmoooolllldddd----aaaalllliiiiggggnnnn
           Enable structure-alignment compatibility with Intel's
           gcc release version 1.3 (based on gcc 1.37).  This
           option implies ----mmmmssssttttrrrriiiicccctttt----aaaalllliiiiggggnnnn.

       ----mmmmlllloooonnnngggg----ddddoooouuuubbbblllleeee----66664444
           Implement type lllloooonnnngggg ddddoooouuuubbbblllleeee as 64-bit floating point
           numbers.  Without the option lllloooonnnngggg ddddoooouuuubbbblllleeee is
           implemented by 80-bit floating point numbers.  The
           only reason we have it because there is no 128-bit
           lllloooonnnngggg ddddoooouuuubbbblllleeee support in ffffpppp----bbbbiiiitttt....cccc yet.  So it is only
           useful for people using soft-float targets.
           Otherwise, we should recommend against use of it.

       _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s

       These ----mmmm options are defined for the DEC Alpha
       implementations:

       ----mmmmnnnnoooo----ssssoooofffftttt----ffffllllooooaaaatttt
       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Use (do not use) the hardware floating-point
           instructions for floating-point operations.  When
           ----mmmmssssoooofffftttt----ffffllllooooaaaatttt is specified, functions in _l_i_b_g_c_c_._a will
           be used to perform floating-point operations.  Unless
           they are replaced by routines that emulate the
           floating-point operations, or compiled in such a way
           as to call such emulations routines, these routines
           will issue floating-point operations.   If you are
           compiling for an Alpha without floating-point
           operations, you must ensure that the library is built
           so as not to call them.

           Note that Alpha implementations without floating-point
           operations are required to have floating-point
           registers.

       ----mmmmffffpppp----rrrreeeegggg
       ----mmmmnnnnoooo----ffffpppp----rrrreeeeggggssss
           Generate code that uses (does not use) the floating-
           point register set.  ----mmmmnnnnoooo----ffffpppp----rrrreeeeggggssss implies ----mmmmssssoooofffftttt----
           ffffllllooooaaaatttt.  If the floating-point register set is not
           used, floating point operands are passed in integer
           registers as if they were integers and floating-point
           results are passed in "$0" instead of "$f0".  This is
           a non-standard calling sequence, so any function with
           a floating-point argument or return value called by
           code compiled with ----mmmmnnnnoooo----ffffpppp----rrrreeeeggggssss must also be compiled
           with that option.

           A typical use of this option is building a kernel that
           does not use, and hence need not save and restore, any
           floating-point registers.




2004-02-14                  gcc-3.3.3                         146





GCC(1)                         GNU                         GCC(1)


       ----mmmmiiiieeeeeeeeeeee
           The Alpha architecture implements floating-point
           hardware optimized for maximum performance.  It is
           mostly compliant with the IEEE floating point
           standard.  However, for full compliance, software
           assistance is required.  This option generates code
           fully IEEE compliant code _e_x_c_e_p_t that the _i_n_e_x_a_c_t_-_f_l_a_g
           is not maintained (see below).  If this option is
           turned on, the preprocessor macro "_IEEE_FP" is
           defined during compilation.  The resulting code is
           less efficient but is able to correctly support
           denormalized numbers and exceptional IEEE values such
           as not-a-number and plus/minus infinity.  Other Alpha
           compilers call this option ----iiiieeeeeeeeeeee____wwwwiiiitttthhhh____nnnnoooo____iiiinnnneeeexxxxaaaacccctttt.

       ----mmmmiiiieeeeeeeeeeee----wwwwiiiitttthhhh----iiiinnnneeeexxxxaaaacccctttt
           This is like ----mmmmiiiieeeeeeeeeeee except the generated code also
           maintains the IEEE _i_n_e_x_a_c_t_-_f_l_a_g.  Turning on this
           option causes the generated code to implement fully-
           compliant IEEE math.  In addition to "_IEEE_FP",
           "_IEEE_FP_EXACT" is defined as a preprocessor macro.
           On some Alpha implementations the resulting code may
           execute significantly slower than the code generated
           by default.  Since there is very little code that
           depends on the _i_n_e_x_a_c_t_-_f_l_a_g, you should normally not
           specify this option.  Other Alpha compilers call this
           option ----iiiieeeeeeeeeeee____wwwwiiiitttthhhh____iiiinnnneeeexxxxaaaacccctttt.

       ----mmmmffffpppp----ttttrrrraaaapppp----mmmmooooddddeeee====_t_r_a_p_-_m_o_d_e
           This option controls what floating-point related traps
           are enabled.  Other Alpha compilers call this option
           ----ffffppppttttmmmm _t_r_a_p_-_m_o_d_e.  The trap mode can be set to one of
           four values:

           nnnn   This is the default (normal) setting.  The only
               traps that are enabled are the ones that cannot be
               disabled in software (e.g., division by zero
               trap).

           uuuu   In addition to the traps enabled by nnnn, underflow
               traps are enabled as well.

           ssssuuuu  Like ssssuuuu, but the instructions are marked to be
               safe for software completion (see Alpha
               architecture manual for details).

           ssssuuuuiiii Like ssssuuuu, but inexact traps are enabled as well.

       ----mmmmffffpppp----rrrroooouuuunnnnddddiiiinnnngggg----mmmmooooddddeeee====_r_o_u_n_d_i_n_g_-_m_o_d_e
           Selects the IEEE rounding mode.  Other Alpha compilers
           call this option ----ffffpppprrrrmmmm _r_o_u_n_d_i_n_g_-_m_o_d_e.  The _r_o_u_n_d_i_n_g_-
           _m_o_d_e can be one of:





2004-02-14                  gcc-3.3.3                         147





GCC(1)                         GNU                         GCC(1)


           nnnn   Normal IEEE rounding mode.  Floating point numbers
               are rounded towards the nearest machine number or
               towards the even machine number in case of a tie.

           mmmm   Round towards minus infinity.

           cccc   Chopped rounding mode.  Floating point numbers are
               rounded towards zero.

           dddd   Dynamic rounding mode.  A field in the floating
               point control register (_f_p_c_r, see Alpha
               architecture reference manual) controls the
               rounding mode in effect.  The C library
               initializes this register for rounding towards
               plus infinity.  Thus, unless your program modifies
               the _f_p_c_r, dddd corresponds to round towards plus
               infinity.

       ----mmmmttttrrrraaaapppp----pppprrrreeeecccciiiissssiiiioooonnnn====_t_r_a_p_-_p_r_e_c_i_s_i_o_n
           In the Alpha architecture, floating point traps are
           imprecise.  This means without software assistance it
           is impossible to recover from a floating trap and
           program execution normally needs to be terminated.
           GCC can generate code that can assist operating system
           trap handlers in determining the exact location that
           caused a floating point trap.  Depending on the
           requirements of an application, different levels of
           precisions can be selected:

           pppp   Program precision.  This option is the default and
               means a trap handler can only identify which
               program caused a floating point exception.

           ffff   Function precision.  The trap handler can
               determine the function that caused a floating
               point exception.

           iiii   Instruction precision.  The trap handler can
               determine the exact instruction that caused a
               floating point exception.

           Other Alpha compilers provide the equivalent options
           called ----ssssccccooooppppeeee____ssssaaaaffffeeee and ----rrrreeeessssuuuummmmppppttttiiiioooonnnn____ssssaaaaffffeeee.

       ----mmmmiiiieeeeeeeeeeee----ccccoooonnnnffffoooorrrrmmmmaaaannnntttt
           This option marks the generated code as IEEE
           conformant.  You must not use this option unless you
           also specify ----mmmmttttrrrraaaapppp----pppprrrreeeecccciiiissssiiiioooonnnn====iiii and either ----mmmmffffpppp----ttttrrrraaaapppp----
           mmmmooooddddeeee====ssssuuuu or ----mmmmffffpppp----ttttrrrraaaapppp----mmmmooooddddeeee====ssssuuuuiiii.  Its only effect is to
           emit the line ....eeeeffffllllaaaagggg 44448888 in the function prologue of
           the generated assembly file.  Under DEC Unix, this has
           the effect that IEEE-conformant math library routines
           will be linked in.




2004-02-14                  gcc-3.3.3                         148





GCC(1)                         GNU                         GCC(1)


       ----mmmmbbbbuuuuiiiilllldddd----ccccoooonnnnssssttttaaaannnnttttssss
           Normally GCC examines a 32- or 64-bit integer constant
           to see if it can construct it from smaller constants
           in two or three instructions.  If it cannot, it will
           output the constant as a literal and generate code to
           load it from the data segment at runtime.

           Use this option to require GCC to construct _a_l_l
           integer constants using code, even if it takes more
           instructions (the maximum is six).

           You would typically use this option to build a shared
           library dynamic loader.  Itself a shared library, it
           must relocate itself in memory before it can find the
           variables and constants in its own data segment.

       ----mmmmaaaallllpppphhhhaaaa----aaaassss
       ----mmmmggggaaaassss
           Select whether to generate code to be assembled by the
           vendor-supplied assembler (----mmmmaaaallllpppphhhhaaaa----aaaassss) or by the GNU
           assembler ----mmmmggggaaaassss.

       ----mmmmbbbbwwwwxxxx
       ----mmmmnnnnoooo----bbbbwwwwxxxx
       ----mmmmcccciiiixxxx
       ----mmmmnnnnoooo----cccciiiixxxx
       ----mmmmffffiiiixxxx
       ----mmmmnnnnoooo----ffffiiiixxxx
       ----mmmmmmmmaaaaxxxx
       ----mmmmnnnnoooo----mmmmaaaaxxxx
           Indicate whether GCC should generate code to use the
           optional BWX, CIX, FIX and MAX instruction sets.  The
           default is to use the instruction sets supported by
           the CPU type specified via ----mmmmccccppppuuuu==== option or that of
           the CPU on which GCC was built if none was specified.

       ----mmmmffffllllooooaaaatttt----vvvvaaaaxxxx
       ----mmmmffffllllooooaaaatttt----iiiieeeeeeeeeeee
           Generate code that uses (does not use) VAX F and G
           floating point arithmetic instead of IEEE single and
           double precision.

       ----mmmmeeeexxxxpppplllliiiicccciiiitttt----rrrreeeellllooooccccssss
       ----mmmmnnnnoooo----eeeexxxxpppplllliiiicccciiiitttt----rrrreeeellllooooccccssss
           Older Alpha assemblers provided no way to generate
           symbol relocations except via assembler macros.  Use
           of these macros does not allow optimal instruction
           scheduling.  GNU binutils as of version 2.12 supports
           a new syntax that allows the compiler to explicitly
           mark which relocations should apply to which
           instructions.  This option is mostly useful for
           debugging, as GCC detects the capabilities of the
           assembler when it is built and sets the default
           accordingly.



2004-02-14                  gcc-3.3.3                         149





GCC(1)                         GNU                         GCC(1)


       ----mmmmssssmmmmaaaallllllll----ddddaaaattttaaaa
       ----mmmmllllaaaarrrrggggeeee----ddddaaaattttaaaa
           When ----mmmmeeeexxxxpppplllliiiicccciiiitttt----rrrreeeellllooooccccssss is in effect, static data is
           accessed via _g_p_-_r_e_l_a_t_i_v_e relocations.  When ----mmmmssssmmmmaaaallllllll----
           ddddaaaattttaaaa is used, objects 8 bytes long or smaller are
           placed in a _s_m_a_l_l _d_a_t_a _a_r_e_a (the ".sdata" and ".sbss"
           sections) and are accessed via 16-bit relocations off
           of the "$gp" register.  This limits the size of the
           small data area to 64KB, but allows the variables to
           be directly accessed via a single instruction.

           The default is ----mmmmllllaaaarrrrggggeeee----ddddaaaattttaaaa.  With this option the
           data area is limited to just below 2GB.  Programs that
           require more than 2GB of data must use "malloc" or
           "mmap" to allocate the data in the heap instead of in
           the program's data segment.

           When generating code for shared libraries, ----ffffppppiiiicccc
           implies ----mmmmssssmmmmaaaallllllll----ddddaaaattttaaaa and ----ffffPPPPIIIICCCC implies ----mmmmllllaaaarrrrggggeeee----ddddaaaattttaaaa.

       ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           Set the instruction set and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  You can specify
           either the EEEEVVVV style name or the corresponding chip
           number.  GCC supports scheduling parameters for the
           EV4, EV5 and EV6 family of processors and will choose
           the default values for the instruction set from the
           processor you specify.  If you do not specify a
           processor type, GCC will default to the processor on
           which the compiler was built.

           Supported values for _c_p_u___t_y_p_e are

           eeeevvvv4444
           eeeevvvv44445555
           22221111000066664444
               Schedules as an EV4 and has no instruction set
               extensions.

           eeeevvvv5555
           22221111111166664444
               Schedules as an EV5 and has no instruction set
               extensions.

           eeeevvvv55556666
           22221111111166664444aaaa
               Schedules as an EV5 and supports the BWX
               extension.

           ppppccccaaaa55556666
           22221111111166664444ppppcccc
           22221111111166664444PPPPCCCC
               Schedules as an EV5 and supports the BWX and MAX
               extensions.



2004-02-14                  gcc-3.3.3                         150





GCC(1)                         GNU                         GCC(1)


           eeeevvvv6666
           22221111222266664444
               Schedules as an EV6 and supports the BWX, FIX, and
               MAX extensions.

           eeeevvvv66667777
           22221111222266664444aaaa
               Schedules as an EV6 and supports the BWX, CIX,
               FIX, and MAX extensions.

       ----mmmmttttuuuunnnneeee====_c_p_u___t_y_p_e
           Set only the instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  The instruction set is not
           changed.

       ----mmmmmmmmeeeemmmmoooorrrryyyy----llllaaaatttteeeennnnccccyyyy====_t_i_m_e
           Sets the latency the scheduler should assume for
           typical memory references as seen by the application.
           This number is highly dependent on the memory access
           patterns used by the application and the size of the
           external cache on the machine.

           Valid options for _t_i_m_e are

           _n_u_m_b_e_r
               A decimal number representing clock cycles.

           LLLL1111
           LLLL2222
           LLLL3333
           mmmmaaaaiiiinnnn
               The compiler contains estimates of the number of
               clock cycles for ``typical'' EV4 & EV5 hardware
               for the Level 1, 2 & 3 caches (also called Dcache,
               Scache, and Bcache), as well as to main memory.
               Note that L3 is only valid for EV5.

       _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s

       These ----mmmm options are defined for the DEC Alpha/VMS
       implementations:

       ----mmmmvvvvmmmmssss----rrrreeeettttuuuurrrrnnnn----ccccooooddddeeeessss
           Return VMS condition codes from main.  The default is
           to return POSIX style condition (e.g. error) codes.

       _H_8_/_3_0_0 _O_p_t_i_o_n_s

       These ----mmmm options are defined for the H8/300
       implementations:

       ----mmmmrrrreeeellllaaaaxxxx
           Shorten some address references at link time, when
           possible; uses the linker option ----rrrreeeellllaaaaxxxx.



2004-02-14                  gcc-3.3.3                         151





GCC(1)                         GNU                         GCC(1)


       ----mmmmhhhh Generate code for the H8/300H.

       ----mmmmssss Generate code for the H8S.

       ----mmmmnnnn Generate code for the H8S and H8/300H in the normal
           mode.  This switch must be used either with -mh or
           -ms.

       ----mmmmssss2222666600000000
           Generate code for the H8S/2600.  This switch must be
           used with ----mmmmssss.

       ----mmmmiiiinnnntttt33332222
           Make "int" data 32 bits by default.

       ----mmmmaaaalllliiiiggggnnnn----333300000000
           On the H8/300H and H8S, use the same alignment rules
           as for the H8/300.  The default for the H8/300H and
           H8S is to align longs and floats on 4 byte boundaries.
           ----mmmmaaaalllliiiiggggnnnn----333300000000 causes them to be aligned on 2 byte
           boundaries.  This option has no effect on the H8/300.

       _S_H _O_p_t_i_o_n_s

       These ----mmmm options are defined for the SH implementations:

       ----mmmm1111 Generate code for the SH1.

       ----mmmm2222 Generate code for the SH2.

       ----mmmm3333 Generate code for the SH3.

       ----mmmm3333eeee
           Generate code for the SH3e.

       ----mmmm4444----nnnnooooffffppppuuuu
           Generate code for the SH4 without a floating-point
           unit.

       ----mmmm4444----ssssiiiinnnngggglllleeee----oooonnnnllllyyyy
           Generate code for the SH4 with a floating-point unit
           that only supports single-precision arithmetic.

       ----mmmm4444----ssssiiiinnnngggglllleeee
           Generate code for the SH4 assuming the floating-point
           unit is in single-precision mode by default.

       ----mmmm4444 Generate code for the SH4.

       ----mmmmbbbb Compile code for the processor in big endian mode.

       ----mmmmllll Compile code for the processor in little endian mode.





2004-02-14                  gcc-3.3.3                         152





GCC(1)                         GNU                         GCC(1)


       ----mmmmddddaaaalllliiiiggggnnnn
           Align doubles at 64-bit boundaries.  Note that this
           changes the calling conventions, and thus some
           functions from the standard C library will not work
           unless you recompile it first with ----mmmmddddaaaalllliiiiggggnnnn.

       ----mmmmrrrreeeellllaaaaxxxx
           Shorten some address references at link time, when
           possible; uses the linker option ----rrrreeeellllaaaaxxxx.

       ----mmmmbbbbiiiiggggttttaaaabbbblllleeee
           Use 32-bit offsets in "switch" tables.  The default is
           to use 16-bit offsets.

       ----mmmmffffmmmmoooovvvvdddd
           Enable the use of the instruction "fmovd".

       ----mmmmhhhhiiiittttaaaacccchhhhiiii
           Comply with the calling conventions defined by
           Renesas.

       ----mmmmnnnnoooommmmaaaaccccssssaaaavvvveeee
           Mark the "MAC" register as call-clobbered, even if
           ----mmmmhhhhiiiittttaaaacccchhhhiiii is given.

       ----mmmmiiiieeeeeeeeeeee
           Increase IEEE-compliance of floating-point code.

       ----mmmmiiiissssiiiizzzzeeee
           Dump instruction size and location in the assembly
           code.

       ----mmmmppppaaaaddddssssttttrrrruuuucccctttt
           This option is deprecated.  It pads structures to
           multiple of 4 bytes, which is incompatible with the SH
           ABI.

       ----mmmmssssppppaaaacccceeee
           Optimize for space instead of speed.  Implied by ----OOOOssss.

       ----mmmmpppprrrreeeeffffeeeerrrrggggooootttt
           When generating position-independent code, emit
           function calls using the Global Offset Table instead
           of the Procedure Linkage Table.

       ----mmmmuuuusssseeeerrrrmmmmooooddddeeee
           Generate a library function call to invalidate
           instruction cache entries, after fixing up a
           trampoline.  This library function call doesn't assume
           it can write to the whole memory address space.  This
           is the default when the target is "sh-*-linux*".

       _O_p_t_i_o_n_s _f_o_r _S_y_s_t_e_m _V




2004-02-14                  gcc-3.3.3                         153





GCC(1)                         GNU                         GCC(1)


       These additional options are available on System V Release
       4 for compatibility with other compilers on those systems:

       ----GGGG  Create a shared object.  It is recommended that
           ----ssssyyyymmmmbbbboooolllliiiicccc or ----sssshhhhaaaarrrreeeedddd be used instead.

       ----QQQQyyyy Identify the versions of each tool used by the
           compiler, in a ".ident" assembler directive in the
           output.

       ----QQQQnnnn Refrain from adding ".ident" directives to the output
           file (this is the default).

       ----YYYYPPPP,,,,_d_i_r_s
           Search the directories _d_i_r_s, and no others, for
           libraries specified with ----llll.

       ----YYYYmmmm,,,,_d_i_r
           Look in the directory _d_i_r to find the M4 preprocessor.
           The assembler uses this option.

       _T_M_S_3_2_0_C_3_x_/_C_4_x _O_p_t_i_o_n_s

       These ----mmmm options are defined for TMS320C3x/C4x
       implementations:

       ----mmmmccccppppuuuu====_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction
           scheduling parameters for machine type _c_p_u___t_y_p_e.
           Supported values for _c_p_u___t_y_p_e are cccc33330000, cccc33331111, cccc33332222, cccc44440000,
           and cccc44444444.  The default is cccc44440000 to generate code for the
           TMS320C40.

       ----mmmmbbbbiiiigggg----mmmmeeeemmmmoooorrrryyyy
       ----mmmmbbbbiiiigggg
       ----mmmmssssmmmmaaaallllllll----mmmmeeeemmmmoooorrrryyyy
       ----mmmmssssmmmmaaaallllllll
           Generates code for the big or small memory model.  The
           small memory model assumed that all data fits into one
           64K word page.  At run-time the data page (DP)
           register must be set to point to the 64K page
           containing the .bss and .data program sections.  The
           big memory model is the default and requires reloading
           of the DP register for every direct memory access.

       ----mmmmbbbbkkkk
       ----mmmmnnnnoooo----bbbbkkkk
           Allow (disallow) allocation of general integer
           operands into the block count register BK.

       ----mmmmddddbbbb
       ----mmmmnnnnoooo----ddddbbbb
           Enable (disable) generation of code using decrement
           and branch, _D_B_c_o_n_d(D), instructions.  This is enabled



2004-02-14                  gcc-3.3.3                         154





GCC(1)                         GNU                         GCC(1)


           by default for the C4x.  To be on the safe side, this
           is disabled for the C3x, since the maximum iteration
           count on the C3x is 2^{23 + 1} (but who iterates loops
           more than 2^{23} times on the C3x?).  Note that GCC
           will try to reverse a loop so that it can utilize the
           decrement and branch instruction, but will give up if
           there is more than one memory reference in the loop.
           Thus a loop where the loop counter is decremented can
           generate slightly more efficient code, in cases where
           the RPTB instruction cannot be utilized.

       ----mmmmddddpppp----iiiissssrrrr----rrrreeeellllooooaaaadddd
       ----mmmmppppaaaarrrraaaannnnooooiiiidddd
           Force the DP register to be saved on entry to an
           interrupt service routine (ISR), reloaded to point to
           the data section, and restored on exit from the ISR.
           This should not be required unless someone has
           violated the small memory model by modifying the DP
           register, say within an object library.

       ----mmmmmmmmppppyyyyiiii
       ----mmmmnnnnoooo----mmmmppppyyyyiiii
           For the C3x use the 24-bit MPYI instruction for
           integer multiplies instead of a library call to
           guarantee 32-bit results.  Note that if one of the
           operands is a constant, then the multiplication will
           be performed using shifts and adds.  If the ----mmmmmmmmppppyyyyiiii
           option is not specified for the C3x, then squaring
           operations are performed inline instead of a library
           call.

       ----mmmmffffaaaasssstttt----ffffiiiixxxx
       ----mmmmnnnnoooo----ffffaaaasssstttt----ffffiiiixxxx
           The C3x/C4x FIX instruction to convert a floating
           point value to an integer value chooses the nearest
           integer less than or equal to the floating point value
           rather than to the nearest integer.  Thus if the
           floating point number is negative, the result will be
           incorrectly truncated an additional code is necessary
           to detect and correct this case.  This option can be
           used to disable generation of the additional code
           required to correct the result.

       ----mmmmrrrrppppttttbbbb
       ----mmmmnnnnoooo----rrrrppppttttbbbb
           Enable (disable) generation of repeat block sequences
           using the RPTB instruction for zero overhead looping.
           The RPTB construct is only used for innermost loops
           that do not call functions or jump across the loop
           boundaries.  There is no advantage having nested RPTB
           loops due to the overhead required to save and restore
           the RC, RS, and RE registers.  This is enabled by
           default with ----OOOO2222.




2004-02-14                  gcc-3.3.3                         155





GCC(1)                         GNU                         GCC(1)


       ----mmmmrrrrppppttttssss====_c_o_u_n_t
       ----mmmmnnnnoooo----rrrrppppttttssss
           Enable (disable) the use of the single instruction
           repeat instruction RPTS.  If a repeat block contains a
           single instruction, and the loop count can be
           guaranteed to be less than the value _c_o_u_n_t, GCC will
           emit a RPTS instruction instead of a RPTB.  If no
           value is specified, then a RPTS will be emitted even
           if the loop count cannot be determined at compile
           time.  Note that the repeated instruction following
           RPTS does not have to be reloaded from memory each
           iteration, thus freeing up the CPU buses for operands.
           However, since interrupts are blocked by this
           instruction, it is disabled by default.

       ----mmmmlllloooooooopppp----uuuunnnnssssiiiiggggnnnneeeedddd
       ----mmmmnnnnoooo----lllloooooooopppp----uuuunnnnssssiiiiggggnnnneeeedddd
           The maximum iteration count when using RPTS and RPTB
           (and DB on the C40) is 2^{31 + 1} since these
           instructions test if the iteration count is negative
           to terminate the loop.  If the iteration count is
           unsigned there is a possibility than the 2^{31 + 1}
           maximum iteration count may be exceeded.  This switch
           allows an unsigned iteration count.

       ----mmmmttttiiii
           Try to emit an assembler syntax that the TI assembler
           (asm30) is happy with.  This also enforces
           compatibility with the API employed by the TI C3x C
           compiler.  For example, long doubles are passed as
           structures rather than in floating point registers.

       ----mmmmrrrreeeeggggppppaaaarrrrmmmm
       ----mmmmmmmmeeeemmmmppppaaaarrrrmmmm
           Generate code that uses registers (stack) for passing
           arguments to functions.  By default, arguments are
           passed in registers where possible rather than by
           pushing arguments on to the stack.

       ----mmmmppppaaaarrrraaaalllllllleeeellll----iiiinnnnssssnnnnssss
       ----mmmmnnnnoooo----ppppaaaarrrraaaalllllllleeeellll----iiiinnnnssssnnnnssss
           Allow the generation of parallel instructions.  This
           is enabled by default with ----OOOO2222.

       ----mmmmppppaaaarrrraaaalllllllleeeellll----mmmmppppyyyy
       ----mmmmnnnnoooo----ppppaaaarrrraaaalllllllleeeellll----mmmmppppyyyy
           Allow the generation of MPY||ADD and MPY||SUB parallel
           instructions, provided ----mmmmppppaaaarrrraaaalllllllleeeellll----iiiinnnnssssnnnnssss is also
           specified.  These instructions have tight register
           constraints which can pessimize the code generation of
           large functions.

       _V_8_5_0 _O_p_t_i_o_n_s




2004-02-14                  gcc-3.3.3                         156





GCC(1)                         GNU                         GCC(1)


       These ----mmmm options are defined for V850 implementations:

       ----mmmmlllloooonnnngggg----ccccaaaallllllllssss
       ----mmmmnnnnoooo----lllloooonnnngggg----ccccaaaallllllllssss
           Treat all calls as being far away (near).  If calls
           are assumed to be far away, the compiler will always
           load the functions address up into a register, and
           call indirect through the pointer.

       ----mmmmnnnnoooo----eeeepppp
       ----mmmmeeeepppp
           Do not optimize (do optimize) basic blocks that use
           the same index pointer 4 or more times to copy pointer
           into the "ep" register, and use the shorter "sld" and
           "sst" instructions.  The ----mmmmeeeepppp option is on by default
           if you optimize.

       ----mmmmnnnnoooo----pppprrrroooolllloooogggg----ffffuuuunnnnccccttttiiiioooonnnn
       ----mmmmpppprrrroooolllloooogggg----ffffuuuunnnnccccttttiiiioooonnnn
           Do not use (do use) external functions to save and
           restore registers at the prologue and epilogue of a
           function.  The external functions are slower, but use
           less code space if more than one function saves the
           same number of registers.  The ----mmmmpppprrrroooolllloooogggg----ffffuuuunnnnccccttttiiiioooonnnn
           option is on by default if you optimize.

       ----mmmmssssppppaaaacccceeee
           Try to make the code as small as possible.  At
           present, this just turns on the ----mmmmeeeepppp and ----mmmmpppprrrroooolllloooogggg----
           ffffuuuunnnnccccttttiiiioooonnnn options.

       ----mmmmttttddddaaaa====_n
           Put static or global variables whose size is _n bytes
           or less into the tiny data area that register "ep"
           points to.  The tiny data area can hold up to 256
           bytes in total (128 bytes for byte references).

       ----mmmmssssddddaaaa====_n
           Put static or global variables whose size is _n bytes
           or less into the small data area that register "gp"
           points to.  The small data area can hold up to 64
           kilobytes.

       ----mmmmzzzzddddaaaa====_n
           Put static or global variables whose size is _n bytes
           or less into the first 32 kilobytes of memory.

       ----mmmmvvvv888855550000
           Specify that the target processor is the V850.

       ----mmmmbbbbiiiigggg----sssswwwwiiiittttcccchhhh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.



2004-02-14                  gcc-3.3.3                         157





GCC(1)                         GNU                         GCC(1)


       ----mmmmaaaapppppppp----rrrreeeeggggssss
           This option will cause r2 and r5 to be used in the
           code generated by the compiler.  This setting is the
           default.

       ----mmmmnnnnoooo----aaaapppppppp----rrrreeeeggggssss
           This option will cause r2 and r5 to be treated as
           fixed registers.

       ----mmmmvvvv888855550000eeee
           Specify that the target processor is the V850E.  The
           preprocessor constant ________vvvv888855550000eeee________ will be defined if
           this option is used.

           If neither ----mmmmvvvv888855550000 nor ----mmmmvvvv888855550000eeee are defined then a
           default target processor will be chosen and the
           relevant ________vvvv888855550000****________ preprocessor constant will be
           defined.

           The preprocessor constants ________vvvv888855550000 and ________vvvv888855551111________ are
           always defined, regardless of which processor variant
           is the target.

       ----mmmmddddiiiissssaaaabbbblllleeee----ccccaaaalllllllltttt
           This option will suppress generation of the CALLT
           instruction for the v850e flavors of the v850
           architecture.  The default is ----mmmmnnnnoooo----ddddiiiissssaaaabbbblllleeee----ccccaaaalllllllltttt which
           allows the CALLT instruction to be used.

       _A_R_C _O_p_t_i_o_n_s

       These options are defined for ARC implementations:

       ----EEEELLLL Compile code for little endian mode.  This is the
           default.

       ----EEEEBBBB Compile code for big endian mode.

       ----mmmmmmmmaaaannnngggglllleeee----ccccppppuuuu
           Prepend the name of the cpu to all public symbol
           names.  In multiple-processor systems, there are many
           ARC variants with different instruction and register
           set characteristics.  This flag prevents code compiled
           for one cpu to be linked with code compiled for
           another.  No facility exists for handling variants
           that are ``almost identical''.  This is an all or
           nothing option.

       ----mmmmccccppppuuuu====_c_p_u
           Compile code for ARC variant _c_p_u.  Which variants are
           supported depend on the configuration.  All variants
           support ----mmmmccccppppuuuu====bbbbaaaasssseeee, this is the default.





2004-02-14                  gcc-3.3.3                         158





GCC(1)                         GNU                         GCC(1)


       ----mmmmtttteeeexxxxtttt====_t_e_x_t_-_s_e_c_t_i_o_n
       ----mmmmddddaaaattttaaaa====_d_a_t_a_-_s_e_c_t_i_o_n
       ----mmmmrrrrooooddddaaaattttaaaa====_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n
           Put functions, data, and readonly data in _t_e_x_t_-
           _s_e_c_t_i_o_n, _d_a_t_a_-_s_e_c_t_i_o_n, and _r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n
           respectively by default.  This can be overridden with
           the "section" attribute.

       _N_S_3_2_K _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the 32000 series.
       The default values for these options depends on which
       style of 32000 was selected when the compiler was
       configured; the defaults for the most common choices are
       given below.

       ----mmmm33332222000033332222
       ----mmmm33332222000033332222
           Generate output for a 32032.  This is the default when
           the compiler is configured for 32032 and 32016 based
           systems.

       ----mmmm33332222333333332222
       ----mmmm33332222333333332222
           Generate output for a 32332.  This is the default when
           the compiler is configured for 32332-based systems.

       ----mmmm33332222555533332222
       ----mmmm33332222555533332222
           Generate output for a 32532.  This is the default when
           the compiler is configured for 32532-based systems.

       ----mmmm33332222000088881111
           Generate output containing 32081 instructions for
           floating point.  This is the default for all systems.

       ----mmmm33332222333388881111
           Generate output containing 32381 instructions for
           floating point.  This also implies ----mmmm33332222000088881111.  The 32381
           is only compatible with the 32332 and 32532 cpus.
           This is the default for the pc532-netbsd
           configuration.

       ----mmmmmmmmuuuullllttttiiii----aaaadddddddd
           Try and generate multiply-add floating point
           instructions "polyF" and "dotF".  This option is only
           available if the ----mmmm33332222333388881111 option is in effect.  Using
           these instructions requires changes to register
           allocation which generally has a negative impact on
           performance.  This option should only be enabled when
           compiling code particularly likely to make heavy use
           of multiply-add instructions.





2004-02-14                  gcc-3.3.3                         159





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooommmmuuuullllttttiiii----aaaadddddddd
           Do not try and generate multiply-add floating point
           instructions "polyF" and "dotF".  This is the default
           on all platforms.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Generate output containing library calls for floating
           point.  WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite libraries may not be
           available.

       ----mmmmiiiieeeeeeeeeeee----ccccoooommmmppppaaaarrrreeee
       ----mmmmnnnnoooo----iiiieeeeeeeeeeee----ccccoooommmmppppaaaarrrreeee
           Control whether or not the compiler uses IEEE floating
           point comparisons.  These handle correctly the case
           where the result of a comparison is unordered.
           WWWWaaaarrrrnnnniiiinnnngggg:::: the requisite kernel support may not be
           available.

       ----mmmmnnnnoooobbbbiiiittttffffiiiieeeelllldddd
           Do not use the bit-field instructions.  On some
           machines it is faster to use shifting and masking
           operations.  This is the default for the pc532.

       ----mmmmbbbbiiiittttffffiiiieeeelllldddd
           Do use the bit-field instructions.  This is the
           default for all platforms except the pc532.

       ----mmmmrrrrttttdddd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           pop their arguments on return with the "ret"
           instruction.

           This calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

           This option takes its name from the 680x0 "rtd"
           instruction.

       ----mmmmrrrreeeeggggppppaaaarrrraaaammmm
           Use a different function-calling convention where the
           first two arguments are passed in registers.




2004-02-14                  gcc-3.3.3                         160





GCC(1)                         GNU                         GCC(1)


           This calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix
           compiler.

       ----mmmmnnnnoooorrrreeeeggggppppaaaarrrraaaammmm
           Do not pass any arguments in registers.  This is the
           default for all targets.

       ----mmmmssssbbbb
           It is OK to use the sb as an index register which is
           always loaded with zero.  This is the default for the
           pc532-netbsd target.

       ----mmmmnnnnoooossssbbbb
           The sb register is not available for use or has not
           been initialized to zero by the run time system.  This
           is the default for all targets except the
           pc532-netbsd.  It is also implied whenever ----mmmmhhhhiiiimmmmeeeemmmm or
           ----ffffppppiiiicccc is set.

       ----mmmmhhhhiiiimmmmeeeemmmm
           Many ns32000 series addressing modes use displacements
           of up to 512MB.  If an address is above 512MB then
           displacements from zero can not be used.  This option
           causes code to be generated which can be loaded above
           512MB.  This may be useful for operating systems or
           ROM code.

       ----mmmmnnnnoooohhhhiiiimmmmeeeemmmm
           Assume code will be loaded in the first 512MB of
           virtual address space.  This is the default for all
           platforms.

       _A_V_R _O_p_t_i_o_n_s

       These options are defined for AVR implementations:

       ----mmmmmmmmccccuuuu====_m_c_u
           Specify ATMEL AVR instruction set or MCU type.

           Instruction set avr1 is for the minimal AVR core, not
           supported by the C compiler, only for assembler
           programs (MCU types: at90s1200, attiny10, attiny11,
           attiny12, attiny15, attiny28).

           Instruction set avr2 (default) is for the classic AVR
           core with up to 8K program memory space (MCU types:
           at90s2313, at90s2323, attiny22, at90s2333, at90s2343,
           at90s4414, at90s4433, at90s4434, at90s8515, at90c8534,
           at90s8535).

           Instruction set avr3 is for the classic AVR core with
           up to 128K program memory space (MCU types: atmega103,



2004-02-14                  gcc-3.3.3                         161





GCC(1)                         GNU                         GCC(1)


           atmega603, at43usb320, at76c711).

           Instruction set avr4 is for the enhanced AVR core with
           up to 8K program memory space (MCU types: atmega8,
           atmega83, atmega85).

           Instruction set avr5 is for the enhanced AVR core with
           up to 128K program memory space (MCU types: atmega16,
           atmega161, atmega163, atmega32, atmega323, atmega64,
           atmega128, at43usb355, at94k).

       ----mmmmssssiiiizzzzeeee
           Output instruction sizes to the asm file.

       ----mmmmiiiinnnniiiitttt----ssssttttaaaacccckkkk====_N
           Specify the initial stack address, which may be a
           symbol or numeric value, ________ssssttttaaaacccckkkk is the default.

       ----mmmmnnnnoooo----iiiinnnntttteeeerrrrrrrruuuuppppttttssss
           Generated code is not compatible with hardware
           interrupts.  Code size will be smaller.

       ----mmmmccccaaaallllllll----pppprrrroooolllloooogggguuuueeeessss
           Functions prologues/epilogues expanded as call to
           appropriate subroutines.  Code size will be smaller.

       ----mmmmnnnnoooo----ttttaaaabbbblllleeeejjjjuuuummmmpppp
           Do not generate tablejump insns which sometimes
           increase code size.

       ----mmmmttttiiiinnnnyyyy----ssssttttaaaacccckkkk
           Change only the low 8 bits of the stack pointer.

       _M_C_o_r_e _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the Motorola M*Core
       processors.

       ----mmmmhhhhaaaarrrrddddlllliiiitttt
       ----mmmmnnnnoooo----hhhhaaaarrrrddddlllliiiitttt
           Inline constants into the code stream if it can be
           done in two instructions or less.

       ----mmmmddddiiiivvvv
       ----mmmmnnnnoooo----ddddiiiivvvv
           Use the divide instruction.  (Enabled by default).

       ----mmmmrrrreeeellllaaaaxxxx----iiiimmmmmmmmeeeeddddiiiiaaaatttteeee
       ----mmmmnnnnoooo----rrrreeeellllaaaaxxxx----iiiimmmmmmmmeeeeddddiiiiaaaatttteeee
           Allow arbitrary sized immediates in bit operations.

       ----mmmmwwwwiiiiddddeeee----bbbbiiiittttffffiiiieeeellllddddssss





2004-02-14                  gcc-3.3.3                         162





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----wwwwiiiiddddeeee----bbbbiiiittttffffiiiieeeellllddddssss
           Always treat bit-fields as int-sized.

       ----mmmm4444bbbbyyyytttteeee----ffffuuuunnnnccccttttiiiioooonnnnssss
       ----mmmmnnnnoooo----4444bbbbyyyytttteeee----ffffuuuunnnnccccttttiiiioooonnnnssss
           Force all functions to be aligned to a four byte
           boundary.

       ----mmmmccccaaaallllllllggggrrrraaaapppphhhh----ddddaaaattttaaaa
       ----mmmmnnnnoooo----ccccaaaallllllllggggrrrraaaapppphhhh----ddddaaaattttaaaa
           Emit callgraph information.

       ----mmmmsssslllloooowwww----bbbbyyyytttteeeessss
       ----mmmmnnnnoooo----sssslllloooowwww----bbbbyyyytttteeeessss
           Prefer word access when reading byte quantities.

       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
       ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn
           Generate code for a little endian target.

       ----mmmm222211110000
       ----mmmm333344440000
           Generate code for the 210 processor.

       _I_A_-_6_4 _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the Intel IA-64
       architecture.

       ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn
           Generate code for a big endian target.  This is the
           default for HP-UX.

       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           Generate code for a little endian target.  This is the
           default for AIX5 and Linux.

       ----mmmmggggnnnnuuuu----aaaassss
       ----mmmmnnnnoooo----ggggnnnnuuuu----aaaassss
           Generate (or don't) code for the GNU assembler.  This
           is the default.

       ----mmmmggggnnnnuuuu----lllldddd
       ----mmmmnnnnoooo----ggggnnnnuuuu----lllldddd
           Generate (or don't) code for the GNU linker.  This is
           the default.

       ----mmmmnnnnoooo----ppppiiiicccc
           Generate code that does not use a global pointer
           register.  The result is not position independent
           code, and violates the IA-64 ABI.

       ----mmmmvvvvoooollllaaaattttiiiilllleeee----aaaassssmmmm----ssssttttoooopppp




2004-02-14                  gcc-3.3.3                         163





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----vvvvoooollllaaaattttiiiilllleeee----aaaassssmmmm----ssssttttoooopppp
           Generate (or don't) a stop bit immediately before and
           after volatile asm statements.

       ----mmmmbbbb----sssstttteeeepppp
           Generate code that works around Itanium B step errata.

       ----mmmmrrrreeeeggggiiiisssstttteeeerrrr----nnnnaaaammmmeeeessss
       ----mmmmnnnnoooo----rrrreeeeggggiiiisssstttteeeerrrr----nnnnaaaammmmeeeessss
           Generate (or don't) iiiinnnn, lllloooocccc, and oooouuuutttt register names
           for the stacked registers.  This may make assembler
           output more readable.

       ----mmmmnnnnoooo----ssssddddaaaattttaaaa
       ----mmmmssssddddaaaattttaaaa
           Disable (or enable) optimizations that use the small
           data section.  This may be useful for working around
           optimizer bugs.

       ----mmmmccccoooonnnnssssttttaaaannnntttt----ggggpppp
           Generate code that uses a single constant global
           pointer value.  This is useful when compiling kernel
           code.

       ----mmmmaaaauuuuttttoooo----ppppiiiicccc
           Generate code that is self-relocatable.  This implies
           ----mmmmccccoooonnnnssssttttaaaannnntttt----ggggpppp.  This is useful when compiling firmware
           code.

       ----mmmmiiiinnnnlllliiiinnnneeee----ffffllllooooaaaatttt----ddddiiiivvvviiiiddddeeee----mmmmiiiinnnn----llllaaaatttteeeennnnccccyyyy
           Generate code for inline divides of floating point
           values using the minimum latency algorithm.

       ----mmmmiiiinnnnlllliiiinnnneeee----ffffllllooooaaaatttt----ddddiiiivvvviiiiddddeeee----mmmmaaaaxxxx----tttthhhhrrrroooouuuugggghhhhppppuuuutttt
           Generate code for inline divides of floating point
           values using the maximum throughput algorithm.

       ----mmmmiiiinnnnlllliiiinnnneeee----iiiinnnntttt----ddddiiiivvvviiiiddddeeee----mmmmiiiinnnn----llllaaaatttteeeennnnccccyyyy
           Generate code for inline divides of integer values
           using the minimum latency algorithm.

       ----mmmmiiiinnnnlllliiiinnnneeee----iiiinnnntttt----ddddiiiivvvviiiiddddeeee----mmmmaaaaxxxx----tttthhhhrrrroooouuuugggghhhhppppuuuutttt
           Generate code for inline divides of integer values
           using the maximum throughput algorithm.

       ----mmmmnnnnoooo----ddddwwwwaaaarrrrffff2222----aaaassssmmmm
       ----mmmmddddwwwwaaaarrrrffff2222----aaaassssmmmm
           Don't (or do) generate assembler code for the DWARF2
           line number debugging info.  This may be useful when
           not using the GNU assembler.

       ----mmmmffffiiiixxxxeeeedddd----rrrraaaannnnggggeeee====_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the



2004-02-14                  gcc-3.3.3                         164





GCC(1)                         GNU                         GCC(1)


           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       _D_3_0_V _O_p_t_i_o_n_s

       These ----mmmm options are defined for D30V implementations:

       ----mmmmeeeexxxxttttmmmmeeeemmmm
           Link the ....tttteeeexxxxtttt, ....ddddaaaattttaaaa, ....bbbbssssssss, ....ssssttttrrrriiiinnnnggggssss, ....rrrrooooddddaaaattttaaaa,
           ....rrrrooooddddaaaattttaaaa1111, ....ddddaaaattttaaaa1111 sections into external memory, which
           starts at location "0x80000000".

       ----mmmmeeeexxxxttttmmmmeeeemmmmoooorrrryyyy
           Same as the ----mmmmeeeexxxxttttmmmmeeeemmmm switch.

       ----mmmmoooonnnncccchhhhiiiipppp
           Link the ....tttteeeexxxxtttt section into onchip text memory, which
           starts at location "0x0".  Also link ....ddddaaaattttaaaa, ....bbbbssssssss,
           ....ssssttttrrrriiiinnnnggggssss, ....rrrrooooddddaaaattttaaaa, ....rrrrooooddddaaaattttaaaa1111, ....ddddaaaattttaaaa1111 sections into
           onchip data memory, which starts at location
           "0x20000000".

       ----mmmmnnnnoooo----aaaassssmmmm----ooooppppttttiiiimmmmiiiizzzzeeee
       ----mmmmaaaassssmmmm----ooooppppttttiiiimmmmiiiizzzzeeee
           Disable (enable) passing ----OOOO to the assembler when
           optimizing.  The assembler uses the ----OOOO option to
           automatically parallelize adjacent short instructions
           where possible.

       ----mmmmbbbbrrrraaaannnncccchhhh----ccccoooosssstttt====_n
           Increase the internal costs of branches to _n.  Higher
           costs means that the compiler will issue more
           instructions to avoid doing a branch.  The default is
           2.

       ----mmmmccccoooonnnndddd----eeeexxxxeeeecccc====_n
           Specify the maximum number of conditionally executed
           instructions that replace a branch.  The default is 4.

       _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are the ----mmmm options defined for the S/390 and zSeries
       architecture.

       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Use (do not use) the hardware floating-point
           instructions and registers for floating-point
           operations.  When ----mmmmssssoooofffftttt----ffffllllooooaaaatttt is specified, functions
           in _l_i_b_g_c_c_._a will be used to perform floating-point
           operations.  When ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt is specified, the
           compiler generates IEEE floating-point instructions.



2004-02-14                  gcc-3.3.3                         165





GCC(1)                         GNU                         GCC(1)


           This is the default.

       ----mmmmbbbbaaaacccckkkkcccchhhhaaaaiiiinnnn
       ----mmmmnnnnoooo----bbbbaaaacccckkkkcccchhhhaaaaiiiinnnn
           Generate (or do not generate) code which maintains an
           explicit backchain within the stack frame that points
           to the caller's frame.  This is currently needed to
           allow debugging.  The default is to generate the
           backchain.

       ----mmmmssssmmmmaaaallllllll----eeeexxxxeeeecccc
       ----mmmmnnnnoooo----ssssmmmmaaaallllllll----eeeexxxxeeeecccc
           Generate (or do not generate) code using the "bras"
           instruction to do subroutine calls.  This only works
           reliably if the total executable size does not exceed
           64k.  The default is to use the "basr" instruction
           instead, which does not have this limitation.

       ----mmmm66664444
       ----mmmm33331111
           When ----mmmm33331111 is specified, generate code compliant to the
           Linux for S/390 ABI.  When ----mmmm66664444 is specified, generate
           code compliant to the Linux for zSeries ABI.  This
           allows GCC in particular to generate 64-bit
           instructions.  For the ssss333399990000 targets, the default is
           ----mmmm33331111, while the ssss333399990000xxxx targets default to ----mmmm66664444.

       ----mmmmmmmmvvvvcccclllleeee
       ----mmmmnnnnoooo----mmmmvvvvcccclllleeee
           Generate (or do not generate) code using the "mvcle"
           instruction to perform block moves.  When ----mmmmnnnnoooo----mmmmvvvvcccclllleeee
           is specified, use a "mvc" loop instead.  This is the
           default.

       ----mmmmddddeeeebbbbuuuugggg
       ----mmmmnnnnoooo----ddddeeeebbbbuuuugggg
           Print (or do not print) additional debug information
           when compiling.  The default is to not print debug
           information.

       _C_R_I_S _O_p_t_i_o_n_s

       These options are defined specifically for the CRIS ports.

       ----mmmmaaaarrrrcccchhhh====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
       ----mmmmccccppppuuuu====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are vvvv3333, vvvv8888 and vvvv11110000 for
           respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.
           Default is vvvv0000 except for cris-axis-linux-gnu, where
           the default is vvvv11110000.

       ----mmmmttttuuuunnnneeee====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Tune to _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e everything applicable about



2004-02-14                  gcc-3.3.3                         166





GCC(1)                         GNU                         GCC(1)


           the generated code, except for the ABI and the set of
           available instructions.  The choices for _a_r_c_h_i_t_e_c_t_u_r_e_-
           _t_y_p_e are the same as for ----mmmmaaaarrrrcccchhhh====_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e.

       ----mmmmmmmmaaaaxxxx----ssssttttaaaacccckkkk----ffffrrrraaaammmmeeee====_n
           Warn when the stack frame of a function exceeds _n
           bytes.

       ----mmmmeeeelllliiiinnnnuuuuxxxx----ssssttttaaaacccckkkkssssiiiizzzzeeee====_n
           Only available with the ccccrrrriiiissss----aaaaxxxxiiiissss----aaaaoooouuuutttt target.
           Arranges for indications in the program to the kernel
           loader that the stack of the program should be set to
           _n bytes.

       ----mmmmeeeettttrrrraaaaxxxx4444
       ----mmmmeeeettttrrrraaaaxxxx111100000000
           The options ----mmmmeeeettttrrrraaaaxxxx4444 and ----mmmmeeeettttrrrraaaaxxxx111100000000 are synonyms for
           ----mmmmaaaarrrrcccchhhh====vvvv3333 and ----mmmmaaaarrrrcccchhhh====vvvv8888 respectively.

       ----mmmmppppddddeeeebbbbuuuugggg
           Enable CRIS-specific verbose debug-related information
           in the assembly code.  This option also has the effect
           to turn off the ####NNNNOOOO____AAAAPPPPPPPP formatted-code indicator to
           the assembler at the beginning of the assembly file.

       ----mmmmcccccccc----iiiinnnniiiitttt
           Do not use condition-code results from previous
           instruction; always emit compare and test instructions
           before use of condition codes.

       ----mmmmnnnnoooo----ssssiiiiddddeeee----eeeeffffffffeeeeccccttttssss
           Do not emit instructions with side-effects in
           addressing modes other than post-increment.

       ----mmmmssssttttaaaacccckkkk----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ssssttttaaaacccckkkk----aaaalllliiiiggggnnnn
       ----mmmmddddaaaattttaaaa----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ddddaaaattttaaaa----aaaalllliiiiggggnnnn
       ----mmmmccccoooonnnnsssstttt----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ccccoooonnnnsssstttt----aaaalllliiiiggggnnnn
           These options (no-options) arranges (eliminate
           arrangements) for the stack-frame, individual data and
           constants to be aligned for the maximum single data
           access size for the chosen CPU model.  The default is
           to arrange for 32-bit alignment.  ABI details such as
           structure layout are not affected by these options.

       ----mmmm33332222----bbbbiiiitttt
       ----mmmm11116666----bbbbiiiitttt
       ----mmmm8888----bbbbiiiitttt
           Similar to the stack- data- and const-align options
           above, these options arrange for stack-frame, writable
           data and constants to all be 32-bit, 16-bit or 8-bit
           aligned.  The default is 32-bit alignment.



2004-02-14                  gcc-3.3.3                         167





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----pppprrrroooolllloooogggguuuueeee----eeeeppppiiiilllloooogggguuuueeee
       ----mmmmpppprrrroooolllloooogggguuuueeee----eeeeppppiiiilllloooogggguuuueeee
           With ----mmmmnnnnoooo----pppprrrroooolllloooogggguuuueeee----eeeeppppiiiilllloooogggguuuueeee, the normal function
           prologue and epilogue that sets up the stack-frame are
           omitted and no return instructions or return sequences
           are generated in the code.  Use this option only
           together with visual inspection of the compiled code:
           no warnings or errors are generated when call-saved
           registers must be saved, or storage for local variable
           needs to be allocated.

       ----mmmmnnnnoooo----ggggoooottttpppplllltttt
       ----mmmmggggoooottttpppplllltttt
           With ----ffffppppiiiicccc and ----ffffPPPPIIIICCCC, don't generate (do generate)
           instruction sequences that load addresses for
           functions from the PLT part of the GOT rather than
           (traditional on other architectures) calls to the PLT.
           The default is ----mmmmggggoooottttpppplllltttt.

       ----mmmmaaaaoooouuuutttt
           Legacy no-op option only recognized with the cris-
           axis-aout target.

       ----mmmmeeeellllffff
           Legacy no-op option only recognized with the cris-
           axis-elf and cris-axis-linux-gnu targets.

       ----mmmmeeeelllliiiinnnnuuuuxxxx
           Only recognized with the cris-axis-aout target, where
           it selects a GNU/linux-like multilib, include files
           and instruction set for ----mmmmaaaarrrrcccchhhh====vvvv8888.

       ----mmmmlllliiiinnnnuuuuxxxx
           Legacy no-op option only recognized with the cris-
           axis-linux-gnu target.

       ----ssssiiiimmmm
           This option, recognized for the cris-axis-aout and
           cris-axis-elf arranges to link with input-output
           functions from a simulator library.  Code, initialized
           data and zero-initialized data are allocated
           consecutively.

       ----ssssiiiimmmm2222
           Like ----ssssiiiimmmm, but pass linker options to locate
           initialized data at 0x40000000 and zero-initialized
           data at 0x80000000.

       _M_M_I_X _O_p_t_i_o_n_s

       These options are defined for the MMIX:

       ----mmmmlllliiiibbbbffffuuuunnnnccccssss




2004-02-14                  gcc-3.3.3                         168





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----lllliiiibbbbffffuuuunnnnccccssss
           Specify that intrinsic library functions are being
           compiled, passing all values in registers, no matter
           the size.

       ----mmmmeeeeppppssssiiiilllloooonnnn
       ----mmmmnnnnoooo----eeeeppppssssiiiilllloooonnnn
           Generate floating-point comparison instructions that
           compare with respect to the "rE" epsilon register.

       ----mmmmaaaabbbbiiii====mmmmmmmmiiiixxxxwwwwaaaarrrreeee
       ----mmmmaaaabbbbiiii====ggggnnnnuuuu
           Generate code that passes function parameters and
           return values that (in the called function) are seen
           as registers "$0" and up, as opposed to the GNU ABI
           which uses global registers "$231" and up.

       ----mmmmzzzzeeeerrrroooo----eeeexxxxtttteeeennnndddd
       ----mmmmnnnnoooo----zzzzeeeerrrroooo----eeeexxxxtttteeeennnndddd
           When reading data from memory in sizes shorter than 64
           bits, use (do not use) zero-extending load
           instructions by default, rather than sign-extending
           ones.

       ----mmmmkkkknnnnuuuutttthhhhddddiiiivvvv
       ----mmmmnnnnoooo----kkkknnnnuuuutttthhhhddddiiiivvvv
           Make the result of a division yielding a remainder
           have the same sign as the divisor.  With the default,
           ----mmmmnnnnoooo----kkkknnnnuuuutttthhhhddddiiiivvvv, the sign of the remainder follows the
           sign of the dividend.  Both methods are arithmetically
           valid, the latter being almost exclusively used.

       ----mmmmttttoooopppplllleeeevvvveeeellll----ssssyyyymmmmbbbboooollllssss
       ----mmmmnnnnoooo----ttttoooopppplllleeeevvvveeeellll----ssssyyyymmmmbbbboooollllssss
           Prepend (do not prepend) a :::: to all global symbols, so
           the assembly code can be used with the "PREFIX"
           assembly directive.

       ----mmmmeeeellllffff
           Generate an executable in the ELF format, rather than
           the default mmmmmmmmoooo format used by the mmmmmmmmiiiixxxx simulator.

       ----mmmmbbbbrrrraaaannnncccchhhh----pppprrrreeeeddddiiiicccctttt
       ----mmmmnnnnoooo----bbbbrrrraaaannnncccchhhh----pppprrrreeeeddddiiiicccctttt
           Use (do not use) the probable-branch instructions,
           when static branch prediction indicates a probable
           branch.

       ----mmmmbbbbaaaasssseeee----aaaaddddddddrrrreeeesssssssseeeessss
       ----mmmmnnnnoooo----bbbbaaaasssseeee----aaaaddddddddrrrreeeesssssssseeeessss
           Generate (do not generate) code that uses _b_a_s_e
           _a_d_d_r_e_s_s_e_s.  Using a base address automatically
           generates a request (handled by the assembler and the
           linker) for a constant to be set up in a global



2004-02-14                  gcc-3.3.3                         169





GCC(1)                         GNU                         GCC(1)


           register.  The register is used for one or more base
           address requests within the range 0 to 255 from the
           value held in the register.  The generally leads to
           short and fast code, but the number of different data
           items that can be addressed is limited.  This means
           that a program that uses lots of static data may
           require ----mmmmnnnnoooo----bbbbaaaasssseeee----aaaaddddddddrrrreeeesssssssseeeessss.

       ----mmmmssssiiiinnnngggglllleeee----eeeexxxxiiiitttt
       ----mmmmnnnnoooo----ssssiiiinnnngggglllleeee----eeeexxxxiiiitttt
           Force (do not force) generated code to have a single
           exit point in each function.

       _P_D_P_-_1_1 _O_p_t_i_o_n_s

       These options are defined for the PDP-11:

       ----mmmmffffppppuuuu
           Use hardware FPP floating point.  This is the default.
           (FIS floating point on the PDP-11/40 is not
           supported.)

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Do not use hardware floating point.

       ----mmmmaaaacccc0000
           Return floating-point results in ac0 (fr0 in Unix
           assembler syntax).

       ----mmmmnnnnoooo----aaaacccc0000
           Return floating-point results in memory.  This is the
           default.

       ----mmmm44440000
           Generate code for a PDP-11/40.

       ----mmmm44445555
           Generate code for a PDP-11/45.  This is the default.

       ----mmmm11110000
           Generate code for a PDP-11/10.

       ----mmmmbbbbccccooooppppyyyy----bbbbuuuuiiiillllttttiiiinnnn
           Use inline "movstrhi" patterns for copying memory.
           This is the default.

       ----mmmmbbbbccccooooppppyyyy
           Do not use inline "movstrhi" patterns for copying
           memory.

       ----mmmmiiiinnnntttt11116666
       ----mmmmnnnnoooo----iiiinnnntttt33332222
           Use 16-bit "int".  This is the default.




2004-02-14                  gcc-3.3.3                         170





GCC(1)                         GNU                         GCC(1)


       ----mmmmiiiinnnntttt33332222
       ----mmmmnnnnoooo----iiiinnnntttt11116666
           Use 32-bit "int".

       ----mmmmffffllllooooaaaatttt66664444
       ----mmmmnnnnoooo----ffffllllooooaaaatttt33332222
           Use 64-bit "float".  This is the default.

       ----mmmmffffllllooooaaaatttt33332222
       ----mmmmnnnnoooo----ffffllllooooaaaatttt66664444
           Use 32-bit "float".

       ----mmmmaaaabbbbsssshhhhiiii
           Use "abshi2" pattern.  This is the default.

       ----mmmmnnnnoooo----aaaabbbbsssshhhhiiii
           Do not use "abshi2" pattern.

       ----mmmmbbbbrrrraaaannnncccchhhh----eeeexxxxppppeeeennnnssssiiiivvvveeee
           Pretend that branches are expensive.  This is for
           experimenting with code generation only.

       ----mmmmbbbbrrrraaaannnncccchhhh----cccchhhheeeeaaaapppp
           Do not pretend that branches are expensive.  This is
           the default.

       ----mmmmsssspppplllliiiitttt
           Generate code for a system with split I&D.

       ----mmmmnnnnoooo----sssspppplllliiiitttt
           Generate code for a system without split I&D.  This is
           the default.

       ----mmmmuuuunnnniiiixxxx----aaaassssmmmm
           Use Unix assembler syntax.  This is the default when
           configured for ppppddddpppp11111111----****----bbbbssssdddd.

       ----mmmmddddeeeecccc----aaaassssmmmm
           Use DEC assembler syntax.  This is the default when
           configured for any PDP-11 target other than
           ppppddddpppp11111111----****----bbbbssssdddd.

       _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s

       These options are defined for Xstormy16:

       ----mmmmssssiiiimmmm
           Choose startup files and linker script suitable for
           the simulator.

       _F_R_V _O_p_t_i_o_n_s

       ----mmmmggggpppprrrr----33332222
           Only use the first 32 general purpose registers.



2004-02-14                  gcc-3.3.3                         171





GCC(1)                         GNU                         GCC(1)


       ----mmmmggggpppprrrr----66664444
           Use all 64 general purpose registers.

       ----mmmmffffpppprrrr----33332222
           Use only the first 32 floating point registers.

       ----mmmmffffpppprrrr----66664444
           Use all 64 floating point registers

       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
           Use hardware instructions for floating point
           operations.

       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Use library routines for floating point operations.

       ----mmmmaaaalllllllloooocccc----cccccccc
           Dynamically allocate condition code registers.

       ----mmmmffffiiiixxxxeeeedddd----cccccccc
           Do not try to dynamically allocate condition code
           registers, only use "icc0" and "fcc0".

       ----mmmmddddwwwwoooorrrrdddd
           Change ABI to use double word insns.

       ----mmmmnnnnoooo----ddddwwwwoooorrrrdddd
           Do not use double word instructions.

       ----mmmmddddoooouuuubbbblllleeee
           Use floating point double instructions.

       ----mmmmnnnnoooo----ddddoooouuuubbbblllleeee
           Do not use floating point double instructions.

       ----mmmmmmmmeeeeddddiiiiaaaa
           Use media instructions.

       ----mmmmnnnnoooo----mmmmeeeeddddiiiiaaaa
           Do not use media instructions.

       ----mmmmmmmmuuuullllaaaadddddddd
           Use multiply and add/subtract instructions.

       ----mmmmnnnnoooo----mmmmuuuullllaaaadddddddd
           Do not use multiply and add/subtract instructions.

       ----mmmmlllliiiibbbbrrrraaaarrrryyyy----ppppiiiicccc
           Enable PIC support for building libraries

       ----mmmmaaaacccccccc----4444
           Use only the first four media accumulator registers.





2004-02-14                  gcc-3.3.3                         172





GCC(1)                         GNU                         GCC(1)


       ----mmmmaaaacccccccc----8888
           Use all eight media accumulator registers.

       ----mmmmppppaaaacccckkkk
           Pack VLIW instructions.

       ----mmmmnnnnoooo----ppppaaaacccckkkk
           Do not pack VLIW instructions.

       ----mmmmnnnnoooo----eeeeffffllllaaaaggggssss
           Do not mark ABI switches in e_flags.

       ----mmmmccccoooonnnndddd----mmmmoooovvvveeee
           Enable the use of conditional-move instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----ccccoooonnnndddd----mmmmoooovvvveeee
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmsssscccccccc
           Enable the use of conditional set instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----sssscccccccc
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmccccoooonnnndddd----eeeexxxxeeeecccc
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----ccccoooonnnndddd----eeeexxxxeeeecccc
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmvvvvlllliiiiwwww----bbbbrrrraaaannnncccchhhh
           Run a pass to pack branches into VLIW instructions
           (default).




2004-02-14                  gcc-3.3.3                         173





GCC(1)                         GNU                         GCC(1)


           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----vvvvlllliiiiwwww----bbbbrrrraaaannnncccchhhh
           Do not run a pass to pack branches into VLIW
           instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmmmmmuuuullllttttiiii----ccccoooonnnndddd----eeeexxxxeeeecccc
           Enable optimization of "&&" and "||" in conditional
           execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----mmmmuuuullllttttiiii----ccccoooonnnndddd----eeeexxxxeeeecccc
           Disable optimization of "&&" and "||" in conditional
           execution.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnneeeesssstttteeeedddd----ccccoooonnnndddd----eeeexxxxeeeecccc
           Enable nested conditional execution optimizations
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmnnnnoooo----nnnneeeesssstttteeeedddd----ccccoooonnnndddd----eeeexxxxeeeecccc
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       ----mmmmttttoooommmmccccaaaatttt----ssssttttaaaattttssss
           Cause gas to print out tomcat statistics.

       ----mmmmccccppppuuuu====_c_p_u
           Select the processor type for which to generate code.
           Possible values are ssssiiiimmmmpppplllleeee, ttttoooommmmccccaaaatttt, ffffrrrr555500000000, ffffrrrr444400000000,
           ffffrrrr333300000000, ffffrrrrvvvv.

       _X_t_e_n_s_a _O_p_t_i_o_n_s

       The Xtensa architecture is designed to support many
       different configurations.  The compiler's default options
       can be set to match a particular Xtensa configuration by
       copying a configuration file into the GCC sources when
       building GCC.  The options below may be used to override
       the default options.




2004-02-14                  gcc-3.3.3                         174





GCC(1)                         GNU                         GCC(1)


       ----mmmmbbbbiiiigggg----eeeennnnddddiiiiaaaannnn
       ----mmmmlllliiiittttttttlllleeee----eeeennnnddddiiiiaaaannnn
           Specify big-endian or little-endian byte ordering for
           the target Xtensa processor.

       ----mmmmddddeeeennnnssssiiiittttyyyy
       ----mmmmnnnnoooo----ddddeeeennnnssssiiiittttyyyy
           Enable or disable use of the optional Xtensa code
           density instructions.

       ----mmmmmmmmaaaacccc11116666
       ----mmmmnnnnoooo----mmmmaaaacccc11116666
           Enable or disable use of the Xtensa MAC16 option.
           When enabled, GCC will generate MAC16 instructions
           from standard C code, with the limitation that it will
           use neither the MR register file nor any instruction
           that operates on the MR registers.  When this option
           is disabled, GCC will translate 16-bit
           multiply/accumulate operations to a combination of
           core instructions and library calls, depending on
           whether any other multiplier options are enabled.

       ----mmmmmmmmuuuullll11116666
       ----mmmmnnnnoooo----mmmmuuuullll11116666
           Enable or disable use of the 16-bit integer multiplier
           option.  When enabled, the compiler will generate
           16-bit multiply instructions for multiplications of 16
           bits or smaller in standard C code.  When this option
           is disabled, the compiler will either use 32-bit
           multiply or MAC16 instructions if they are available
           or generate library calls to perform the multiply
           operations using shifts and adds.

       ----mmmmmmmmuuuullll33332222
       ----mmmmnnnnoooo----mmmmuuuullll33332222
           Enable or disable use of the 32-bit integer multiplier
           option.  When enabled, the compiler will generate
           32-bit multiply instructions for multiplications of 32
           bits or smaller in standard C code.  When this option
           is disabled, the compiler will generate library calls
           to perform the multiply operations using either shifts
           and adds or 16-bit multiply instructions if they are
           available.

       ----mmmmnnnnssssaaaa
       ----mmmmnnnnoooo----nnnnssssaaaa
           Enable or disable use of the optional normalization
           shift amount ("NSA") instructions to implement the
           built-in "ffs" function.

       ----mmmmmmmmiiiinnnnmmmmaaaaxxxx
       ----mmmmnnnnoooo----mmmmiiiinnnnmmmmaaaaxxxx
           Enable or disable use of the optional minimum and
           maximum value instructions.



2004-02-14                  gcc-3.3.3                         175





GCC(1)                         GNU                         GCC(1)


       ----mmmmsssseeeexxxxtttt
       ----mmmmnnnnoooo----sssseeeexxxxtttt
           Enable or disable use of the optional sign extend
           ("SEXT") instruction.

       ----mmmmbbbboooooooolllleeeeaaaannnnssss
       ----mmmmnnnnoooo----bbbboooooooolllleeeeaaaannnnssss
           Enable or disable support for the boolean register
           file used by Xtensa coprocessors.  This is not
           typically useful by itself but may be required for
           other options that make use of the boolean registers
           (e.g., the floating-point option).

       ----mmmmhhhhaaaarrrrdddd----ffffllllooooaaaatttt
       ----mmmmssssoooofffftttt----ffffllllooooaaaatttt
           Enable or disable use of the floating-point option.
           When enabled, GCC generates floating-point
           instructions for 32-bit "float" operations.  When this
           option is disabled, GCC generates library calls to
           emulate 32-bit floating-point operations using integer
           instructions.  Regardless of this option, 64-bit
           "double" operations are always emulated with calls to
           library functions.

       ----mmmmffffuuuusssseeeedddd----mmmmaaaadddddddd
       ----mmmmnnnnoooo----ffffuuuusssseeeedddd----mmmmaaaadddddddd
           Enable or disable use of fused multiply/add and
           multiply/subtract instructions in the floating-point
           option.  This has no effect if the floating-point
           option is not also enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces
           the compiler to use separate instructions for the
           multiply and add/subtract operations.  This may be
           desirable in some cases where strict IEEE
           754-compliant results are required: the fused multiply
           add/subtract instructions do not round the
           intermediate result, thereby producing results with
           _m_o_r_e bits of precision than specified by the IEEE
           standard.  Disabling fused multiply add/subtract
           instructions also ensures that the program output is
           not sensitive to the compiler's ability to combine
           multiply and add/subtract operations.

       ----mmmmsssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee
       ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee
           When this option is enabled, GCC inserts "MEMW"
           instructions before "volatile" memory references to
           guarantee sequential consistency.  The default is
           ----mmmmsssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee.  Use ----mmmmnnnnoooo----sssseeeerrrriiiiaaaalllliiiizzzzeeee----vvvvoooollllaaaattttiiiilllleeee to
           omit the "MEMW" instructions.

       ----mmmmtttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----lllliiiitttteeeerrrraaaallllssss





2004-02-14                  gcc-3.3.3                         176





GCC(1)                         GNU                         GCC(1)


       ----mmmmnnnnoooo----tttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----lllliiiitttteeeerrrraaaallllssss
           Control the treatment of literal pools.  The default
           is ----mmmmnnnnoooo----tttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----lllliiiitttteeeerrrraaaallllssss, which places literals
           in a separate section in the output file.  This allows
           the literal pool to be placed in a data RAM/ROM, and
           it also allows the linker to combine literal pools
           from separate object files to remove redundant
           literals and improve code size.  With ----mmmmtttteeeexxxxtttt----sssseeeeccccttttiiiioooonnnn----
           lllliiiitttteeeerrrraaaallllssss, the literals are interspersed in the text
           section in order to keep them as close as possible to
           their references.  This may be necessary for large
           assembly files.

       ----mmmmttttaaaarrrrggggeeeetttt----aaaalllliiiiggggnnnn
       ----mmmmnnnnoooo----ttttaaaarrrrggggeeeetttt----aaaalllliiiiggggnnnn
           When this option is enabled, GCC instructs the
           assembler to automatically align instructions to
           reduce branch penalties at the expense of some code
           density.  The assembler attempts to widen density
           instructions to align branch targets and the
           instructions following call instructions.  If there
           are not enough preceding safe density instructions to
           align a target, no widening will be performed.  The
           default is ----mmmmttttaaaarrrrggggeeeetttt----aaaalllliiiiggggnnnn.  These options do not
           affect the treatment of auto-aligned instructions like
           "LOOP", which the assembler will always align, either
           by widening density instructions or by inserting no-op
           instructions.

       ----mmmmlllloooonnnnggggccccaaaallllllllssss
       ----mmmmnnnnoooo----lllloooonnnnggggccccaaaallllllllssss
           When this option is enabled, GCC instructs the
           assembler to translate direct calls to indirect calls
           unless it can determine that the target of a direct
           call is in the range allowed by the call instruction.
           This translation typically occurs for calls to
           functions in other source files.  Specifically, the
           assembler translates a direct "CALL" instruction into
           an "L32R" followed by a "CALLX" instruction.  The
           default is ----mmmmnnnnoooo----lllloooonnnnggggccccaaaallllllllssss.  This option should be used
           in programs where the call target can potentially be
           out of range.  This option is implemented in the
           assembler, not the compiler, so the assembly code
           generated by GCC will still show direct call
           instructions---look at the disassembled object code to
           see the actual instructions.  Note that the assembler
           will use an indirect call for every cross-file call,
           not just those that really will be out of range.

       OOOOppppttttiiiioooonnnnssss ffffoooorrrr CCCCooooddddeeee GGGGeeeennnneeeerrrraaaattttiiiioooonnnn CCCCoooonnnnvvvveeeennnnttttiiiioooonnnnssss

       These machine-independent options control the interface
       conventions used in code generation.




2004-02-14                  gcc-3.3.3                         177





GCC(1)                         GNU                         GCC(1)


       Most of them have both positive and negative forms; the
       negative form of ----ffffffffoooooooo would be ----ffffnnnnoooo----ffffoooooooo.  In the table
       below, only one of the forms is listed---the one which is
       not the default.  You can figure out the other form by
       either removing nnnnoooo---- or adding it.

       ----ffffbbbboooouuuunnnnddddssss----cccchhhheeeecccckkkk
           For front-ends that support it, generate additional
           code to check that indices used to access arrays are
           within the declared range.  This is currently only
           supported by the Java and Fortran 77 front-ends, where
           this option defaults to true and false respectively.

       ----ffffttttrrrraaaappppvvvv
           This option generates traps for signed overflow on
           addition, subtraction, multiplication operations.

       ----ffffeeeexxxxcccceeeeppppttttiiiioooonnnnssss
           Enable exception handling.  Generates extra code
           needed to propagate exceptions.  For some targets,
           this implies GCC will generate frame unwind
           information for all functions, which can produce
           significant data size overhead, although it does not
           affect execution.  If you do not specify this option,
           GCC will enable it by default for languages like C++
           which normally require exception handling, and disable
           it for languages like C that do not normally require
           it.  However, you may need to enable this option when
           compiling C code that needs to interoperate properly
           with exception handlers written in C++.  You may also
           wish to disable this option if you are compiling older
           C++ programs that don't use exception handling.

       ----ffffnnnnoooonnnn----ccccaaaallllllll----eeeexxxxcccceeeeppppttttiiiioooonnnnssss
           Generate code that allows trapping instructions to
           throw exceptions.  Note that this requires platform-
           specific runtime support that does not exist
           everywhere.  Moreover, it only allows _t_r_a_p_p_i_n_g
           instructions to throw exceptions, i.e. memory
           references or floating point instructions.  It does
           not allow exceptions to be thrown from arbitrary
           signal handlers such as "SIGALRM".

       ----ffffuuuunnnnwwwwiiiinnnndddd----ttttaaaabbbblllleeeessss
           Similar to ----ffffeeeexxxxcccceeeeppppttttiiiioooonnnnssss, except that it will just
           generate any needed static data, but will not affect
           the generated code in any other way.  You will
           normally not enable this option; instead, a language
           processor that needs this handling would enable it on
           your behalf.

       ----ffffaaaassssyyyynnnncccchhhhrrrroooonnnnoooouuuussss----uuuunnnnwwwwiiiinnnndddd----ttttaaaabbbblllleeeessss
           Generate unwind table in dwarf2 format, if supported
           by target machine.  The table is exact at each



2004-02-14                  gcc-3.3.3                         178





GCC(1)                         GNU                         GCC(1)


           instruction boundary, so it can be used for stack
           unwinding from asynchronous events (such as debugger
           or garbage collector).

       ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return ``short'' "struct" and "union" values in memory
           like longer ones, rather than in registers.  This
           convention is less efficient, but it has the advantage
           of allowing intercallability between GCC-compiled
           files and files compiled with other compilers,
           particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in
           memory depends on the target configuration macros.

           Short structures and unions are those whose size and
           alignment match that of some integer type.

           WWWWaaaarrrrnnnniiiinnnngggg:::: code compiled with the ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           switch is not binary compatible with code compiled
           with the ----ffffrrrreeeegggg----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn switch.  Use it to
           conform to a non-default application binary interface.

       ----ffffrrrreeeegggg----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           Return "struct" and "union" values in registers when
           possible.  This is more efficient for small structures
           than ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn.

           If you specify neither ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn nor ----ffffrrrreeeegggg----
           ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn, GCC defaults to whichever convention is
           standard for the target.  If there is no standard
           convention, GCC defaults to ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn,
           except on targets where GCC is the principal compiler.
           In those cases, we can choose the standard, and we
           chose the more efficient register return alternative.

           WWWWaaaarrrrnnnniiiinnnngggg:::: code compiled with the ----ffffrrrreeeegggg----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn
           switch is not binary compatible with code compiled
           with the ----ffffppppcccccccc----ssssttttrrrruuuucccctttt----rrrreeeettttuuuurrrrnnnn switch.  Use it to
           conform to a non-default application binary interface.

       ----ffffsssshhhhoooorrrrtttt----eeeennnnuuuummmmssss
           Allocate to an "enum" type only as many bytes as it
           needs for the declared range of possible values.
           Specifically, the "enum" type will be equivalent to
           the smallest integer type which has enough room.

           WWWWaaaarrrrnnnniiiinnnngggg:::: the ----ffffsssshhhhoooorrrrtttt----eeeennnnuuuummmmssss switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       ----ffffsssshhhhoooorrrrtttt----ddddoooouuuubbbblllleeee
           Use the same size for "double" as for "float".



2004-02-14                  gcc-3.3.3                         179





GCC(1)                         GNU                         GCC(1)


           WWWWaaaarrrrnnnniiiinnnngggg:::: the ----ffffsssshhhhoooorrrrtttt----ddddoooouuuubbbblllleeee switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       ----ffffsssshhhhoooorrrrtttt----wwwwcccchhhhaaaarrrr
           Override the underlying type for wwwwcccchhhhaaaarrrr____tttt to be sssshhhhoooorrrrtttt
           uuuunnnnssssiiiiggggnnnneeeedddd iiiinnnntttt instead of the default for the target.
           This option is useful for building programs to run
           under WINE.

           WWWWaaaarrrrnnnniiiinnnngggg:::: the ----ffffsssshhhhoooorrrrtttt----wwwwcccchhhhaaaarrrr switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       ----ffffsssshhhhaaaarrrreeeedddd----ddddaaaattttaaaa
           Requests that the data and non-"const" variables of
           this compilation be shared data rather than private
           data.  The distinction makes sense only on certain
           operating systems, where shared data is shared between
           processes running the same program, while private data
           exists in one copy per process.

       ----ffffnnnnoooo----ccccoooommmmmmmmoooonnnn
           In C, allocate even uninitialized global variables in
           the data section of the object file, rather than
           generating them as common blocks.  This has the effect
           that if the same variable is declared (without
           "extern") in two different compilations, you will get
           an error when you link them.  The only reason this
           might be useful is if you wish to verify that the
           program will work on other systems which always work
           this way.

       ----ffffnnnnoooo----iiiiddddeeeennnntttt
           Ignore the ####iiiiddddeeeennnntttt directive.

       ----ffffnnnnoooo----ggggnnnnuuuu----lllliiiinnnnkkkkeeeerrrr
           Do not output global initializations (such as C++
           constructors and destructors) in the form used by the
           GNU linker (on systems where the GNU linker is the
           standard method of handling them).  Use this option
           when you want to use a non-GNU linker, which also
           requires using the ccccoooolllllllleeeecccctttt2222 program to make sure the
           system linker includes constructors and destructors.
           (ccccoooolllllllleeeecccctttt2222 is included in the GCC distribution.)  For
           systems which _m_u_s_t use ccccoooolllllllleeeecccctttt2222, the compiler driver
           ggggcccccccc is configured to do this automatically.

       ----ffffiiiinnnnhhhhiiiibbbbiiiitttt----ssssiiiizzzzeeee----ddddiiiirrrreeeeccccttttiiiivvvveeee
           Don't output a ".size" assembler directive, or
           anything else that would cause trouble if the function
           is split in the middle, and the two halves are placed



2004-02-14                  gcc-3.3.3                         180





GCC(1)                         GNU                         GCC(1)


           at locations far apart in memory.  This option is used
           when compiling _c_r_t_s_t_u_f_f_._c; you should not need to use
           it for anything else.

       ----ffffvvvveeeerrrrbbbboooosssseeee----aaaassssmmmm
           Put extra commentary information in the generated
           assembly code to make it more readable.  This option
           is generally only of use to those who actually need to
           read the generated assembly code (perhaps while
           debugging the compiler itself).

           ----ffffnnnnoooo----vvvveeeerrrrbbbboooosssseeee----aaaassssmmmm, the default, causes the extra
           information to be omitted and is useful when comparing
           two assembler files.

       ----ffffvvvvoooollllaaaattttiiiilllleeee
           Consider all memory references through pointers to be
           volatile.

       ----ffffvvvvoooollllaaaattttiiiilllleeee----gggglllloooobbbbaaaallll
           Consider all memory references to extern and global
           data items to be volatile.  GCC does not consider
           static data items to be volatile because of this
           switch.

       ----ffffvvvvoooollllaaaattttiiiilllleeee----ssssttttaaaattttiiiicccc
           Consider all memory references to static data to be
           volatile.

       ----ffffppppiiiicccc
           Generate position-independent code (PIC) suitable for
           use in a shared library, if supported for the target
           machine.  Such code accesses all constant addresses
           through a global offset table (GOT).  The dynamic
           loader resolves the GOT entries when the program
           starts (the dynamic loader is not part of GCC; it is
           part of the operating system).  If the GOT size for
           the linked executable exceeds a machine-specific
           maximum size, you get an error message from the linker
           indicating that ----ffffppppiiiicccc does not work; in that case,
           recompile with ----ffffPPPPIIIICCCC instead.  (These maximums are 16k
           on the m88k, 8k on the SPARC, and 32k on the m68k and
           RS/6000.  The 386 has no such limit.)

           Position-independent code requires special support,
           and therefore works only on certain machines.  For the
           386, GCC supports PIC for System V but not for the Sun
           386i.  Code generated for the IBM RS/6000 is always
           position-independent.

       ----ffffPPPPIIIICCCC
           If supported for the target machine, emit position-
           independent code, suitable for dynamic linking and
           avoiding any limit on the size of the global offset



2004-02-14                  gcc-3.3.3                         181





GCC(1)                         GNU                         GCC(1)


           table.  This option makes a difference on the m68k,
           m88k, and the SPARC.

           Position-independent code requires special support,
           and therefore works only on certain machines.

       ----ffffffffiiiixxxxeeeedddd----_r_e_g
           Treat the register named _r_e_g as a fixed register;
           generated code should never refer to it (except
           perhaps as a stack pointer, frame pointer or in some
           other fixed role).

           _r_e_g must be the name of a register.  The register
           names accepted are machine-specific and are defined in
           the "REGISTER_NAMES" macro in the machine description
           macro file.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       ----ffffccccaaaallllllll----uuuusssseeeedddd----_r_e_g
           Treat the register named _r_e_g as an allocable register
           that is clobbered by function calls.  It may be
           allocated for temporaries or variables that do not
           live across a call.  Functions compiled this way will
           not save and restore the register _r_e_g.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       ----ffffccccaaaallllllll----ssssaaaavvvveeeedddd----_r_e_g
           Treat the register named _r_e_g as an allocable register
           saved by functions.  It may be allocated even for
           temporaries or variables that live across a call.
           Functions compiled this way will save and restore the
           register _r_e_g if they use it.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           A different sort of disaster will result from the use
           of this flag for a register in which function values
           may be returned.

           This flag does not have a negative form, because it



2004-02-14                  gcc-3.3.3                         182





GCC(1)                         GNU                         GCC(1)


           specifies a three-way choice.

       ----ffffppppaaaacccckkkk----ssssttttrrrruuuucccctttt
           Pack all structure members together without holes.

           WWWWaaaarrrrnnnniiiinnnngggg:::: the ----ffffppppaaaacccckkkk----ssssttttrrrruuuucccctttt switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Additionally, it makes
           the code suboptimal.  Use it to conform to a non-
           default application binary interface.

       ----ffffiiiinnnnssssttttrrrruuuummmmeeeennnntttt----ffffuuuunnnnccccttttiiiioooonnnnssss
           Generate instrumentation calls for entry and exit to
           functions.  Just after function entry and just before
           function exit, the following profiling functions will
           be called with the address of the current function and
           its call site.  (On some platforms,
           "__builtin_return_address" does not work beyond the
           current function, so the call site information may not
           be available to the profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the
           current function, which may be looked up exactly in
           the symbol table.

           This instrumentation is also done for functions
           expanded inline in other functions.  The profiling
           calls will indicate where, conceptually, the inline
           function is entered and exited.  This means that
           addressable versions of such functions must be
           available.  If all your uses of a function are
           expanded inline, this may mean an additional expansion
           of code size.  If you use eeeexxxxtttteeeerrrrnnnn iiiinnnnlllliiiinnnneeee in your C
           code, an addressable version of such functions must be
           provided.  (This is normally the case anyways, but if
           you get lucky and the optimizer always expands the
           functions inline, you might have gotten away without
           providing static copies.)

           A function may be given the attribute
           "no_instrument_function", in which case this
           instrumentation will not be done.  This can be used,
           for example, for the profiling functions listed above,
           high-priority interrupt routines, and any functions
           from which the profiling functions cannot safely be
           called (perhaps signal handlers, if the profiling
           routines generate output or allocate memory).





2004-02-14                  gcc-3.3.3                         183





GCC(1)                         GNU                         GCC(1)


       ----ffffssssttttaaaacccckkkk----cccchhhheeeecccckkkk
           Generate code to verify that you do not go beyond the
           boundary of the stack.  You should specify this flag
           if you are running in an environment with multiple
           threads, but only rarely need to specify it in a
           single-threaded environment since stack overflow is
           automatically detected on nearly all systems if there
           is only one stack.

           Note that this switch does not actually cause checking
           to be done; the operating system must do that.  The
           switch causes generation of code to ensure that the
           operating system sees the stack being extended.

       ----ffffssssttttaaaacccckkkk----lllliiiimmmmiiiitttt----rrrreeeeggggiiiisssstttteeeerrrr====_r_e_g
       ----ffffssssttttaaaacccckkkk----lllliiiimmmmiiiitttt----ssssyyyymmmmbbbboooollll====_s_y_m
       ----ffffnnnnoooo----ssssttttaaaacccckkkk----lllliiiimmmmiiiitttt
           Generate code to ensure that the stack does not grow
           beyond a certain value, either the value of a register
           or the address of a symbol.  If the stack would grow
           beyond the value, a signal is raised.  For most
           targets, the signal is raised before the stack
           overruns the boundary, so it is possible to catch the
           signal without taking special precautions.

           For instance, if the stack starts at absolute address
           0000xxxx88880000000000000000000000000000 and grows downwards, you can use the flags
           ----ffffssssttttaaaacccckkkk----lllliiiimmmmiiiitttt----ssssyyyymmmmbbbboooollll====________ssssttttaaaacccckkkk____lllliiiimmmmiiiitttt and
           ----WWWWllll,,,,--------ddddeeeeffffssssyyyymmmm,,,,________ssssttttaaaacccckkkk____lllliiiimmmmiiiitttt====0000xxxx7777ffffffffeeee0000000000000000 to enforce a
           stack limit of 128KB.  Note that this may only work
           with the GNU linker.

       ----ffffaaaarrrrgggguuuummmmeeeennnntttt----aaaalllliiiiaaaassss
       ----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss
       ----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss----gggglllloooobbbbaaaallll
           Specify the possible relationships among parameters
           and between parameters and global data.

           ----ffffaaaarrrrgggguuuummmmeeeennnntttt----aaaalllliiiiaaaassss specifies that arguments (parameters)
           may alias each other and may alias global
           storage.----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss specifies that arguments do
           not alias each other, but may alias global
           storage.----ffffaaaarrrrgggguuuummmmeeeennnntttt----nnnnooooaaaalllliiiiaaaassss----gggglllloooobbbbaaaallll specifies that
           arguments do not alias each other and do not alias
           global storage.

           Each language will automatically use whatever option
           is required by the language standard.  You should not
           need to use these options yourself.

       ----fffflllleeeeaaaaddddiiiinnnngggg----uuuunnnnddddeeeerrrrssssccccoooorrrreeee
           This option and its counterpart, ----ffffnnnnoooo----lllleeeeaaaaddddiiiinnnngggg----
           uuuunnnnddddeeeerrrrssssccccoooorrrreeee, forcibly change the way C symbols are
           represented in the object file.  One use is to help



2004-02-14                  gcc-3.3.3                         184





GCC(1)                         GNU                         GCC(1)


           link with legacy assembly code.

           WWWWaaaarrrrnnnniiiinnnngggg:::: the ----fffflllleeeeaaaaddddiiiinnnngggg----uuuunnnnddddeeeerrrrssssccccoooorrrreeee switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.  Not all
           targets provide complete support for this switch.

       ----ffffttttllllssss----mmmmooooddddeeeellll====_m_o_d_e_l
           Alter the thread-local storage model to be used.  The
           _m_o_d_e_l argument should be one of "global-dynamic",
           "local-dynamic", "initial-exec" or "local-exec".

           The default without ----ffffppppiiiicccc is "initial-exec"; with
           ----ffffppppiiiicccc the default is "global-dynamic".

EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT
       This section describes several environment variables that
       affect how GCC operates.  Some of them work by specifying
       directories or prefixes to use when searching for various
       kinds of files.  Some are used to specify other aspects of
       the compilation environment.

       Note that you can also specify places to search using
       options such as ----BBBB, ----IIII and ----LLLL.  These take precedence over
       places specified using environment variables, which in
       turn take precedence over those specified by the
       configuration of GCC.

       LLLLAAAANNNNGGGG
       LLLLCCCC____CCCCTTTTYYYYPPPPEEEE
       LLLLCCCC____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS
       LLLLCCCC____AAAALLLLLLLL
           These environment variables control the way that GCC
           uses localization information that allow GCC to work
           with different national conventions.  GCC inspects the
           locale categories LLLLCCCC____CCCCTTTTYYYYPPPPEEEE and LLLLCCCC____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS if it has
           been configured to do so.  These locale categories can
           be set to any value supported by your installation.  A
           typical value is eeeennnn____UUUUKKKK for English in the United
           Kingdom.

           The LLLLCCCC____CCCCTTTTYYYYPPPPEEEE environment variable specifies character
           classification.  GCC uses it to determine the
           character boundaries in a string; this is needed for
           some multibyte encodings that contain quote and escape
           characters that would otherwise be interpreted as a
           string end or escape.

           The LLLLCCCC____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS environment variable specifies the
           language to use in diagnostic messages.

           If the LLLLCCCC____AAAALLLLLLLL environment variable is set, it
           overrides the value of LLLLCCCC____CCCCTTTTYYYYPPPPEEEE and LLLLCCCC____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS;



2004-02-14                  gcc-3.3.3                         185





GCC(1)                         GNU                         GCC(1)


           otherwise, LLLLCCCC____CCCCTTTTYYYYPPPPEEEE and LLLLCCCC____MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS default to the
           value of the LLLLAAAANNNNGGGG environment variable.  If none of
           these variables are set, GCC defaults to traditional C
           English behavior.

       TTTTMMMMPPPPDDDDIIIIRRRR
           If TTTTMMMMPPPPDDDDIIIIRRRR is set, it specifies the directory to use
           for temporary files.  GCC uses temporary files to hold
           the output of one stage of compilation which is to be
           used as input to the next stage: for example, the
           output of the preprocessor, which is the input to the
           compiler proper.

       GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX
           If GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX is set, it specifies a prefix to
           use in the names of the subprograms executed by the
           compiler.  No slash is added when this prefix is
           combined with the name of a subprogram, but you can
           specify a prefix that ends with a slash if you wish.

           If GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX is not set, GCC will attempt to
           figure out an appropriate prefix to use based on the
           pathname it was invoked with.

           If GCC cannot find the subprogram using the specified
           prefix, it tries looking in the usual places for the
           subprogram.

           The default value of GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX is
           _p_r_e_f_i_x_/_l_i_b_/_g_c_c_-_l_i_b_/ where _p_r_e_f_i_x is the value of
           "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

           Other prefixes specified with ----BBBB take precedence over
           this prefix.

           This prefix is also used for finding files such as
           _c_r_t_0_._o that are used for linking.

           In addition, the prefix is used in an unusual way in
           finding the directories to search for header files.
           For each of the standard directories whose name
           normally begins with ////uuuussssrrrr////llllooooccccaaaallll////lllliiiibbbb////ggggcccccccc----lllliiiibbbb (more
           precisely, with the value of GGGGCCCCCCCC____IIIINNNNCCCCLLLLUUUUDDDDEEEE____DDDDIIIIRRRR), GCC
           tries replacing that beginning with the specified
           prefix to produce an alternate directory name.  Thus,
           with ----BBBBffffoooooooo////, GCC will search _f_o_o_/_b_a_r where it would
           normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These alternate
           directories are searched first; the standard
           directories come next.

       CCCCOOOOMMMMPPPPIIIILLLLEEEERRRR____PPPPAAAATTTTHHHH
           The value of CCCCOOOOMMMMPPPPIIIILLLLEEEERRRR____PPPPAAAATTTTHHHH is a colon-separated list
           of directories, much like PPPPAAAATTTTHHHH.  GCC tries the
           directories thus specified when searching for



2004-02-14                  gcc-3.3.3                         186





GCC(1)                         GNU                         GCC(1)


           subprograms, if it can't find the subprograms using
           GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX.

       LLLLIIIIBBBBRRRRAAAARRRRYYYY____PPPPAAAATTTTHHHH
           The value of LLLLIIIIBBBBRRRRAAAARRRRYYYY____PPPPAAAATTTTHHHH is a colon-separated list of
           directories, much like PPPPAAAATTTTHHHH.  When configured as a
           native compiler, GCC tries the directories thus
           specified when searching for special linker files, if
           it can't find them using GGGGCCCCCCCC____EEEEXXXXEEEECCCC____PPPPRRRREEEEFFFFIIIIXXXX.  Linking
           using GCC also uses these directories when searching
           for ordinary libraries for the ----llll option (but
           directories specified with ----LLLL come first).

       LLLLAAAANNNNGGGG
           This variable is used to pass locale information to
           the compiler.  One way in which this information is
           used is to determine the character set to be used when
           character literals, string literals and comments are
           parsed in C and C++.  When the compiler is configured
           to allow multibyte characters, the following values
           for LLLLAAAANNNNGGGG are recognized:

           CCCC----JJJJIIIISSSS
               Recognize JIS characters.

           CCCC----SSSSJJJJIIIISSSS
               Recognize SJIS characters.

           CCCC----EEEEUUUUCCCCJJJJPPPP
               Recognize EUCJP characters.

           If LLLLAAAANNNNGGGG is not defined, or if it has some other value,
           then the compiler will use mblen and mbtowc as defined
           by the default locale to recognize and translate
           multibyte characters.

       Some additional environments variables affect the behavior
       of the preprocessor.

       CCCCPPPPAAAATTTTHHHH
       CCCC____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
       CCCCPPPPLLLLUUUUSSSS____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
       OOOOBBBBJJJJCCCC____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
           Each variable's value is a list of directories
           separated by a special character, much like PPPPAAAATTTTHHHH, in
           which to look for header files.  The special
           character, "PATH_SEPARATOR", is target-dependent and
           determined at GCC build time.  For Windows-based
           targets it is a semicolon, and for almost all other
           targets it is a colon.

           CCCCPPPPAAAATTTTHHHH specifies a list of directories to be searched
           as if specified with ----IIII, but after any paths given
           with ----IIII options on the command line.  This environment



2004-02-14                  gcc-3.3.3                         187





GCC(1)                         GNU                         GCC(1)


           variable is used regardless of which language is being
           preprocessed.

           The remaining environment variables apply only when
           preprocessing the particular language indicated.  Each
           specifies a list of directories to be searched as if
           specified with ----iiiissssyyyysssstttteeeemmmm, but after any paths given
           with ----iiiissssyyyysssstttteeeemmmm options on the command line.

           In all these variables, an empty element instructs the
           compiler to search its current working directory.
           Empty elements can appear at the beginning or end of a
           path.  For instance, if the value of CCCCPPPPAAAATTTTHHHH is
           ":/special/include", that has the same effect as
           ----IIII.... ----IIII////ssssppppeeeecccciiiiaaaallll////iiiinnnncccclllluuuuddddeeee.

       DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT
           If this variable is set, its value specifies how to
           output dependencies for Make based on the non-system
           header files processed by the compiler.  System header
           files are ignored in the dependency output.

           The value of DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT can be just a file
           name, in which case the Make rules are written to that
           file, guessing the target name from the source file
           name.  Or the value can have the form _f_i_l_e _t_a_r_g_e_t, in
           which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is
           equivalent to combining the options ----MMMMMMMM and ----MMMMFFFF, with
           an optional ----MMMMTTTT switch too.

       SSSSUUUUNNNNPPPPRRRROOOO____DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS
           This variable is the same as DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT (see
           above), except that system header files are not
           ignored, so it implies ----MMMM rather than ----MMMMMMMM.  However,
           the dependence on the main input file is omitted.

BBBBUUUUGGGGSSSS
       For instructions on reporting bugs, see
       <hhhhttttttttpppp::::////////ggggcccccccc....ggggnnnnuuuu....oooorrrrgggg////bbbbuuuuggggssss....hhhhttttmmmmllll>.  Use of the ggggccccccccbbbbuuuugggg script
       to report bugs is recommended.

FFFFOOOOOOOOTTTTNNNNOOOOTTTTEEEESSSS
       1.  On some systems, ggggcccccccc ----sssshhhhaaaarrrreeeedddd needs to build
           supplementary stub code for constructors to work.  On
           multi-libbed systems, ggggcccccccc ----sssshhhhaaaarrrreeeedddd must select the
           correct support libraries to link against.  Failing to
           supply the correct flags may lead to subtle defects.
           Supplying them in cases where they are not necessary
           is innocuous.





2004-02-14                  gcc-3.3.3                         188





GCC(1)                         GNU                         GCC(1)


SSSSEEEEEEEE AAAALLLLSSSSOOOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _g_7_7(1),
       _a_s(1), _l_d(1), _g_d_b(1), _a_d_b(1), _d_b_x(1), _s_d_b(1) and the Info
       entries for _g_c_c, _c_p_p, _g_7_7, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.

AAAAUUUUTTTTHHHHOOOORRRR
       See the Info entry for ggggcccccccc, or
       <hhhhttttttttpppp::::////////ggggcccccccc....ggggnnnnuuuu....oooorrrrgggg////oooonnnnlllliiiinnnneeeeddddooooccccssss////ggggcccccccc////CCCCoooonnnnttttrrrriiiibbbbuuuuttttoooorrrrssss....hhhhttttmmmmllll>, for
       contributors to GCC.

CCCCOOOOPPPPYYYYRRRRIIIIGGGGHHHHTTTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996,
       1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
       Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.2 or any later version
       published by the Free Software Foundation; with the
       Invariant Sections being ``GNU General Public License''
       and ``Funding Free Software'', the Front-Cover texts being
       (a) (see below), and with the Back-Cover Texts being (b)
       (see below).  A copy of the license is included in the
       _g_f_d_l(7) man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.























2004-02-14                  gcc-3.3.3                         189


