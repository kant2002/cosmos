


GCOV(1)                        GNU                        GCOV(1)


NNNNAAAAMMMMEEEE
       gcov - coverage testing tool

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
       gcov [----vvvv|--------vvvveeeerrrrssssiiiioooonnnn] [----hhhh|--------hhhheeeellllpppp]
            [----bbbb|--------bbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss]
            [----cccc|--------bbbbrrrraaaannnncccchhhh----ccccoooouuuunnnnttttssss]
            [----nnnn|--------nnnnoooo----oooouuuuttttppppuuuutttt]
            [----llll|--------lllloooonnnngggg----ffffiiiilllleeee----nnnnaaaammmmeeeessss]
            [----pppp|--------pppprrrreeeesssseeeerrrrvvvveeee----ppppaaaatttthhhhssss]
            [----ffff|--------ffffuuuunnnnccccttttiiiioooonnnn----ssssuuuummmmmmmmaaaarrrriiiieeeessss]
            [----oooo|--------oooobbbbjjjjeeeecccctttt----ddddiiiirrrreeeeccccttttoooorrrryyyy _d_i_r_e_c_t_o_r_y_|_f_i_l_e] _s_o_u_r_c_e_f_i_l_e

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
       ggggccccoooovvvv is a test coverage program.  Use it in concert with
       GCC to analyze your programs to help create more
       efficient, faster running code and to discover untested
       parts of your program.  You can use ggggccccoooovvvv as a profiling
       tool to help discover where your optimization efforts will
       best affect your code.  You can also use ggggccccoooovvvv along with
       the other profiling tool, ggggpppprrrrooooffff, to assess which parts of
       your code use the greatest amount of computing time.

       Profiling tools help you analyze your code's performance.
       Using a profiler such as ggggccccoooovvvv or ggggpppprrrrooooffff, you can find out
       some basic performance statistics, such as:

       +o   how often each line of code executes

       +o   what lines of code are actually executed

       +o   how much computing time each section of code uses

       Once you know these things about how your code works when
       compiled, you can look at each module to see which modules
       should be optimized.  ggggccccoooovvvv helps you determine where to
       work on optimization.

       Software developers also use coverage testing in concert
       with testsuites, to make sure software is actually good
       enough for a release.  Testsuites can verify that a
       program works as expected; a coverage program tests to see
       how much of the program is exercised by the testsuite.
       Developers can then determine what kinds of test cases
       need to be added to the testsuites to create both better
       testing and a better final product.

       You should compile your code without optimization if you
       plan to use ggggccccoooovvvv because the optimization, by combining
       some lines of code into one function, may not give you as
       much information as you need to look for `hot spots' where
       the code is using a great deal of computer time.
       Likewise, because ggggccccoooovvvv accumulates statistics by line (at
       the lowest resolution), it works best with a programming



2004-02-14                  gcc-3.3.3                           1





GCOV(1)                        GNU                        GCOV(1)


       style that places only one statement on each line.  If you
       use complicated macros that expand to loops or to other
       control structures, the statistics are less helpful---they
       only report on the line where the macro call appears.  If
       your complex macros behave like functions, you can replace
       them with inline functions to solve this problem.

       ggggccccoooovvvv creates a logfile called _s_o_u_r_c_e_f_i_l_e_._g_c_o_v which
       indicates how many times each line of a source file
       _s_o_u_r_c_e_f_i_l_e_._c has executed.  You can use these logfiles
       along with ggggpppprrrrooooffff to aid in fine-tuning the performance of
       your programs.  ggggpppprrrrooooffff gives timing information you can use
       along with the information you get from ggggccccoooovvvv.

       ggggccccoooovvvv works only on code compiled with GCC.  It is not
       compatible with any other profiling or test coverage
       mechanism.

OOOOPPPPTTTTIIIIOOOONNNNSSSS
       ----hhhh
       --------hhhheeeellllpppp
           Display help about using ggggccccoooovvvv (on the standard
           output), and exit without doing any further
           processing.

       ----vvvv
       --------vvvveeeerrrrssssiiiioooonnnn
           Display the ggggccccoooovvvv version number (on the standard
           output), and exit without doing any further
           processing.

       ----bbbb
       --------bbbbrrrraaaannnncccchhhh----pppprrrroooobbbbaaaabbbbiiiilllliiiittttiiiieeeessss
           Write branch frequencies to the output file, and write
           branch summary info to the standard output.  This
           option allows you to see how often each branch in your
           program was taken.

       ----cccc
       --------bbbbrrrraaaannnncccchhhh----ccccoooouuuunnnnttttssss
           Write branch frequencies as the number of branches
           taken, rather than the percentage of branches taken.

       ----nnnn
       --------nnnnoooo----oooouuuuttttppppuuuutttt
           Do not create the ggggccccoooovvvv output file.

       ----llll
       --------lllloooonnnngggg----ffffiiiilllleeee----nnnnaaaammmmeeeessss
           Create long file names for included source files.  For
           example, if the header file _x_._h contains code, and was
           included in the file _a_._c, then running ggggccccoooovvvv on the
           file _a_._c will produce an output file called
           _a_._c_#_#_x_._h_._g_c_o_v instead of _x_._h_._g_c_o_v.  This can be useful



2004-02-14                  gcc-3.3.3                           2





GCOV(1)                        GNU                        GCOV(1)


           if _x_._h is included in multiple source files.

       ----pppp
       --------pppprrrreeeesssseeeerrrrvvvveeee----ppppaaaatttthhhhssss
           Preserve complete path information in the names of
           generated _._g_c_o_v files. Without this option, just the
           filename component is used. With this option, all
           directories are used, with '/' characters translated
           to '#' characters, '.' directory components removed
           and '..'  components renamed to '^'. This is useful if
           sourcefiles are in several different directories. It
           also affects the ----llll option.

       ----ffff
       --------ffffuuuunnnnccccttttiiiioooonnnn----ssssuuuummmmmmmmaaaarrrriiiieeeessss
           Output summaries for each function in addition to the
           file level summary.

       ----oooo _d_i_r_e_c_t_o_r_y_|_f_i_l_e
       --------oooobbbbjjjjeeeecccctttt----ddddiiiirrrreeeeccccttttoooorrrryyyy _d_i_r_e_c_t_o_r_y
       --------oooobbbbjjjjeeeecccctttt----ffffiiiilllleeee _f_i_l_e
           Specify either the directory containing the gcov data
           files, or the object path name. The _._b_b, _._b_b_g, and _._d_a
           data files are searched for using this option. If a
           directory is specified, the data files are in that
           directory and named after the source file name,
           without its extension. If a file is specified here,
           the data files are named after that file, without its
           extension. If this option is not supplied, it defaults
           to the current directory.

       ggggccccoooovvvv should be run with the current directory the same as
       that when you invoked the compiler. Otherwise it will not
       be able to locate the source files. ggggccccoooovvvv produces files
       called _m_a_n_g_l_e_d_n_a_m_e_._g_c_o_v in the current directory. These
       contain the coverage information of the source file they
       correspond to.  One _._g_c_o_v file is produced for each source
       file containing code, which was compiled to produce the
       data files. The _._g_c_o_v files contain the ':' separated
       fields along with program source code. The format is

               <execution_count>:<line_number>:<source line text>

       Additional block information may succeed each line, when
       requested by command line option. The _e_x_e_c_u_t_i_o_n___c_o_u_n_t is ----
       for lines containing no code and #################### for lines which
       were never executed. Some lines of information at the
       start have _l_i_n_e___n_u_m_b_e_r of zero.

       When printing percentages, 0% and 100% are only printed
       when the values are _e_x_a_c_t_l_y 0% and 100% respectively.
       Other values which would conventionally be rounded to 0%
       or 100% are instead printed as the nearest non-boundary
       value.



2004-02-14                  gcc-3.3.3                           3





GCOV(1)                        GNU                        GCOV(1)


       When using ggggccccoooovvvv, you must first compile your program with
       two special GCC options: ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee.
       This tells the compiler to generate additional information
       needed by gcov (basically a flow graph of the program) and
       also includes additional code in the object files for
       generating the extra profiling information needed by gcov.
       These additional files are placed in the directory where
       the object file is located.

       Running the program will cause profile output to be
       generated.  For each source file compiled with ----ffffpppprrrrooooffffiiiilllleeee----
       aaaarrrrccccssss, an accompanying _._d_a file will be placed in the
       object file directory.

       Running ggggccccoooovvvv with your program's source file names as
       arguments will now produce a listing of the code along
       with frequency of execution for each line.  For example,
       if your program is called _t_m_p_._c, this is what you see when
       you use the basic ggggccccoooovvvv facility:

               $ gcc -fprofile-arcs -ftest-coverage tmp.c
               $ a.out
               $ gcov tmp.c
               90.00% of 10 source lines executed in file tmp.c
               Creating tmp.c.gcov.

       The file _t_m_p_._c_._g_c_o_v contains output from ggggccccoooovvvv.  Here is a
       sample:

                       -:    0:Source:tmp.c
                       -:    0:Object:tmp.bb
                       -:    1:#include <stdio.h>
                       -:    2:
                       -:    3:int main (void)
                       1:    4:{
                       1:    5:  int i, total;
                       -:    6:
                       1:    7:  total = 0;
                       -:    8:
                      11:    9:  for (i = 0; i < 10; i++)
                      10:   10:    total += i;
                       -:   11:
                       1:   12:  if (total != 45)
                   #####:   13:    printf ("Failure\n");
                       -:   14:  else
                       1:   15:    printf ("Success\n");
                       1:   16:  return 0;
                       1:   17:}

       When you use the ----bbbb option, your output looks like this:







2004-02-14                  gcc-3.3.3                           4





GCOV(1)                        GNU                        GCOV(1)


               $ gcov -b tmp.c
               90.00% of 10 source lines executed in file tmp.c
               80.00% of 5 branches executed in file tmp.c
               80.00% of 5 branches taken at least once in file tmp.c
               50.00% of 2 calls executed in file tmp.c
               Creating tmp.c.gcov.

       Here is a sample of a resulting _t_m_p_._c_._g_c_o_v file:

                       -:    0:Source:tmp.c
                       -:    0:Object:tmp.bb
                       -:    1:#include <stdio.h>
                       -:    2:
                       -:    3:int main (void)
                       1:    4:{
                       1:    5:  int i, total;
                       -:    6:
                       1:    7:  total = 0;
                       -:    8:
                      11:    9:  for (i = 0; i < 10; i++)
               branch  0: taken 90%
               branch  1: taken 100%
               branch  2: taken 100%
                      10:   10:    total += i;
                       -:   11:
                       1:   12:  if (total != 45)
               branch  0: taken 100%
                   #####:   13:    printf ("Failure\n");
               call    0: never executed
               branch  1: never executed
                       -:   14:  else
                       1:   15:    printf ("Success\n");
               call    0: returns 100%
                       1:   16:  return 0;
                       1:   17:}

       For each basic block, a line is printed after the last
       line of the basic block describing the branch or call that
       ends the basic block.  There can be multiple branches and
       calls listed for a single source line if there are
       multiple basic blocks that end on that line.  In this
       case, the branches and calls are each given a number.
       There is no simple way to map these branches and calls
       back to source constructs.  In general, though, the lowest
       numbered branch or call will correspond to the leftmost
       construct on the source line.

       For a branch, if it was executed at least once, then a
       percentage indicating the number of times the branch was
       taken divided by the number of times the branch was
       executed will be printed.  Otherwise, the message ``never
       executed'' is printed.

       For a call, if it was executed at least once, then a



2004-02-14                  gcc-3.3.3                           5





GCOV(1)                        GNU                        GCOV(1)


       percentage indicating the number of times the call
       returned divided by the number of times the call was
       executed will be printed.  This will usually be 100%, but
       may be less for functions call "exit" or "longjmp", and
       thus may not return every time they are called.

       The execution counts are cumulative.  If the example
       program were executed again without removing the _._d_a file,
       the count for the number of times each line in the source
       was executed would be added to the results of the previous
       _r_u_n(s).  This is potentially useful in several ways.  For
       example, it could be used to accumulate data over a number
       of program runs as part of a test verification suite, or
       to provide more accurate long-term information over a
       large number of program runs.

       The data in the _._d_a files is saved immediately before the
       program exits.  For each source file compiled with
       ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss, the profiling code first attempts to read
       in an existing _._d_a file; if the file doesn't match the
       executable (differing number of basic block counts) it
       will ignore the contents of the file.  It then adds in the
       new execution counts and finally writes the data to the
       file.

       UUUUssssiiiinnnngggg ggggccccoooovvvv wwwwiiiitttthhhh GGGGCCCCCCCC OOOOppppttttiiiimmmmiiiizzzzaaaattttiiiioooonnnn

       If you plan to use ggggccccoooovvvv to help optimize your code, you
       must first compile your program with two special GCC
       options: ----ffffpppprrrrooooffffiiiilllleeee----aaaarrrrccccssss ----fffftttteeeesssstttt----ccccoooovvvveeeerrrraaaaggggeeee.  Aside from that,
       you can use any other GCC options; but if you want to
       prove that every single line in your program was executed,
       you should not compile with optimization at the same time.
       On some machines the optimizer can eliminate some simple
       code lines by combining them with other lines.  For
       example, code like this:

               if (a != b)
                 c = 1;
               else
                 c = 0;

       can be compiled into one instruction on some machines.  In
       this case, there is no way for ggggccccoooovvvv to calculate separate
       execution counts for each line because there isn't
       separate code for each line.  Hence the ggggccccoooovvvv output looks
       like this if you compiled the program with optimization:

                     100:   12:if (a != b)
                     100:   13:  c = 1;
                     100:   14:else
                     100:   15:  c = 0;

       The output shows that this block of code, combined by



2004-02-14                  gcc-3.3.3                           6





GCOV(1)                        GNU                        GCOV(1)


       optimization, executed 100 times.  In one sense this
       result is correct, because there was only one instruction
       representing all four of these lines.  However, the output
       does not indicate how many times the result was 0 and how
       many times the result was 1.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _g_c_c(1) and the Info entry
       for _g_c_c.

CCCCOOOOPPPPYYYYRRRRIIIIGGGGHHHHTTTT
       Copyright (c) 1996, 1997, 1999, 2000, 2001, 2002, 2003
       Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.2 or any later version
       published by the Free Software Foundation; with the
       Invariant Sections being ``GNU General Public License''
       and ``Funding Free Software'', the Front-Cover texts being
       (a) (see below), and with the Back-Cover Texts being (b)
       (see below).  A copy of the license is included in the
       _g_f_d_l(7) man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.
























2004-02-14                  gcc-3.3.3                           7


