


CPP(1)                         GNU                         CPP(1)


NNNNAAAAMMMMEEEE
       cpp - The C Preprocessor

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
       cpp [----DDDD_m_a_c_r_o[=_d_e_f_n]...] [----UUUU_m_a_c_r_o]
           [----IIII_d_i_r...] [----WWWW_w_a_r_n...]
           [----MMMM|----MMMMMMMM] [----MMMMGGGG] [----MMMMFFFF _f_i_l_e_n_a_m_e]
           [----MMMMPPPP] [----MMMMQQQQ _t_a_r_g_e_t...] [----MMMMTTTT _t_a_r_g_e_t...]
           [----xxxx _l_a_n_g_u_a_g_e] [----ssssttttdddd====_s_t_a_n_d_a_r_d]
           _i_n_f_i_l_e _o_u_t_f_i_l_e

       Only the most useful options are listed here; see below
       for the remainder.

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
       The C preprocessor, often known as _c_p_p, is a _m_a_c_r_o
       _p_r_o_c_e_s_s_o_r that is used automatically by the C compiler to
       transform your program before compilation.  It is called a
       macro processor because it allows you to define _m_a_c_r_o_s,
       which are brief abbreviations for longer constructs.

       The C preprocessor is intended to be used only with C,
       C++, and Objective-C source code.  In the past, it has
       been abused as a general text processor.  It will choke on
       input which does not obey C's lexical rules.  For example,
       apostrophes will be interpreted as the beginning of
       character constants, and cause errors.  Also, you cannot
       rely on it preserving characteristics of the input which
       are not significant to C-family languages.  If a Makefile
       is preprocessed, all the hard tabs will be removed, and
       the Makefile will not work.

       Having said that, you can often get away with using cpp on
       things which are not C.  Other Algol-ish programming
       languages are often safe (Pascal, Ada, etc.) So is
       assembly, with caution.  ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll----ccccpppppppp mode preserves
       more white space, and is otherwise more permissive.  Many
       of the problems can be avoided by writing C or C++ style
       comments instead of native language comments, and keeping
       macros simple.

       Wherever possible, you should use a preprocessor geared to
       the language you are writing in.  Modern versions of the
       GNU assembler have macro facilities.  Most high level
       programming languages have their own conditional
       compilation and inclusion mechanism.  If all else fails,
       try a true general text processor, such as GNU M4.

       C preprocessors vary in some details.  This manual
       discusses the GNU C preprocessor, which provides a small
       superset of the features of ISO Standard C.  In its
       default mode, the GNU C preprocessor does not do a few
       things required by the standard.  These are features which
       are rarely, if ever, used, and may cause surprising



2004-02-14                  gcc-3.3.3                           1





CPP(1)                         GNU                         CPP(1)


       changes to the meaning of a program which does not expect
       them.  To get strict ISO Standard C, you should use the
       ----ssssttttdddd====cccc88889999 or ----ssssttttdddd====cccc99999999 options, depending on which version
       of the standard you want.  To get all the mandatory
       diagnostics, you must also use ----ppppeeeeddddaaaannnnttttiiiicccc.

       This manual describes the behavior of the ISO
       preprocessor.  To minimize gratuitous differences, where
       the ISO preprocessor's behavior does not conflict with
       traditional semantics, the traditional preprocessor should
       behave the same way.  The various differences that do
       exist are detailed in the section @ref{Traditional Mode}.

       For clarity, unless noted otherwise, references to CCCCPPPPPPPP in
       this manual refer to GNU CPP.

OOOOPPPPTTTTIIIIOOOONNNNSSSS
       The C preprocessor expects two file names as arguments,
       _i_n_f_i_l_e and _o_u_t_f_i_l_e.  The preprocessor reads _i_n_f_i_l_e
       together with any other files it specifies with ####iiiinnnncccclllluuuuddddeeee.
       All the output generated by the combined input files is
       written in _o_u_t_f_i_l_e.

       Either _i_n_f_i_l_e or _o_u_t_f_i_l_e may be ----, which as _i_n_f_i_l_e means
       to read from standard input and as _o_u_t_f_i_l_e means to write
       to standard output.  Also, if either file is omitted, it
       means the same as if ---- had been specified for that file.

       Unless otherwise noted, or the option ends in ====, all
       options which take an argument may have that argument
       appear either immediately after the option, or with a
       space between option and argument: ----IIIIffffoooooooo and ----IIII ffffoooooooo have
       the same effect.

       Many options have multi-letter names; therefore multiple
       single-letter options may _n_o_t be grouped: ----ddddMMMM is very
       different from ----dddd ----MMMM.

       ----DDDD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition "1".

       ----DDDD _n_a_m_e====_d_e_f_i_n_i_t_i_o_n
           Predefine _n_a_m_e as a macro, with definition _d_e_f_i_n_i_t_i_o_n.
           There are no restrictions on the contents of
           _d_e_f_i_n_i_t_i_o_n, but if you are invoking the preprocessor
           from a shell or shell-like program you may need to use
           the shell's quoting syntax to protect characters such
           as spaces that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the
           command line, write its argument list with surrounding
           parentheses before the equals sign (if any).
           Parentheses are meaningful to most shells, so you will
           need to quote the option.  With sssshhhh and ccccsssshhhh,



2004-02-14                  gcc-3.3.3                           2





CPP(1)                         GNU                         CPP(1)


           ----DDDD''''_n_a_m_e((((_a_r_g_s_._._.))))====_d_e_f_i_n_i_t_i_o_n'''' works.

           ----DDDD and ----UUUU options are processed in the order they are
           given on the command line.  All ----iiiimmmmaaaaccccrrrroooossss _f_i_l_e and
           ----iiiinnnncccclllluuuuddddeeee _f_i_l_e options are processed after all ----DDDD and
           ----UUUU options.

       ----UUUU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built
           in or provided with a ----DDDD option.

       ----uuuunnnnddddeeeeffff
           Do not predefine any system-specific or GCC-specific
           macros.  The standard predefined macros remain
           defined.

       ----IIII _d_i_r
           Add the directory _d_i_r to the list of directories to be
           searched for header files.

           Directories named by ----IIII are searched before the
           standard system include directories.  If the directory
           _d_i_r is a standard system include directory, the option
           is ignored to ensure that the default search order for
           system directories and the special treatment of system
           headers are not defeated .

       ----oooo _f_i_l_e
           Write output to _f_i_l_e.  This is the same as specifying
           _f_i_l_e as the second non-option argument to ccccpppppppp.  ggggcccccccc
           has a different interpretation of a second non-option
           argument, so you must use ----oooo to specify the output
           file.

       ----WWWWaaaallllllll
           Turns on all optional warnings which are desirable for
           normal code.  At present this is ----WWWWccccoooommmmmmmmeeeennnntttt and
           ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss.  Note that many of the preprocessor's
           warnings are on by default and have no options to
           control them.

       ----WWWWccccoooommmmmmmmeeeennnntttt
       ----WWWWccccoooommmmmmmmeeeennnnttttssss
           Warn whenever a comment-start sequence ////**** appears in a
           ////**** comment, or whenever a backslash-newline appears in
           a //////// comment.  (Both forms have the same effect.)

       ----WWWWttttrrrriiiiggggrrrraaaapppphhhhssss
           Warn if any trigraphs are encountered.  This option
           used to take effect only if ----ttttrrrriiiiggggrrrraaaapppphhhhssss was also
           specified, but now works independently.  Warnings are
           not given for trigraphs within comments, as they do
           not affect the meaning of the program.




2004-02-14                  gcc-3.3.3                           3





CPP(1)                         GNU                         CPP(1)


       ----WWWWttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent, and
           problematic constructs which should be avoided.

       ----WWWWiiiimmmmppppoooorrrrtttt
           Warn the first time ####iiiimmmmppppoooorrrrtttt is used.

       ----WWWWuuuunnnnddddeeeeffff
           Warn whenever an identifier which is not a macro is
           encountered in an ####iiiiffff directive, outside of ddddeeeeffffiiiinnnneeeedddd.
           Such identifiers are replaced with zero.

       ----WWWWuuuunnnnuuuusssseeeedddd----mmmmaaaaccccrrrroooossss
           Warn about macros defined in the main file that are
           unused.  A macro is _u_s_e_d if it is expanded or tested
           for existence at least once.  The preprocessor will
           also warn if the macro has not been used at the time
           it is redefined or undefined.

           Built-in macros, macros defined on the command line,
           and macros defined in include files are not warned
           about.

           NNNNooootttteeee:::: If a macro is actually used, but only used in
           skipped conditional blocks, then CPP will report it as
           unused.  To avoid the warning in such a case, you
           might improve the scope of the macro's definition by,
           for example, moving it into the first skipped block.
           Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif


       ----WWWWeeeennnnddddiiiiffff----llllaaaabbbbeeeellllssss
           Warn whenever an ####eeeellllsssseeee or an ####eeeennnnddddiiiiffff are followed by
           text.  This usually happens in code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments, but
           often are not in older programs.  This warning is on
           by default.

       ----WWWWeeeerrrrrrrroooorrrr
           Make all warnings into hard errors.  Source code which
           triggers warnings will be rejected.



2004-02-14                  gcc-3.3.3                           4





CPP(1)                         GNU                         CPP(1)


       ----WWWWssssyyyysssstttteeeemmmm----hhhheeeeaaaaddddeeeerrrrssss
           Issue warnings for code in system headers.  These are
           normally unhelpful in finding bugs in your own code,
           therefore suppressed.  If you are responsible for the
           system library, you may want to see them.

       ----wwww  Suppress all warnings, including those which GNU CPP
           issues by default.

       ----ppppeeeeddddaaaannnnttttiiiicccc
           Issue all the mandatory diagnostics listed in the C
           standard.  Some of them are left out by default, since
           they trigger frequently on harmless code.

       ----ppppeeeeddddaaaannnnttttiiiicccc----eeeerrrrrrrroooorrrrssss
           Issue all the mandatory diagnostics, and make all
           mandatory diagnostics into errors.  This includes
           mandatory diagnostics that GCC issues without
           ----ppppeeeeddddaaaannnnttttiiiicccc but treats as warnings.

       ----MMMM  Instead of outputting the result of preprocessing,
           output a rule suitable for mmmmaaaakkkkeeee describing the
           dependencies of the main source file.  The
           preprocessor outputs one mmmmaaaakkkkeeee rule containing the
           object file name for that source file, a colon, and
           the names of all the included files, including those
           coming from ----iiiinnnncccclllluuuuddddeeee or ----iiiimmmmaaaaccccrrrroooossss command line options.

           Unless specified explicitly (with ----MMMMTTTT or ----MMMMQQQQ), the
           object file name consists of the basename of the
           source file with any suffix replaced with object file
           suffix.  If there are many included files then the
           rule is split into several lines using \\\\-newline.  The
           rule has no commands.

           This option does not suppress the preprocessor's debug
           output, such as ----ddddMMMM.  To avoid mixing such debug
           output with the dependency rules you should explicitly
           specify the dependency output file with ----MMMMFFFF, or use an
           environment variable like DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT.  Debug
           output will still be sent to the regular output stream
           as normal.

           Passing ----MMMM to the driver implies ----EEEE, and suppresses
           warnings with an implicit ----wwww.

       ----MMMMMMMM Like ----MMMM but do not mention header files that are found
           in system header directories, nor header files that
           are included, directly or indirectly, from such a
           header.

           This implies that the choice of angle brackets or
           double quotes in an ####iiiinnnncccclllluuuuddddeeee directive does not in
           itself determine whether that header will appear in



2004-02-14                  gcc-3.3.3                           5





CPP(1)                         GNU                         CPP(1)


           ----MMMMMMMM dependency output.  This is a slight change in
           semantics from GCC versions 3.0 and earlier.

       ----MMMMFFFF _f_i_l_e
           @anchor{-MF} When used with ----MMMM or ----MMMMMMMM, specifies a
           file to write the dependencies to.  If no ----MMMMFFFF switch
           is given the preprocessor sends the rules to the same
           place it would have sent preprocessed output.

           When used with the driver options ----MMMMDDDD or ----MMMMMMMMDDDD, ----MMMMFFFF
           overrides the default dependency output file.

       ----MMMMGGGG In conjunction with an option such as ----MMMM requesting
           dependency generation, ----MMMMGGGG assumes missing header
           files are generated files and adds them to the
           dependency list without raising an error.  The
           dependency filename is taken directly from the
           "#include" directive without prepending any path.  ----MMMMGGGG
           also suppresses preprocessed output, as a missing
           header file renders this useless.

           This feature is used in automatic updating of
           makefiles.

       ----MMMMPPPP This option instructs CPP to add a phony target for
           each dependency other than the main file, causing each
           to depend on nothing.  These dummy rules work around
           errors mmmmaaaakkkkeeee gives if you remove header files without
           updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:


       ----MMMMTTTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency
           generation.  By default CPP takes the name of the main
           input file, including any path, deletes any file
           suffix such as ....cccc, and appends the platform's usual
           object suffix.  The result is the target.

           An ----MMMMTTTT option will set the target to be exactly the
           string you specify.  If you want multiple targets, you
           can specify them as a single argument to ----MMMMTTTT, or use
           multiple ----MMMMTTTT options.

           For example, ----MMMMTTTT ''''$$$$((((oooobbbbjjjjppppffffxxxx))))ffffoooooooo....oooo'''' might give

                   $(objpfx)foo.o: foo.c





2004-02-14                  gcc-3.3.3                           6





CPP(1)                         GNU                         CPP(1)


       ----MMMMQQQQ _t_a_r_g_e_t
           Same as ----MMMMTTTT, but it quotes any characters which are
           special to Make.  ----MMMMQQQQ ''''$$$$((((oooobbbbjjjjppppffffxxxx))))ffffoooooooo....oooo'''' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it
           were given with ----MMMMQQQQ.

       ----MMMMDDDD ----MMMMDDDD is equivalent to ----MMMM ----MMMMFFFF _f_i_l_e, except that ----EEEE is
           not implied.  The driver determines _f_i_l_e based on
           whether an ----oooo option is given.  If it is, the driver
           uses its argument but with a suffix of _._d, otherwise
           it take the basename of the input file and applies a
           _._d suffix.

           If ----MMMMDDDD is used in conjunction with ----EEEE, any ----oooo switch
           is understood to specify the dependency output file
           (but @pxref{-MF}), but if used without ----EEEE, each ----oooo is
           understood to specify a target object file.

           Since ----EEEE is not implied, ----MMMMDDDD can be used to generate a
           dependency output file as a side-effect of the
           compilation process.

       ----MMMMMMMMDDDD
           Like ----MMMMDDDD except mention only user header files, not
           system -header files.

       ----xxxx cccc
       ----xxxx cccc++++++++
       ----xxxx oooobbbbjjjjeeeeccccttttiiiivvvveeee----cccc
       ----xxxx aaaasssssssseeeemmmmbbbblllleeeerrrr----wwwwiiiitttthhhh----ccccpppppppp
           Specify the source language: C, C++, Objective-C, or
           assembly.  This has nothing to do with standards
           conformance or extensions; it merely selects which
           base syntax to expect.  If you give none of these
           options, cpp will deduce the language from the
           extension of the source file: ....cccc, ....cccccccc, ....mmmm, or ....SSSS.
           Some other common extensions for C++ and assembly are
           also recognized.  If cpp does not recognize the
           extension, it will treat the file as C; this is the
           most generic mode.

           NNNNooootttteeee:::: Previous versions of cpp accepted a ----llllaaaannnngggg option
           which selected both the language and the standards
           conformance level.  This option has been removed,
           because it conflicts with the ----llll option.

       ----ssssttttdddd====_s_t_a_n_d_a_r_d
       ----aaaannnnssssiiii
           Specify the standard to which the code should conform.
           Currently CPP knows about C and C++ standards; others
           may be added in the future.



2004-02-14                  gcc-3.3.3                           7





CPP(1)                         GNU                         CPP(1)


           _s_t_a_n_d_a_r_d may be one of:

           ""iso9899:1990""
           ""c89""
               The ISO C standard from 1990.  cccc88889999 is the
               customary shorthand for this version of the
               standard.

               The ----aaaannnnssssiiii option is equivalent to ----ssssttttdddd====cccc88889999.

           ""iso9899:199409""
               The 1990 C standard, as amended in 1994.

           ""iso9899:1999""
           ""c99""
           ""iso9899:199x""
           ""c9x""
               The revised ISO C standard, published in December
               1999.  Before publication, this was known as C9X.

           ""gnu89""
               The 1990 C standard plus GNU extensions.  This is
               the default.

           ""gnu99""
           ""gnu9x""
               The 1999 C standard plus GNU extensions.

           ""c++98""
               The 1998 ISO C++ standard plus amendments.

           ""gnu++98""
               The same as ----ssssttttdddd====cccc++++++++99998888 plus GNU extensions.  This
               is the default for C++ code.

       ----IIII---- Split the include path.  Any directories specified
           with ----IIII options before ----IIII---- are searched only for
           headers requested with "#include "file""; they are not
           searched for "#include <file>".  If additional
           directories are specified with ----IIII options after the
           ----IIII----, those directories are searched for all ####iiiinnnncccclllluuuuddddeeee
           directives.

           In addition, ----IIII---- inhibits the use of the directory of
           the current file directory as the first search
           directory for "#include "file"".

       ----nnnnoooossssttttddddiiiinnnncccc
           Do not search the standard system directories for
           header files.  Only the directories you have specified
           with ----IIII options (and the directory of the current
           file, if appropriate) are searched.





2004-02-14                  gcc-3.3.3                           8





CPP(1)                         GNU                         CPP(1)


       ----nnnnoooossssttttddddiiiinnnncccc++++++++
           Do not search for header files in the C++-specific
           standard directories, but do still search the other
           standard directories.  (This option is used when
           building the C++ library.)

       ----iiiinnnncccclllluuuuddddeeee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the
           first line of the primary source file.  However, the
           first directory searched for _f_i_l_e is the
           preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not
           found there, it is searched for in the remainder of
           the "#include "..."" search chain as normal.

           If multiple ----iiiinnnncccclllluuuuddddeeee options are given, the files are
           included in the order they appear on the command line.

       ----iiiimmmmaaaaccccrrrroooossss _f_i_l_e
           Exactly like ----iiiinnnncccclllluuuuddddeeee, except that any output produced
           by scanning _f_i_l_e is thrown away.  Macros it defines
           remain defined.  This allows you to acquire all the
           macros from a header without also processing its
           declarations.

           All files specified by ----iiiimmmmaaaaccccrrrroooossss are processed before
           all files specified by ----iiiinnnncccclllluuuuddddeeee.

       ----iiiiddddiiiirrrraaaafffftttteeeerrrr _d_i_r
           Search _d_i_r for header files, but do it _a_f_t_e_r all
           directories specified with ----IIII and the standard system
           directories have been exhausted.  _d_i_r is treated as a
           system include directory.

       ----iiiipppprrrreeeeffffiiiixxxx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent
           ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx options.  If the prefix represents a
           directory, you should include the final ////.

       ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx _d_i_r
       ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxxbbbbeeeeffffoooorrrreeee _d_i_r
           Append _d_i_r to the prefix specified previously with
           ----iiiipppprrrreeeeffffiiiixxxx, and add the resulting directory to the
           include search path.  ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxxbbbbeeeeffffoooorrrreeee puts it in
           the same place ----IIII would; ----iiiiwwwwiiiitttthhhhpppprrrreeeeffffiiiixxxx puts it where
           ----iiiiddddiiiirrrraaaafffftttteeeerrrr would.

           Use of these options is discouraged.

       ----iiiissssyyyysssstttteeeemmmm _d_i_r
           Search _d_i_r for header files, after all directories
           specified by ----IIII but before the standard system
           directories.  Mark it as a system directory, so that
           it gets the same special treatment as is applied to



2004-02-14                  gcc-3.3.3                           9





CPP(1)                         GNU                         CPP(1)


           the standard system directories.

       ----ffffpppprrrreeeepppprrrroooocccceeeesssssssseeeedddd
           Indicate to the preprocessor that the input file has
           already been preprocessed.  This suppresses things
           like macro expansion, trigraph conversion, escaped
           newline splicing, and processing of most directives.
           The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed
           with ----CCCC to the compiler without problems.  In this
           mode the integrated preprocessor is little more than a
           tokenizer for the front ends.

           ----ffffpppprrrreeeepppprrrroooocccceeeesssssssseeeedddd is implicit if the input file has one
           of the extensions ....iiii, ....iiiiiiii or ....mmmmiiii.  These are the
           extensions that GCC uses for preprocessed files
           created by ----ssssaaaavvvveeee----tttteeeemmmmppppssss.

       ----ffffttttaaaabbbbssssttttoooopppp====_w_i_d_t_h
           Set the distance between tab stops.  This helps the
           preprocessor report correct column numbers in warnings
           or errors, even if tabs appear on the line.  If the
           value is less than 1 or greater than 100, the option
           is ignored.  The default is 8.

       ----ffffnnnnoooo----sssshhhhoooowwww----ccccoooolllluuuummmmnnnn
           Do not print column numbers in diagnostics.  This may
           be necessary if diagnostics are being scanned by a
           program that does not understand the column numbers,
           such as ddddeeeejjjjaaaaggggnnnnuuuu.

       ----AAAA _p_r_e_d_i_c_a_t_e====_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.  This form is preferred to the older
           form ----AAAA _p_r_e_d_i_c_a_t_e((((_a_n_s_w_e_r)))), which is still supported,
           because it does not use shell special characters.

       ----AAAA ----_p_r_e_d_i_c_a_t_e====_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.

       ----ddddCCCCHHHHAAAARRRRSSSS
           _C_H_A_R_S is a sequence of one or more of the following
           characters, and must not be preceded by a space.
           Other characters are interpreted by the compiler
           proper, or reserved for future versions of GCC, and so
           are silently ignored.  If you specify characters whose
           behavior conflicts, the result is undefined.

           MMMM   Instead of the normal output, generate a list of
               ####ddddeeeeffffiiiinnnneeee directives for all the macros defined
               during the execution of the preprocessor,
               including predefined macros.  This gives you a way
               of finding out what is predefined in your version



2004-02-14                  gcc-3.3.3                          10





CPP(1)                         GNU                         CPP(1)


               of the preprocessor.  Assuming you have no file
               _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               will show all the predefined macros.

           DDDD   Like MMMM except in two respects: it does _n_o_t include
               the predefined macros, and it outputs _b_o_t_h the
               ####ddddeeeeffffiiiinnnneeee directives and the result of
               preprocessing.  Both kinds of output go to the
               standard output file.

           NNNN   Like DDDD, but emit only the macro names, not their
               expansions.

           IIII   Output ####iiiinnnncccclllluuuuddddeeee directives in addition to the
               result of preprocessing.

       ----PPPP  Inhibit generation of linemarkers in the output from
           the preprocessor.  This might be useful when running
           the preprocessor on something that is not C code, and
           will be sent to a program which might be confused by
           the linemarkers.

       ----CCCC  Do not discard comments.  All comments are passed
           through to the output file, except for comments in
           processed directives, which are deleted along with the
           directive.

           You should be prepared for side effects when using ----CCCC;
           it causes the preprocessor to treat comments as tokens
           in their own right.  For example, comments appearing
           at the start of what would be a directive line have
           the effect of turning that line into an ordinary
           source line, since the first token on the line is no
           longer a ####.

       ----CCCCCCCC Do not discard comments, including during macro
           expansion.  This is like ----CCCC, except that comments
           contained within macros are also passed through to the
           output file where the macro is expanded.

           In addition to the side-effects of the ----CCCC option, the
           ----CCCCCCCC option causes all C++-style comments inside a
           macro to be converted to C-style comments.  This is to
           prevent later use of that macro from inadvertently
           commenting out the remainder of the source line.

           The ----CCCCCCCC option is generally used to support lint
           comments.

       ----ttttrrrraaaaddddiiiittttiiiioooonnnnaaaallll----ccccpppppppp
           Try to imitate the behavior of old-fashioned C



2004-02-14                  gcc-3.3.3                          11





CPP(1)                         GNU                         CPP(1)


           preprocessors, as opposed to ISO C preprocessors.

       ----ttttrrrriiiiggggrrrraaaapppphhhhssss
           Process trigraph sequences.

       ----rrrreeeemmmmaaaapppp
           Enable special code to work around file systems which
           only permit very short file names, such as MS-DOS.

       --------hhhheeeellllpppp
       --------ttttaaaarrrrggggeeeetttt----hhhheeeellllpppp
           Print text describing all the command line options
           instead of preprocessing anything.

       ----vvvv  Verbose mode.  Print out GNU CPP's version number at
           the beginning of execution, and report the final form
           of the include path.

       ----HHHH  Print the name of each header file used, in addition
           to other normal activities.  Each name is indented to
           show how deep in the ####iiiinnnncccclllluuuuddddeeee stack it is.

       ----vvvveeeerrrrssssiiiioooonnnn
       --------vvvveeeerrrrssssiiiioooonnnn
           Print out GNU CPP's version number.  With one dash,
           proceed to preprocess as normal.  With two dashes,
           exit immediately.

EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT
       This section describes the environment variables that
       affect how CPP operates.  You can use them to specify
       directories or prefixes to use when searching for include
       files, or to control dependency output.

       Note that you can also specify places to search using
       options such as ----IIII, and control dependency output with
       options like ----MMMM.  These take precedence over environment
       variables, which in turn take precedence over the
       configuration of GCC.

       CCCCPPPPAAAATTTTHHHH
       CCCC____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
       CCCCPPPPLLLLUUUUSSSS____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
       OOOOBBBBJJJJCCCC____IIIINNNNCCCCLLLLUUUUDDDDEEEE____PPPPAAAATTTTHHHH
           Each variable's value is a list of directories
           separated by a special character, much like PPPPAAAATTTTHHHH, in
           which to look for header files.  The special
           character, "PATH_SEPARATOR", is target-dependent and
           determined at GCC build time.  For Windows-based
           targets it is a semicolon, and for almost all other
           targets it is a colon.

           CCCCPPPPAAAATTTTHHHH specifies a list of directories to be searched
           as if specified with ----IIII, but after any paths given



2004-02-14                  gcc-3.3.3                          12





CPP(1)                         GNU                         CPP(1)


           with ----IIII options on the command line.  This environment
           variable is used regardless of which language is being
           preprocessed.

           The remaining environment variables apply only when
           preprocessing the particular language indicated.  Each
           specifies a list of directories to be searched as if
           specified with ----iiiissssyyyysssstttteeeemmmm, but after any paths given
           with ----iiiissssyyyysssstttteeeemmmm options on the command line.

           In all these variables, an empty element instructs the
           compiler to search its current working directory.
           Empty elements can appear at the beginning or end of a
           path.  For instance, if the value of CCCCPPPPAAAATTTTHHHH is
           ":/special/include", that has the same effect as
           ----IIII.... ----IIII////ssssppppeeeecccciiiiaaaallll////iiiinnnncccclllluuuuddddeeee.

       DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT
           If this variable is set, its value specifies how to
           output dependencies for Make based on the non-system
           header files processed by the compiler.  System header
           files are ignored in the dependency output.

           The value of DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT can be just a file
           name, in which case the Make rules are written to that
           file, guessing the target name from the source file
           name.  Or the value can have the form _f_i_l_e _t_a_r_g_e_t, in
           which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is
           equivalent to combining the options ----MMMMMMMM and ----MMMMFFFF, with
           an optional ----MMMMTTTT switch too.

       SSSSUUUUNNNNPPPPRRRROOOO____DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS
           This variable is the same as DDDDEEEEPPPPEEEENNNNDDDDEEEENNNNCCCCIIIIEEEESSSS____OOOOUUUUTTTTPPPPUUUUTTTT (see
           above), except that system header files are not
           ignored, so it implies ----MMMM rather than ----MMMMMMMM.  However,
           the dependence on the main input file is omitted.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _g_c_c(1), _a_s(1), _l_d(1), and
       the Info entries for _c_p_p, _g_c_c, and _b_i_n_u_t_i_l_s.

CCCCOOOOPPPPYYYYRRRRIIIIGGGGHHHHTTTT
       Copyright (c) 1987, 1989, 1991, 1992, 1993, 1994, 1995,
       1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
       Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.1 or any later version
       published by the Free Software Foundation.  A copy of the
       license is included in the man page _g_f_d_l(7).  This manual



2004-02-14                  gcc-3.3.3                          13





CPP(1)                         GNU                         CPP(1)


       contains no Invariant Sections.  The Front-Cover Texts are
       (a) (see below), and the Back-Cover Texts are (b) (see
       below).

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.












































2004-02-14                  gcc-3.3.3                          14


